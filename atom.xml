<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iZheteng</title>
  <subtitle>Enjoy work, Enjoy life!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cuiqingwei.github.io/"/>
  <updated>2019-12-22T13:32:04.000Z</updated>
  <id>http://cuiqingwei.github.io/</id>
  
  <author>
    <name>cuiqingwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Ubuntu 18.04 LTS中使用Katoolin安装Kali Linux Tools</title>
    <link href="http://cuiqingwei.github.io/2019/12/22/2019-12-22-%E5%9C%A8Ubuntu-18-04-LTS%E4%B8%AD%E4%BD%BF%E7%94%A8Katoolin%E5%AE%89%E8%A3%85Kali-Linux-Tools/"/>
    <id>http://cuiqingwei.github.io/2019/12/22/2019-12-22-在Ubuntu-18-04-LTS中使用Katoolin安装Kali-Linux-Tools/</id>
    <published>2019-12-22T13:07:00.000Z</published>
    <updated>2019-12-22T13:32:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将引导您逐步在Ubuntu中使用Katoolin安装Kali Linux Tools。对于那些不知道的人，<strong>Katoolin</strong>是一个Python脚本，可用于一次安装所有Kali Linux工具或手动一次安装。Kali Linux具有300多种渗透测试工具。除了安装所有工具，您还可以使用Katoolin在Linux框中仅安装您选择的选择性工具。如果您想在Ubuntu或任何其他基于DEB的系统上尝试使用Kali Linux工具，则应该尝试一下Katoolin。它将在您的Ubuntu系统中添加Kali Linux存储库，以便您可以一次安装所有渗透测试工具，也可以仅安装必要的工具。Katoolin是完全免费的开源软件，并已在基于Debian的系统上经过正式测试。</p>
<a id="more"></a>
<h2 id="在Ubuntu-18-04-LTS中安装Katoolin"><a href="#在Ubuntu-18-04-LTS中安装Katoolin" class="headerlink" title="在Ubuntu 18.04 LTS中安装Katoolin"></a>在Ubuntu 18.04 LTS中安装Katoolin</h2><p>我已经在Ubuntu 18.04 LTS服务器版本中测试了Katoolin。但是，它应该可以在其他Ubuntu版本和派生版本上使用。</p>
<p>确保在Ubuntu系统中安装了以下先决条件。</p>
<ul>
<li>Python 2.7</li>
<li>Git</li>
</ul>
<p>这些软件包在Ubuntu的默认源中可用，因此您可以使用apt软件包管理器进行安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install python git</div></pre></td></tr></table></figure>
<p>另外，请确保已启用<strong>[Universe]</strong>源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo add-apt-repository Universe</div></pre></td></tr></table></figure>
<p>这是我的测试机详细信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cuiqingwei@Gary-Aspire-4739:/usr/bin$ lsb_release -a</div><div class="line">No LSB modules are available.</div><div class="line">Distributor ID:	Ubuntu</div><div class="line">Description:	Ubuntu 18.04.3 LTS</div><div class="line">Release:	18.04</div><div class="line">Codename:	bionic</div><div class="line">cuiqingwei@Gary-Aspire-4739:/usr/bin$ python -V</div><div class="line">Python 2.7.15+</div><div class="line">cuiqingwei@Gary-Aspire-4739:/usr/bin$ git --version</div><div class="line">git version 2.17.1</div><div class="line">cuiqingwei@Gary-Aspire-4739:/usr/bin$</div></pre></td></tr></table></figure>
<p>python和git版本</p>
<p>好吧，我们已经准备就绪。安装必备组件后，如下所示安装Katoolin：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/LionSec/katoolin.git</div></pre></td></tr></table></figure>
<p>上面的命令会将katoolin存储库克隆到当前工作目录中名为<strong>“ katoolin”</strong>的文件夹中。</p>
<p>接下来，将Katoolin二进制文件复制到您的路径，例如<strong>/ usr / bin /</strong>，如下所示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo cp katoolin / katoolin.py / usr / bin / katoolin</div></pre></td></tr></table></figure>
<p>最后，将Katoolin二进制文件设置为可执行文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chmod + x / usr / bin / katoolin</div></pre></td></tr></table></figure>
<p>现在，我们已经安装了Katoolin。让我们继续前进，看看如何使用它。</p>
<h2 id="使用Katoolin安装Kali-Linux-Tools"><a href="#使用Katoolin安装Kali-Linux-Tools" class="headerlink" title="使用Katoolin安装Kali Linux Tools"></a>使用Katoolin安装Kali Linux Tools</h2><p>所有命令都应以root用户或<strong>sudo</strong>特权运行。</p>
<p>要启动Katoolin，请运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo katoolin</div></pre></td></tr></table></figure>
<p>这就是katoolin命令行界面的样子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> $$\   $$\             $$\                         $$\ $$\           </div><div class="line"> $$ | $$  |            $$ |                        $$ |\__|          </div><div class="line"> $$ |$$  /  $$$$$$\  $$$$$$\    $$$$$$\   $$$$$$\  $$ |$$\ $$$$$$$\  </div><div class="line"> $$$$$  /   \____$$\ \_$$  _|  $$  __$$\ $$  __$$\ $$ |$$ |$$  __$$\ </div><div class="line"> $$  $$&lt;    $$$$$$$ |  Kali linux tools installer |$$ |$$ |$$ |  $$ |</div><div class="line"> $$ |\$$\  $$  __$$ |  $$ |$$\ $$ |  $$ |$$ |  $$ |$$ |$$ |$$ |  $$ |</div><div class="line"> $$ | \$$\ \$$$$$$$ |  \$$$$  |\$$$$$$  |\$$$$$$  |$$ |$$ |$$ |  $$ |</div><div class="line"> \__|  \__| \_______|   \____/  \______/  \______/ \__|\__|\__|  \__| V2.0 </div><div class="line"></div><div class="line"></div><div class="line"> + -- -- +=[ Author: LionSec | Homepage: www.neodrix.com</div><div class="line"> + -- -- +=[ 331 Tools </div><div class="line"></div><div class="line"></div><div class="line">[W] Before updating your system , please remove all Kali-linux repositories to avoid any kind of problem .</div><div class="line">		</div><div class="line"></div><div class="line">1) Add Kali repositories &amp; Update </div><div class="line">2) View Categories</div><div class="line">3) Install classicmenu indicator</div><div class="line">4) Install Kali menu</div><div class="line">5) Help</div><div class="line"></div><div class="line">kat &gt;</div></pre></td></tr></table></figure>
<p>启动Katoolin</p>
<p>如上所示，Katoolin主界面有四个选项。输入数字以打开相应的子菜单。让我们一一看。</p>
<h3 id="1-添加Kali存储库并更新"><a href="#1-添加Kali存储库并更新" class="headerlink" title="1.添加Kali存储库并更新"></a>1.添加Kali存储库并更新</h3><p>该选项使您可以将kali Linux存储库添加到Linux系统。为此，请键入 <strong>1</strong>（数字1）以添加存储库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1) Add Kali repositories &amp; Update </div><div class="line">2) View Categories</div><div class="line">3) Install classicmenu indicator</div><div class="line">4) Install Kali menu</div><div class="line">5) Help</div><div class="line"></div><div class="line">			</div><div class="line">kat &gt; 1</div></pre></td></tr></table></figure>
<p>添加Kali存储库</p>
<p>将打开一个子菜单。再次输入<strong>1</strong>以添加Kali-linux存储库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">kat &gt; 1</div><div class="line"></div><div class="line">1) Add kali linux repositories</div><div class="line">2) Update</div><div class="line">3) Remove all kali linux repositories</div><div class="line">4) View the contents of sources.list file</div><div class="line"></div><div class="line">					</div><div class="line">What do you want to do ?&gt; 1</div></pre></td></tr></table></figure>
<p>然后，键入<strong>2</strong>以更新存储库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Executing: /tmp/apt-key-gpghome.MvaSscaYwv/gpg.1.sh --keyserver pool.sks-keyservers.net --recv-keys ED444FF07D8D0BF6</div><div class="line">gpg: connecting dirmngr at &apos;/tmp/apt-key-gpghome.MvaSscaYwv/S.dirmngr&apos; failed: IPC connect call failed</div><div class="line">gpg: keyserver receive failed: No dirmngr</div><div class="line"></div><div class="line">1) Add kali linux repositories</div><div class="line">2) Update</div><div class="line">3) Remove all kali linux repositories</div><div class="line">4) View the contents of sources.list file</div><div class="line"></div><div class="line">					</div><div class="line">What do you want to do ?&gt; 2</div></pre></td></tr></table></figure>
<p>类型<strong>3</strong>，如果你想删除已添加的卡利Linux的存储库，并键入<strong>4</strong>，查看的sources.list文件的内容。</p>
<p>要返回上一菜单，请键入<strong>back</strong>，然后按Enter。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">What do you want to do ?&gt; back</div><div class="line">1) Add Kali repositories &amp; Update </div><div class="line">2) View Categories</div><div class="line">3) Install classicmenu indicator</div><div class="line">4) Install Kali menu</div><div class="line">5) Help</div><div class="line"></div><div class="line">kat &gt;</div></pre></td></tr></table></figure>
<p>要返回主菜单，请键入<strong>gohome，</strong>然后按Enter。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">kat &gt; gohome</div><div class="line">1) Add Kali repositories &amp; Update </div><div class="line">2) View Categories</div><div class="line">3) Install classicmenu indicator</div><div class="line">4) Install Kali menu</div><div class="line">5) Help</div><div class="line"></div><div class="line">kat &gt;</div></pre></td></tr></table></figure>
<h3 id="2-类别"><a href="#2-类别" class="headerlink" title="2.类别"></a>2.类别</h3><p>要查看所有可用类别列表，请在主菜单中键入<strong>2</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">kat &gt; 2</div><div class="line">**************************** All Categories *****************************</div><div class="line">1) Information Gathering			8) Exploitation Tools</div><div class="line">2) Vulnerability Analysis			9) Forensics Tools</div><div class="line">3) Wireless Attacks				10) Stress Testing</div><div class="line">4) Web Applications				11) Password Attacks</div><div class="line">5) Sniffing &amp; Spoofing				12) Reverse Engineering</div><div class="line">6) Maintaining Access				13) Hardware Hacking</div><div class="line">7) Reporting Tools 				14) Extra</div><div class="line">0) All</div><div class="line">Select a category or press (0) to install all Kali linux tools .</div></pre></td></tr></table></figure>
<p>如您在上面的输出中看到的，有<strong>14个</strong>类别可用。您可以一次安装所有它们，也可以通过输入相应的类别编号来安装任何特定类别。</p>
<p>要安装所有kali Linux工具，请键入<strong>0</strong>（零），然后按Enter键。这将安装所有工具。需要一段时间，具体取决于Internet的速度。另外，请确保硬盘驱动器中有足够的可用空间。安装所有Kali Linux可能会占用大量磁盘空间。</p>
<p>如果您不具备所有工具，则只需安装要使用的工具即可。举例来说，要在“ <strong>漏洞利用工具”</strong>类别下安装<strong>工具</strong>，请键入<strong>8</strong>并按Enter。它将显示一个子菜单，并列出此类别中的所有可用软件包。您可以通过键入<strong>0</strong>（零）来安装该类别中的所有工具，或者键入任何特定的数字以将特定工具安装在“利用工具”类别下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">kat &gt; 8</div><div class="line"></div><div class="line">=+[ Exploitation Tools</div><div class="line"></div><div class="line">1) Armitage</div><div class="line"> 2) Backdoor Factory</div><div class="line"> 3) BeEF</div><div class="line"> 4) cisco-auditing-tool</div><div class="line"> 5) cisco-global-exploiter </div><div class="line"> 6) cisco-ocs</div><div class="line"> 7) cisco-torch</div><div class="line"> 8) commix</div><div class="line"> 9) crackle</div><div class="line">10) jboss-autopwn</div><div class="line">11) Linux Exploit Suggester</div><div class="line">12) Maltego Teeth</div><div class="line">13) SET</div><div class="line">14) ShellNoob</div><div class="line">15) sqlmap</div><div class="line">16) THC-IPV6</div><div class="line">17) Yersinia</div><div class="line"></div><div class="line">0) Install all Exploitation Tools</div><div class="line"></div><div class="line">Insert the number of the tool to install it .</div><div class="line"></div><div class="line">kat &gt;</div></pre></td></tr></table></figure>
<p>要返回上<strong>一级</strong>菜单，请键入<strong>back</strong>，然后要返回主菜单，请键入<strong>gohome</strong>。</p>
<h3 id="3-安装ClassicMenu指示器"><a href="#3-安装ClassicMenu指示器" class="headerlink" title="3.安装ClassicMenu指示器"></a>3.安装ClassicMenu指示器</h3><p>ClassicMenu Indicator是Ubuntu桌面环境顶部面板的通知区域小程序。它为那些喜欢Unity破折号菜单的人提供了一种获取经典GNOME风格应用程序菜单的简单方法。像经典的GNOME菜单一样，它包含Wine游戏和应用程序（如果已安装）。</p>
<p>要安装它，请键入<strong>3</strong>并按Enter，然后键入y进行确认并安装。</p>
<h3 id="4-安装Kali菜单"><a href="#4-安装Kali菜单" class="headerlink" title="4.安装Kali菜单"></a>4.安装Kali菜单</h3><p>要安装Kali Menu，请键入<strong>4，</strong> 然后键入 <strong>y</strong> 以确认安装。</p>
<p>使用Katoolin完成操作后，按 <strong>“ Ctrl + C”</strong>退出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kat &gt; ^CShutdown requested...Goodbye...</div></pre></td></tr></table></figure>
<p>就这样。如您所见，Katoolin是非常简单易用的工具，它提供了一种在Ubuntu Linux盒子中安装Kali Linux工具的简便方法。您并不总是需要Kali Linux来尝试所有取证，渗透和安全测试工具。Katoolin将在任何基于DEB的Linux系统中轻松为您完成此任务。试试看，您不会失望的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将引导您逐步在Ubuntu中使用Katoolin安装Kali Linux Tools。对于那些不知道的人，&lt;strong&gt;Katoolin&lt;/strong&gt;是一个Python脚本，可用于一次安装所有Kali Linux工具或手动一次安装。Kali Linux具有300多种渗透测试工具。除了安装所有工具，您还可以使用Katoolin在Linux框中仅安装您选择的选择性工具。如果您想在Ubuntu或任何其他基于DEB的系统上尝试使用Kali Linux工具，则应该尝试一下Katoolin。它将在您的Ubuntu系统中添加Kali Linux存储库，以便您可以一次安装所有渗透测试工具，也可以仅安装必要的工具。Katoolin是完全免费的开源软件，并已在基于Debian的系统上经过正式测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://cuiqingwei.github.io/tags/ubuntu/"/>
    
      <category term="Kali" scheme="http://cuiqingwei.github.io/tags/Kali/"/>
    
  </entry>
  
  <entry>
    <title>动画大师华特•迪士尼关于梦想的10堂课</title>
    <link href="http://cuiqingwei.github.io/2019/12/22/2019-12-22-%E5%8A%A8%E7%94%BB%E5%A4%A7%E5%B8%88%E5%8D%8E%E7%89%B9%E2%80%A2%E8%BF%AA%E5%A3%AB%E5%B0%BC%E5%85%B3%E4%BA%8E%E6%A2%A6%E6%83%B3%E7%9A%8410%E5%A0%82%E8%AF%BE/"/>
    <id>http://cuiqingwei.github.io/2019/12/22/2019-12-22-动画大师华特•迪士尼关于梦想的10堂课/</id>
    <published>2019-12-22T06:04:00.000Z</published>
    <updated>2019-12-22T06:21:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><em>Walt Disney was a showman. According to Time, he “received more Academy Awards and nominations than any other person in history.” The Disneyland theme parks are truly magical kingdoms, for adults, as well as for children.</em><br>华特·迪士尼是位表演者。据《时代》报道，他“收到的奥斯卡奖项和提名是史上最多的。” 迪士尼主题公园对成年人来说都是魔幻王国，更别提孩子们了。<br><em>Here are some Walt Disney lessons in making your dreams come true, courtesy of the master of imagination, dreaming, and achievement himself.</em><br>下面的这些华特·迪士尼的人生课能让你的梦想成真，让你成为想象力和梦想的大师，并有所成就。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-Dream-Big"><a href="#1-Dream-Big" class="headerlink" title="1. Dream Big"></a>1. Dream Big</h1><p><strong>尽情梦想</strong></p>
<p>“If you can dream it, you can do it.” - Walt Disney<br><code>“如果你能梦想，那么你就能做到。”</code>——华特·迪士尼<br><em>What if money, time, looks, and gender were no object? What would your biggest dream be? Often we short-change ourselves. We listen to others’ put-downs, and internalize them. It’s hard to remember our dreams. Harder still, to imagine that we could achieve a dream. Take Walt Disney’s words to heart. Start dreaming. Then believe that you can achieve your dream.</em><br><code>如果金钱、时间、外貌、性别都不成问题，那你最大的梦想是什么？我们经常欺骗自己。我们听别人说那些贬低人的话，并让它们成为自己性格的一部分，我们很难想起自己的梦想。更难的是去想象我们可以实现梦想。把华特·迪士尼先生的话记在心里。开始梦想，相信你可以实现自己的梦想。</code></p>
<h1 id="2-Be-Courageous"><a href="#2-Be-Courageous" class="headerlink" title="2. Be Courageous"></a>2. Be Courageous</h1><p><strong>勇敢起来</strong></p>
<p>“All our dreams can come true, if we have the courage to pursue them.”- Walt Disney<br><code>“如果我们有勇气去追求梦想，那么我们所有的梦想都会成真。”</code>——华特·迪士尼<br><em>It takes courage to step outside your comfort zone. However, achieving your dreams always means that you’re doing things you’ve never done before. Practice being courageous. Today, do something you haven’t done before. Propose a new project to your boss. Send your crush some flowers. Being courageous doesn’t mean that you’re unafraid. It means acting in spite of your fear.</em><br><code>要想走出舒适区，必须需要勇气。不管怎样，实现梦想都意味着你要做以前没做过的事情。练习一下，让自己勇敢起来。今天，做做你以前没做过的事情：向你的老板提议一个新的项目，给你喜欢的人送些花儿。勇敢起来并不是说你无所畏惧，它指的是尽管害怕也依然去做。</code></p>
<h1 id="3-Be-Yourself"><a href="#3-Be-Yourself" class="headerlink" title="3. Be Yourself"></a>3. Be Yourself</h1><p><strong>做你自己</strong></p>
<p>“The more you like yourself, the less you are like anyone else, which makes you unique.”- Walt Disney<br><code>“你越喜欢自己，你就越不会把自己和别人相似，这会让你独一无二。”</code>——华特·迪士尼<br><em>We all wear masks. We try to be what we think people want us to be. We try to emulate role models. What if you were just yourself? Discovering who you are underneath all the masks is challenging. It’s hard to be authentic if you’re not sure who you are. Just for today, do what pleases you. Say what you mean, rather than saying what you think someone wants to hear. However, be appropriate—being “like yourself” isn’t a license to be outrageous, or to say hurtful things.</em><br><code>我们每个人都戴着面具，我们试着去成为别人想让我们成为的样子，我们试着去模仿榜样。如果你就是你自己呢？找出面具下面的真我是富于挑战性的。如果你不确定自己是谁，那很难做真实的自己。说出你想表达的意思，而不是你认为别人想听的话。但不管怎样，也要恰当。——“喜欢自己” 并不表示要语出惊人，或说些伤人心的话语。</code></p>
<h1 id="4-Stop-Talking-Start-Doing"><a href="#4-Stop-Talking-Start-Doing" class="headerlink" title="4. Stop Talking. Start Doing"></a>4. Stop Talking. Start Doing</h1><p><strong>停止交谈，开始实干。</strong></p>
<p>“The way to get started is to quit talking and begin doing.”- Walt Disney<br><code>“开始的方法就是停止交谈并开始实干。”</code>——华特·迪士尼<br><em>You’re dreaming big. You’re inspired. You tell everyone about your dream. Stop! Keep it to yourself. Work quietly towards your dream. You don’t need validation from anyone, nor do you need permission. Be authentic, and do something today, which will help you to achieve your dream.</em><br><code>你在尽情地梦想。你受到了鼓舞。你把梦想告诉了大家。停！只要自己知道就行。悄悄地朝着梦想努力。你不必需要别人的认可，你也不需要别人的准许。做真实的自己，今天就做些事情，这会帮你实现梦想。</code></p>
<h1 id="5-Embrace-Competition"><a href="#5-Embrace-Competition" class="headerlink" title="5. Embrace Competition"></a>5. Embrace Competition</h1><p><strong>拥抱竞争</strong></p>
<p>“I have been up against tough competition all my life. I wouldn’t know how to get along without it.”- Walt Disney<br><code>“我一生都在不断地面临着严峻的竞争。我不知道没有竞争该如何是好。”</code>——华特·迪士尼<br><em>Competition is essential to help you to achieve your dreams. If there were no competition, you’d have nothing against which to measure yourself. Competition makes you better and stronger than you might otherwise be. In business, competition fosters innovation. If you’re uncomfortable with competition, or envious of competitors, ask yourself why. Then do the best you can.</em><br><code>竞争是帮你实现梦想的必要条件。如果没有竞争，那你就没什么东西来衡量自己。竞争会让你变得更好、更强大。在业务方面，竞争可以促进创新。如果你不喜欢竞争，或羡慕竞争对手，那你该想想原因。然后尽你最大的努力。</code></p>
<h1 id="6-Go-and-Get-What-You-Want-Don’t-Wait"><a href="#6-Go-and-Get-What-You-Want-Don’t-Wait" class="headerlink" title="6. Go and Get What You Want. Don’t Wait"></a>6. Go and Get What You Want. Don’t Wait</h1><p><strong>去追求并得到你想要的，不要等待。</strong></p>
<p>“Cinderella believed in dreams, all right, but she also believed in doing something about them. When Prince Charming didn’t come along, she went over to the palace and got him.” - Walt Disney<br><code>“灰姑娘相信梦想，但是她也相信要为之奋斗。当白马王子没来时，她去了宫殿才得以遇见他。”</code>——华特·迪士尼<br><em>Forget wishing. No one is handed his dreams for free. You have to fight to achieve a dream. Expect to struggle. Ask yourself what price you’re will to pay—dreams always have a price. However, it’s not all doom and gloom. Setting goals, making plans, and working toward your dream is wonderful. Enjoy the journey. When you’ve achieved a long-held dream, you find that while you appreciate the achievement, the memories of the journey are what make you smile.</em><br><code>别许愿了。没人会无偿让出自己的梦想。要想实现梦想，你要学会去争取。你要预料到要和困难做斗争。问问自己你准备要付的代价——梦想总是有代价的。然而，它并不是无望的。设定目标，制定计划，朝着梦想去努力，这是很美好的事情。享受这个过程。当你实现了梦想已久的事情后，你会发现，虽然你很欣赏你的成果，但是让你微笑的却是追求梦想过程中的点点滴滴。</code></p>
<h1 id="7-Do-Your-Best-Work-Don’t-Worry-About-Money"><a href="#7-Do-Your-Best-Work-Don’t-Worry-About-Money" class="headerlink" title="7. Do Your Best Work. Don’t Worry About Money"></a>7. Do Your Best Work. Don’t Worry About Money</h1><p><strong>尽你最大的努力，不要担心钱的问题。</strong></p>
<p>“Do a good job. You don’t have to worry about the money; it will take care of itself. Just do your best work—then try to trump it.” - Walt Disney<br><code>“好好做。不要去担心钱的问题；它会自然而然地得到解决的。只是尽你最大的努力——然后试着超越它。”</code>——华特·迪士尼<br><em>You’re poor. You can’t afford to take time off to get another degree so you can get a better job. The answer is to do the best you can, right where you are, and cling onto your dream. Life will give you what you want, when you least expect it: do your best work, every day. Results will come.</em><br><code>你很拮据。你没法抽出时间进一步深造来去找一份更好的工作。答案是去尽你最大的努力，在当下，坚持自己的梦想。生活会在你意想不到的时候给予你想要的：每天都尽你最大的努力，有付出就有结果。</code></p>
<h1 id="8-Don’t-Quit"><a href="#8-Don’t-Quit" class="headerlink" title="8. Don’t Quit"></a>8. Don’t Quit</h1><p><strong>不要放弃</strong></p>
<p>“The difference in winning and losing is most often… not quitting.”- Walt Disney<br><code>“赢和输的区别在于，大部分的时候….不要放弃。”</code>——华特·迪士尼<br><em>You can’t succeed at anything without failing, and failing a lot. Failure is the way we learn. Here’s what Thomas Edison said: “The three great essentials to achieve anything worthwhile are, first, hard work; second, stick-to-itiveness; third, common sense.” Everyone fails his way to success. Look on your failures as speed bumps in your success journey, and keep going. Don’t quit.</em><br><code>如果不经历失败，不经历很多次的失败，你是无法成功的。失败是我们学习的方式。爱迪生曾说过：“要想完成任何有意义的事情，都需要三个必要条件：第一是艰苦的努力；第二是坚持；第三是常识。” 每个人都是通过失败走向成功的。把你的失败看成是通往成功路上的减速带，继续前进，不要放弃。</code></p>
<h1 id="9-Be-Grateful"><a href="#9-Be-Grateful" class="headerlink" title="9. Be Grateful"></a>9. Be Grateful</h1><p><strong>心怀感激</strong></p>
<p>“The more you are in a state of gratitude, the more you will attract things to be grateful for.”- Walt Disney<br><code>“你越经常心怀感激之情，就越会有更多值得你感恩的事情发生在你身上。”</code>——华特·迪士尼<br>What are you grateful for? We all have endless reasons to be grateful. What do you take for granted? Chances are that you’re blasé about your health, your comfortable home, your loving family, and about your job. Even if you have none of those things, you can be grateful for being alive. Studies have shown that gratitude improves your health, your relationships, and makes you happier.<br><code>你因为什么事情感恩？我们都因为各种原因而心怀感激之情。你把什么东西视为理所当然？很有可能你对自己的健康状况、舒适的家、充满爱的家庭和你的工作已无动于衷了。即使是这些你都没有，你也可以因为活着而感恩。研究表明，感恩能改善你的健康状况、你的恋爱关系，可以让你更加幸福。</code></p>
<h1 id="10-Do-Your-Best"><a href="#10-Do-Your-Best" class="headerlink" title="10. Do Your Best"></a>10. Do Your Best</h1><p><strong>全力以赴</strong></p>
<p>“Why worry? If you’ve done the very best you can, worrying won’t make it better.”- Walt Disney“<br><code>为什么要担心？如果你尽力了，担心不会让事情变得更好。“</code>-—华特·迪士尼<br><em>Worry is anticipation; worry can help you to improve and do your best. However, once something is done, distract yourself from concern about the results. If you’ve gone through three interviews for a job, there’s nothing else you can do. Worrying about whether you get the job is pointless at that stage. Only worry when it serves a useful purpose.</em><br><code>担心就是期望；担心能帮你提高水平并让你尽力而为。然而一旦做了某件事后，不要让自己分心去担心结果。如果你找一份工作时通过三次面试，那能做的你都做了。这时担心自己是否能得到这份工作是毫无意义的。只有在担心有益的情况下才担心。</code></p>
<hr>

<p>So, there you have ten Walt Disney lessons. Apply them to your life. They’ll help you to make your dreams come true.<br>这就是华特·迪士尼的10堂课。把它们用在生活中。它们能帮助你，让你的梦想成真。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Walt Disney was a showman. According to Time, he “received more Academy Awards and nominations than any other person in history.” The Disneyland theme parks are truly magical kingdoms, for adults, as well as for children.&lt;/em&gt;&lt;br&gt;华特·迪士尼是位表演者。据《时代》报道，他“收到的奥斯卡奖项和提名是史上最多的。” 迪士尼主题公园对成年人来说都是魔幻王国，更别提孩子们了。&lt;br&gt;&lt;em&gt;Here are some Walt Disney lessons in making your dreams come true, courtesy of the master of imagination, dreaming, and achievement himself.&lt;/em&gt;&lt;br&gt;下面的这些华特·迪士尼的人生课能让你的梦想成真，让你成为想象力和梦想的大师，并有所成就。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="梦想" scheme="http://cuiqingwei.github.io/tags/%E6%A2%A6%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>MySQL命令</title>
    <link href="http://cuiqingwei.github.io/2019/12/19/2019-12-19-MySQL%E5%91%BD%E4%BB%A4/"/>
    <id>http://cuiqingwei.github.io/2019/12/19/2019-12-19-MySQL命令/</id>
    <published>2019-12-19T02:54:00.000Z</published>
    <updated>2019-12-19T11:30:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="库外操作"><a href="#库外操作" class="headerlink" title="库外操作"></a>库外操作</h2><ul>
<li>导出整个数据库</li>
</ul>
<blockquote>
<p> mysqldump -u 用户名 -p –default-character-set=latin1 数据库名 &gt; 导出的文件名(数据库默认编码是latin1)</p>
</blockquote>
<p><code>mysqldump -u root -p dbname &gt; dbname.sql；</code></p>
<ul>
<li>导出一个表</li>
</ul>
<blockquote>
<p> mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名</p>
</blockquote>
<p><code>mysqldump -u root -p dbname tablename&gt; dbname_tablename.sql；</code></p>
<a id="more"></a>
<ul>
<li>导出一个数据库结构</li>
</ul>
<p><code>mysqldump -u root -p -d –add-drop-table dbname &gt;d:name_db.sql；</code></p>
<p>-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table</p>
<ul>
<li>导入数据库</li>
</ul>
<ol>
<li><p>常用source 命令</p>
<p>进入mysql数据库控制台，</p>
<p>如<code>mysql -u root -p；</code></p>
<p>mysql&gt;use 数据库</p>
<p>然后使用source命令，后面参数为脚本文件(如这里用到的.sql)</p>
<p><code>mysql&gt;source dbname.sql；</code></p>
</li>
<li><p>使用mysqldump命令</p>
<p><code>mysqldump -u username -p dbname &lt; dbnam.sql；</code></p>
</li>
<li><p>使用mysql命令</p>
<p><code>mysql -u username -p -D dbname &lt; dename.sql；</code></p>
</li>
</ol>
<ul>
<li>启动与退出</li>
</ul>
<ol>
<li>进入MySQL：启动MySQL Command Line Client（MySQL的DOS界面），直接输入安装时的密码即可。此时的提示符是：<code>mysql&gt;</code></li>
<li>退出MySQL：<code>quit；</code>或<code>exit；</code></li>
</ol>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><ul>
<li>创建数据库</li>
</ul>
<p>mysql&gt; <code>create database dbname;</code></p>
<ul>
<li>显示所有的数据库</li>
</ul>
<p>mysql&gt; <code>show databases;</code></p>
<ul>
<li>删除数据库</li>
</ul>
<p>mysql&gt; <code>drop database dbname;</code></p>
<ul>
<li>连接数据库</li>
</ul>
<p>mysql&gt; <code>use dbname;</code></p>
<ul>
<li>查看当前使用的数据库</li>
</ul>
<p>mysql&gt; <code>select database();</code></p>
<ul>
<li>当前数据库包含的表信息：</li>
</ul>
<p>mysql&gt; <code>show tables;</code></p>
<h2 id="表单操作"><a href="#表单操作" class="headerlink" title="表单操作"></a>表单操作</h2><ul>
<li>建表</li>
</ul>
<blockquote>
<p>命令：create table &lt;表名&gt; ( &lt;字段名&gt; &lt;类型&gt; [,..&lt;字段名n&gt; &lt;类型n&gt;]);</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt;create table MyClass(</div><div class="line"></div><div class="line">&gt;id int(4) not null primary key auto_increment,</div><div class="line"></div><div class="line">&gt;name char(20) not null,</div><div class="line"></div><div class="line">&gt;sex int(4) not null default ’′,</div><div class="line"></div><div class="line">&gt;degree double(16,2));</div></pre></td></tr></table></figure>
<ul>
<li>获取表结构</li>
</ul>
<blockquote>
<p>命令：desc 表名，或者show columns from 表名</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysql&gt;DESCRIBE MyClass</div><div class="line"></div><div class="line">mysql&gt; desc MyClass;</div><div class="line"></div><div class="line">mysql&gt; show columns from MyClass;</div></pre></td></tr></table></figure>
<ul>
<li>删除表</li>
</ul>
<blockquote>
<p>命令：drop table &lt;表名&gt;</p>
</blockquote>
<p><code>mysql&gt; drop table MyClass;</code></p>
<ul>
<li>插入数据</li>
</ul>
<blockquote>
<p>命令：insert into &lt;表名&gt; [( &lt;字段名&gt;[,..&lt;字段名n &gt; ])] values ( 值 )[, ( 值n )]</p>
</blockquote>
<p>例如，往表 MyClass中插入二条记录, 这二条记录表示：编号为的名为Tom的成绩为.45, 编号为 的名为Joan 的成绩为.99，编号为 的名为Wang 的成绩为.5.</p>
<p><code>mysql&gt; insert into MyClass values(1,’Tom’,96.45),(2,’Joan’,82.99), (2,’Wang’, 96.59);</code></p>
<ul>
<li>查询表中的数据</li>
</ul>
<ol>
<li>查询所有行</li>
</ol>
<blockquote>
<p>命令：select &lt;字段，字段，…&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;</p>
</blockquote>
<p>例如：查看表 MyClass 中所有数据</p>
<p><code>mysql&gt; select * from MyClass;</code></p>
<ol>
<li>查询前几行数据</li>
</ol>
<blockquote>
<p>例如：查看表 MyClass 中前行数据</p>
</blockquote>
<p><code>mysql&gt; select * from MyClass order by id limit 0,2;</code></p>
<p>或者：</p>
<p><code>mysql&gt; select * from MyClass limit 0,2;</code></p>
<ul>
<li>删除表中数据</li>
</ul>
<blockquote>
<p>命令：delete from 表名 where 表达式</p>
</blockquote>
<p>例如：删除表 MyClass中编号为 的记录</p>
<p><code>mysql&gt; delete from MyClass where id=1;</code></p>
<ul>
<li>修改表中数据</li>
</ul>
<blockquote>
<p>命令：update 表名 set 字段=新值,…where 条件</p>
</blockquote>
<p><code>mysql&gt; update MyClass set name=’Mary’where id=1;</code></p>
<ul>
<li>在表中增加字段：</li>
</ul>
<blockquote>
<p>命令：alter table 表名 add字段 类型 其他;</p>
</blockquote>
<p>例如：在表MyClass中添加了一个字段passtest，类型为int(4)，默认值为</p>
<p><code>mysql&gt; alter table MyClass add passtest int(4) default ’′</code></p>
<ul>
<li>更改表名：</li>
</ul>
<blockquote>
<p>命令：rename table 原表名 to 新表名;</p>
</blockquote>
<p>例如：在表MyClass名字更改为YouClass</p>
<p><code>mysql&gt; rename table MyClass to YouClass;</code></p>
<ul>
<li>更新字段内容</li>
</ul>
<blockquote>
<p>update 表名 set 字段名 = 新内容<br>update 表名 set 字段名 = replace(字段名,’旧内容’,’新内容’)</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;库外操作&quot;&gt;&lt;a href=&quot;#库外操作&quot; class=&quot;headerlink&quot; title=&quot;库外操作&quot;&gt;&lt;/a&gt;库外操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;导出整个数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt; mysqldump -u 用户名 -p –default-character-set=latin1 数据库名 &amp;gt; 导出的文件名(数据库默认编码是latin1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;mysqldump -u root -p dbname &amp;gt; dbname.sql；&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导出一个表&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt; mysqldump -u 用户名 -p 数据库名 表名&amp;gt; 导出的文件名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;mysqldump -u root -p dbname tablename&amp;gt; dbname_tablename.sql；&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="备忘" scheme="http://cuiqingwei.github.io/tags/%E5%A4%87%E5%BF%98/"/>
    
      <category term="MySQL" scheme="http://cuiqingwei.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Typora使用说明</title>
    <link href="http://cuiqingwei.github.io/2019/12/15/2019-12-15-Typora%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://cuiqingwei.github.io/2019/12/15/2019-12-15-Typora使用说明/</id>
    <published>2019-12-15T10:26:00.000Z</published>
    <updated>2019-12-16T07:19:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p>写Markdown文档很难？Typora让你像写word一样行云流水，所见即所得。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>Typora删除了预览窗口，以及所有其他不必要的干扰。取而代之的是实时预览。</li>
<li>Markdown的语法因不同的解析器或编辑器而异，Typora使用的是<a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/" target="_blank" rel="external">GitHub Flavored Markdown</a>。</li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Typora<a href="https://www.typora.io/#download" target="_blank" rel="external">下载</a>。</p>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul>
<li>加粗： <code>Ctrl/Cmd + B</code></li>
<li>标题： <code>Ctrl/Cmd + H</code></li>
<li>插入链接： <code>Ctrl/Cmd + K</code></li>
<li>插入代码： <code>Ctrl/Cmd + Shift + C</code></li>
<li>行内代码： <code>Ctrl/Cmd + Shift + K</code></li>
<li>插入图片： <code>Ctrl/Cmd + Shift + I</code></li>
<li>无序列表： <code>Ctrl/Cmd + Shift + L</code></li>
<li>撤销： <code>Ctrl/Cmd + Z</code></li>
<li>一级标题：快捷键为Crtl + 1，以此类推</li>
</ul>
<a id="more"></a>
<h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><h4 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h4><p>在markdown中，段落由多个<strong>空格</strong>分隔。在Typora中，只需<strong>回车</strong>即可创建新段落。</p>
<h4 id="标题级别"><a href="#标题级别" class="headerlink" title="标题级别"></a>标题级别</h4><blockquote>
<p># 一级标题， 快捷键为<code>Crtl + 1</code><br>## 二级标题，快捷键为<code>Crtl + 2</code><br>###### 六级标题，快捷键为<code>Crtl + 6</code></p>
</blockquote>
<h4 id="引用文字"><a href="#引用文字" class="headerlink" title="引用文字"></a>引用文字</h4><blockquote>
<p>> + 空格 + 引用文字</p>
</blockquote>
<h4 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h4><p>输入 -列表内容 将创建一个无序列表，该-符号可以替换为+或*。</p>
<p>输入1. 列表内容 将创建一个有序列表，其markdown源代码如下：</p>
<blockquote>
<p>无序列表<br>- AA<br>- BB<br>- CC</p>
<p>有序列表</p>
<ol>
<li>AA</li>
<li>BB</li>
<li>CC</li>
</ol>
</blockquote>
<p>无序列表</p>
<ul>
<li>AA</li>
<li>BB</li>
<li>CC</li>
</ul>
<p>有序列表</p>
<ol>
<li>AA</li>
<li>BB</li>
<li>CC</li>
</ol>
<h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><blockquote>
<p>- [ ] 不勾选<br>- [x] 勾选</p>
</blockquote>
<ul>
<li>[x] 勾选</li>
<li>[ ] 不勾选</li>
</ul>
<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>在Typora中输入``` + <code>回车</code>，并在后面选择一个语言名称即可语法高亮。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">helloWorld</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">print</span> <span class="string">'hello, world'</span></div></pre></td></tr></table></figure>
<h4 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h4><p>输入$$, 然后按<code>回车</code>键，如下：</p>
<blockquote>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 = \begin&#123;vmatrix&#125;</div><div class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125;</div><div class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0</div><div class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0</div><div class="line">\end&#123;vmatrix&#125;</div><div class="line">$$</div></pre></td></tr></table></figure>
</blockquote>
<p>效果如下：<br>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k}<br>\frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0<br>\frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0<br>\end{vmatrix}<br>$$</p>
<h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><p>输入<code>| 表头1 | 表头2 |</code>并回车。即可将创建一个包含两列的表，然后就像操作Word文档一样设置表格即可，没必要知道Markdown的复杂语法，因为这些语法会由Typora自动生成。效果如下：</p>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>111111</td>
<td>222222</td>
</tr>
</tbody>
</table>
<h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><blockquote>
<p>你可以创建一个脚注，像这样[^注释]</p>
<p>[^注释]:这就是注释的具体描述</p>
</blockquote>
<p>你可以创建一个脚注，像这样<a href="这就是注释的具体描述">^注释</a>.</p>
<p>[^注意]：该例子脚注标识是1，脚注标识可以为字母数字下划线，但是暂不支持中文。脚注内容可为任意字符，包括中文。</p>
<h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>输入<code>***</code>或<code>---</code> 再按回车即可绘制一条水平线，如下：</p>
<hr>
<h4 id="YAML-Front-Matter"><a href="#YAML-Front-Matter" class="headerlink" title="YAML Front Matter"></a>YAML Front Matter</h4><p>Typora支持<a href="http://jekyllrb.com/docs/frontmatter/" target="_blank" rel="external">YAML Front Matter</a>， 在文章开头输入<code>---</code>，然后按回车即可。</p>
<h4 id="目录（TOC）"><a href="#目录（TOC）" class="headerlink" title="目录（TOC）"></a>目录（TOC）</h4><p>输入<code>[toc]</code>然后回车，即可创建一个“目录”。TOC从文档中提取所有标题，其内容将自动更新。</p>
<h3 id="跨度元素"><a href="#跨度元素" class="headerlink" title="跨度元素"></a>跨度元素</h3><p>跨度元素即图片，网址，视频等，在Typora中输入后，会立即载入并呈现。</p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h5><blockquote>
<p>这是一个带有标题属性的[链接](<a href="http://example.com/" target="_blank" rel="external">http://example.com/</a> “标题”).<br>这是一个没有标题属性的[链接](<a href="http://example.net/" target="_blank" rel="external">http://example.net/</a>).</p>
</blockquote>
<p>效果如下：</p>
<p>这是一个带有标题属性的<a href="http://example.com/&quot;标题&quot;" target="_blank" rel="external">链接</a>.<br>这是一个没有标题属性的<a href="http://example.net/" target="_blank" rel="external">链接</a>.</p>
<h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><blockquote>
<p>这是一个[参考链接]<a href="http://example.com/" target="_blank" rel="external">id</a>。<br>[id]: <a href="http://example.com/" target="_blank" rel="external">http://example.com/</a> “标题”</p>
</blockquote>
<p>这是一个<a href="http://example.com/" target="_blank" rel="external">参考链接</a>。</p>
<h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><p>Typora允许用&lt;括号括起来&gt;, 把URL作为链接插入。输 &lt; <a href="https://cuiqingwei.github.io">https://cuiqingwei.github.io</a> &gt; 即 <a href="https://cuiqingwei.github.io">https://cuiqingwei.github.io</a>。<br>Typora还会自动链接标准网址。例如：<a href="https://cuiqingwei.github.io/">cuiqingwei.github.io</a></p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><blockquote>
<p><code>![ avatar](http://XXX..png)</code></p>
</blockquote>
<p>还可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。</p>
<h4 id="倾斜"><a href="#倾斜" class="headerlink" title="倾斜"></a>倾斜</h4><blockquote>
<p><em>单个星号 </em><br><em>单下划线 </em></p>
</blockquote>
<p>效果如下：<br><em>单个星号</em></p>
<p><em>单下划线</em></p>
<h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><blockquote>
<p><strong> 两个星号 </strong><br><strong> 双下划线 </strong></p>
</blockquote>
<p>效果如下：<br><strong>两个星号</strong><br><strong>双下划线</strong></p>
<h4 id="代码标记"><a href="#代码标记" class="headerlink" title="代码标记"></a>代码标记</h4><p>标记代码使用反引号，即在英文输入法下，<code>ESC</code>键下面和<code>1</code>键左边的符号<strong>`</strong></p>
<p>使用该`printf()`功能。<br>效果如下：<br>使用该<code>printf()</code>功能。</p>
<h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><blockquote>
<p>~~ 删除线 ~~</p>
</blockquote>
<p>效果如下：</p>
<p><del>删除线</del></p>
<h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>\<u>下划线\</u></p>
<p>效果如下：</p>
<p><u>下划线</u></p>
<h4 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h4><blockquote>
<p>：smile ：（注意为：是英文的冒号）</p>
</blockquote>
<p>😄</p>
<h4 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h4><p>H~2~O</p>
<h4 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h4><p>X\^2\^</p>
<h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><p>\==高亮==</p>
<blockquote>
<p>上标、下标、高亮默认不使能，需在设置中打开。</p>
</blockquote>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>支持HTML</p>
<h4 id="嵌入内容"><a href="#嵌入内容" class="headerlink" title="嵌入内容"></a>嵌入内容</h4><p>支持iframe-based嵌入代码，</p>
<blockquote>
<p>&lt; iframe height=’265’ scrolling=’no’ title=’Fancy Animated SVG Menu’ src=’<a href="http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2&#39;" target="_blank" rel="external">http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2’</a> frameborder=’no’ allowtransparency=’true’ allowfullscreen=’true’ style=’width: 100%;’&gt;</p>
</blockquote>
<h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><blockquote>
<p>&lt; video src=”<a href="https://typora.io/img/beta.mp4”" target="_blank" rel="external">https://typora.io/img/beta.mp4”</a> /&gt;</p>
</blockquote>
<hr>
<p><strong>总结：</strong></p>
<ol>
<li>建议打开大纲视图（快捷键<code>Ctrl/Cmd + Shift + 1</code>）。</li>
<li>插入表格需要顶格写，不然显示不出来。</li>
<li>以上语法不用刻意记，在Typora中的菜单都有， 常用功能基本上都有快捷键。</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Typora&quot;&gt;&lt;a href=&quot;#Typora&quot; class=&quot;headerlink&quot; title=&quot;Typora&quot;&gt;&lt;/a&gt;Typora&lt;/h3&gt;&lt;p&gt;写Markdown文档很难？Typora让你像写word一样行云流水，所见即所得。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Typora删除了预览窗口，以及所有其他不必要的干扰。取而代之的是实时预览。&lt;/li&gt;
&lt;li&gt;Markdown的语法因不同的解析器或编辑器而异，Typora使用的是&lt;a href=&quot;https://help.github.com/articles/basic-writing-and-formatting-syntax/&quot;&gt;GitHub Flavored Markdown&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;p&gt;Typora&lt;a href=&quot;https://www.typora.io/#download&quot;&gt;下载&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;常用快捷键&quot;&gt;&lt;a href=&quot;#常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;常用快捷键&quot;&gt;&lt;/a&gt;常用快捷键&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;加粗： &lt;code&gt;Ctrl/Cmd + B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;标题： &lt;code&gt;Ctrl/Cmd + H&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;插入链接： &lt;code&gt;Ctrl/Cmd + K&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;插入代码： &lt;code&gt;Ctrl/Cmd + Shift + C&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;行内代码： &lt;code&gt;Ctrl/Cmd + Shift + K&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;插入图片： &lt;code&gt;Ctrl/Cmd + Shift + I&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;无序列表： &lt;code&gt;Ctrl/Cmd + Shift + L&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;撤销： &lt;code&gt;Ctrl/Cmd + Z&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一级标题：快捷键为Crtl + 1，以此类推&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="http://cuiqingwei.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS X 下搭建nRF51822开发环境</title>
    <link href="http://cuiqingwei.github.io/2019/12/06/2019-12-06-Mac-OS-X-%E4%B8%8B%E6%90%AD%E5%BB%BAnRF51822%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://cuiqingwei.github.io/2019/12/06/2019-12-06-Mac-OS-X-下搭建nRF51822开发环境/</id>
    <published>2019-12-06T01:12:08.000Z</published>
    <updated>2019-12-16T04:48:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Step1</em> 下载SDK<br>下载地址：<a href="http://developer.nordicsemi.com/" target="_blank" rel="external">http://developer.nordicsemi.com/</a><br>当前最高版本是 <a href="http://developer.nordicsemi.com/nRF5_SDK/nRF51_SDK_v10.x.x/nRF51_SDK_10.0.0_dc26b5e.zip" target="_blank" rel="external">V10</a><br>解压zip包到某个项目目录</p>
<p><em>Step2</em> 下载交叉编译工具<br>即 <code>gcc-arm-none-eabi-9-2019-q4-major-mac.tar.bz2</code><br>下载地址 <a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads" target="_blank" rel="external">https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads</a></p>
<p>我解压到了 <code>/usr/local/gcc-arm-none-eabi-9-2019-q4-major</code></p>
<a id="more"></a>
<p><em>Step3</em> 下载安装Nordic官方nrfjprog<br>下载地址 <a href="https://www.nordicsemi.com/Software-and-tools/Development-Tools/nRF-Command-Line-Tools/Download" target="_blank" rel="external">https://www.nordicsemi.com/Software-and-tools/Development-Tools/nRF-Command-Line-Tools/Download</a><br>下载的是 <code>nRF-Command-Line-Tools_10_5_0_OSX.tar</code></p>
<p><em>Step4</em> 配置编译工具路径<br>打开 <code>/..../nRF51_SDK_10.0.0_dc26b5e/components/toolchain/gcc/Makefile.posix</code><br>改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GNU_INSTALL_ROOT := /usr/local/gcc-arm-none-eabi-9-2019-q4-major</div><div class="line">GNU_VERSION := 9.2.1</div><div class="line">GNU_PREFIX := arm-none-eabi</div></pre></td></tr></table></figure>
<p><em>编译例程代码</em><br>进入demo目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">...../nRF51_SDK_10.0.0_dc26b5e/examples/ble_peripheral/ble_app_template/pca10028/s110/armgcc</div><div class="line">make</div></pre></td></tr></table></figure>
<p><em>烧录</em></p>
<p>清空数据<br><code>nrfjprog --eraseall</code></p>
<p>烧录hex文件<br><code>nrfjprog --program /path-to-hex-file.hex</code><br>出现以下表示烧录成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Parsing hex file.</div><div class="line">Reading flash area to program to guarantee it is erased.</div><div class="line">Checking that the area to write is not protected.</div><div class="line">Programing device.</div></pre></td></tr></table></figure>
<p>也可以使用Makefile中提供的方法</p>
<p>#烧录 softdevice<br><code>make flash_softdevice</code></p>
<p>#烧录application<br><code>make flash</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Step1&lt;/em&gt; 下载SDK&lt;br&gt;下载地址：&lt;a href=&quot;http://developer.nordicsemi.com/&quot;&gt;http://developer.nordicsemi.com/&lt;/a&gt;&lt;br&gt;当前最高版本是 &lt;a href=&quot;http://developer.nordicsemi.com/nRF5_SDK/nRF51_SDK_v10.x.x/nRF51_SDK_10.0.0_dc26b5e.zip&quot;&gt;V10&lt;/a&gt;&lt;br&gt;解压zip包到某个项目目录&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Step2&lt;/em&gt; 下载交叉编译工具&lt;br&gt;即 &lt;code&gt;gcc-arm-none-eabi-9-2019-q4-major-mac.tar.bz2&lt;/code&gt;&lt;br&gt;下载地址 &lt;a href=&quot;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads&quot;&gt;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我解压到了 &lt;code&gt;/usr/local/gcc-arm-none-eabi-9-2019-q4-major&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="nRF51822" scheme="http://cuiqingwei.github.io/tags/nRF51822/"/>
    
  </entry>
  
  <entry>
    <title>有关路亚起源的故事</title>
    <link href="http://cuiqingwei.github.io/2019/12/03/2019-12-03-%E6%9C%89%E5%85%B3%E8%B7%AF%E4%BA%9A%E8%B5%B7%E6%BA%90%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://cuiqingwei.github.io/2019/12/03/2019-12-03-有关路亚起源的故事/</id>
    <published>2019-12-03T01:12:08.000Z</published>
    <updated>2019-12-03T01:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>近年来一种新的垂钓方法（路亚）开始在国内风靡，很受新生代垂钓爱好者的推崇，涌现出众多喜爱此钓法的路亚一族。 </p>
<p>路亚，一词属舶来词，由英文（lure）的近音译成，意思是引诱、诱惑。路亚钓鱼就是引诱鱼，诱惑鱼上钩。又有称其为（拟饵钓法），顾名思义是通过人为操控假饵摆动,利用不同形状的假饵在水中做出不同姿态，从而诱惑鱼类攻击，将其俘获。</p>
<a id="more"></a>
<p>关于路亚钓法的起源，有很多版本的传说。有人说路亚起源于美国，19世纪初，美国钓鱼人豪顿氏在河边手里拿着一小块木片一边摆弄一边与朋友闲聊，一不小心，木片掉进河中，一条不知名的鱼立刻窜出叼走了木片。这个偶然的小事，触发了豪顿氏的灵感，此后他发明世界上的第一个路亚(拟饵)。也有人说，是当初有人在野餐时不慎汤匙落入水中，竟遭鱼只咬衔走而辗转发明而得，是否如此？以无从考证。且不管路亚钓法是谁发明的，它都是人类智慧的结晶！！！ </p>
<p><img src="/img/20191203/rapala1.jpeg" alt=""></p>
<p>下面我们介绍一下著名路亚钓具品牌路亚(lure)起源创始人传奇的一生，五年前有国内人士因缘际会到芬兰，在拜会世界知名拟饵制造厂「Rapala」时，有幸得知关于鱼形拟饵最初被发现、发明以及后续拓展的整个故事，今天在此重新描述，以纪念伟大的路亚拟饵之父「Rapala」。并使广大的路亚垂钓爱好者得以了解路亚的发展历程.</p>
<p><img src="/img/20191203/rapala2.jpeg" alt=""></p>
<p>厂牌名Rapala其实上就是故事中主角的名字,然而究竟他的姓是什么,连他自己都不知道，生于1907年的他是一名私生子，五岁前，他只知道Lauri是别人对他称呼，至于后来的Rapala则是五岁那年一位来到他出生的小镇的传教士给他取的，这个字以芬兰话的来说是「泥泞」的意思（也许当年他被见到时，常是身上泥泞满身之故）。<br>Rapala可以算是位渔夫，早年的他十分穷苦，七个孩子和妻子Elma就生活在十三尺见方大小的木屋，他必须经年的在距离赫尔新基北方二小时车程的湖泊Vaaksy里辛苦垂钓以维持生计。他整日滑着木船，借着近百个钩着活饵的钩组等待鱼只上钩，有时候两天渔获可达六百磅的鳟鱼,有时候则一无所获。在苦等鱼上钩时，他很自然的花上无数小时的时间,观察属于水里世界生存的竞争定律。他发现在湖中一种叫鲦鱼(minnow)的小鱼常常成为掠夺性强的鱼如鳟鱼，梭鱼的食物。而这种掠食行为并非没有一定的行为模式,而是会挑上层小鱼群中特别的几只。原来,属于孱弱的鱼体，它们的游姿常和其它鱼不同，也因此成为被攻击的对象鱼。在长久仔细的观察下，Rapala居然可以预测一群鱼中究竟谁将是下一个倒霉鬼。</p>
<p><img src="/img/20191203/rapala3.jpeg" alt=""></p>
<p>在夏天里的一次划船捉鱼过程中，何不试着使用拟饵的念头突然闪现，当他接近可能的鱼获区时，他试着以鱼线钩着活饵抛向不远的水域在慢慢收线，就这样不断的重复动作中，它突发奇想的想到何不利用较轻的物质来取代那只看似受了伤的鱼饵，于是拟饵的观念就此诞生，全世界第一只Rapala假鱼饵终于产生，那时他使用剥了皮的松树木雕刻成鱼体，再用锡箔纸包裹，以胶水牢牢黏合，为了使它更像鲦鱼，他在模形鱼上描绘出了鱼鳞纹。在实验过程中，他兴奋的发现一切都如他预期的，这样的鱼饵也会成为掠食鱼攻击的对象，这种无需在中鱼后不断换饵的好处让他满意极了，后来他以厄瓜多尔的进口木取代松木，使得拟饵的重量和泳形得到相当好的改良，就这样全世界第一只手工路亚拟饵就这样在1936年被Rapala发明出来。</p>
<p><img src="/img/20191203/rapala4.jpeg" alt=""></p>
<p>拟饵的成功和好用性令人十分惊奇，远超过Rapala的预期，消息很快的在地方流传着，他本人也毫不保留的将更新的杰作与同好钓鱼的邻居分享，这个绝好的消息很快的在钓鱼界里流传着。也因此可以开始接受一些少量的订单开始销售了。可惜的是，1939年由于苏俄入侵芬兰，Rapala加入陆军服役，一直到五年后，他才回到小木屋和五个男孩、两个女儿与妻子身边，再度过着艰苦的日子。随着和平的来到，人们追求休闲生活的欲望跟着提高，钓鱼活动也逐渐普遍起来，特别是北美洲一带，这时候 Rapala 开始利用更多的时间制造路亚拟饵。1950年中的时候，Rapala首次到了美国本土，在佛罗里达州和加拿大边境界的几个属于有掠夺性鱼种的钓域中，将自制的拟饵送给了当地芬兰裔的友人，而在明尼苏达州北部地区，有着深厚芬兰情节的异乡人开始将 Rapala 的名字视为一种荣誉，将属于自己国人研发的新式钓鱼武器完全的、自豪的介绍给美国人，也因为 Rapala 的拟饵真的能在美国本土钓获起包括鳟鱼、梭鱼、甚至于鲈鱼，而且鱼体都很大，因此他的名声很快就传遍开来。</p>
<p><img src="/img/20191203/rapala5.jpeg" alt=""></p>
<p>一位在明尼苏达州的钓具商的年轻人Ron Weboer听到了这些近于神奇的传闻后，认真的搜集相关信息并且预料这项产品的市场将潜力无穷，在1959年连同好友Ray Ostorm写了封信给Rapala，表明了希望在美国北地经销他的产品的心愿。就这样，Rapala开始了海外销售的业务，结果一时间他在Vaaksy家乡附近的家家户户的客厅都成了他的代工处所。由于美国当地的市场反应相当好，两位年轻人一直希望能签下合约，这个心愿在1962年的7月得以兑现，从此拟饵市场从原先的北部到了美国各地。这项奇特的产品也吸引了生活杂志（LIFE）的注意，以一篇「鱼儿无法抗拒的拟饵」（The lure fish can’t resist）文章报导了整个的事情发展过程，结果当期的发行量竟然打破了纪录，一夕间整个美国地区都知道了关于 Rapala 的拟饵的特效，也因此订单得以快速增加，销售量从早期的十万支跳跃到1964年八十万只的亮丽成绩，不多时，就到了一百万只的业绩。</p>
<p><img src="/img/20191203/rapala6.jpeg" alt=""></p>
<p>经过了半世纪的努力和穷困的日子，Rapala一夕成功致富，虽然他成了地方的传奇人物，也搬进了较大的房子，但是淡泊名利的他依然过着简单朴素生活，当时包括芬兰总统和大英帝国的菲利浦王子都曾拜访过他，但是内向的他总是默默的面对好奇、慕名前来的民众。目前掌管Rapala事业的长子Risto回忆说：「父亲不是很喜欢旅行，常是偶尔才到美国走走和到明尼苏达州的一处森林湖泊处钓鱼。」，Rapala的另一位孩子现为杂志总编的Enzio则表示：“父亲常常不带或很少的现金出门，他常是叫司机先到银行领钱再回家。”</p>
<p><img src="/img/20191203/rapala7.jpeg" alt=""></p>
<p>1965年那年，孩子中较年幼的Kauko，在 Rapala 常去试钓拟饵的一个湖泊钓鱼，竟因为翻船而遭溺毙。这位年仅二十六岁的小孩尸体在一个礼拜后才被发现，讽刺的是，钩陷在裤子端的竟是Rapala做的拟饵。这个悲剧深深的打击了 Rapala，长子Risto回忆说：「自此他就不像以前的他，他无法理解为何他最喜欢的水域世界竟是夺去他最喜爱的孩子生命的地方。」从此Rapala整日沉浸于酗酒消愁的生活中，这一喝就是往后的九个年头，至于工厂生产问题则是交给剩下的孩子处理，他则对一切不闻不问。曾经是身子强健的渔夫却因为无法忍受失去孩子的悲剧而彻底的被击垮，就在1974年的10月20日年仅六十七岁的他终于因伤心过度而过世，当时他个人财产只有美金二万七千元，其余的财产他都给了孩子们，他的遗体和溺死的孩子葬在一起。虽然他早逝了，但是Rapala的名字却是不朽的长久的在世界各地流传记忆着，他所研发的路亚至今仍然在世界不同的水域中继续诱惑着鱼儿们。</p>
<p><img src="/img/20191203/rapala8.jpeg" alt=""></p>
<p>自从路亚这项发明以来,所有后续跟进的厂家还是脱离不了 Rapala 所设计的路亚原型，Rapala 的拟饵至今有一些特定的款式还是保留原有的设计 , 在材质上还是有多款坚持使用木质，在用过 Rapala 的拟饵时不妨想想前人发明的用心 , 在多年后的今日~我们才有此项产物享受钓鱼的乐趣。。。</p>
<p><img src="/img/20191203/rapala9.jpeg" alt=""><br><img src="/img/20191203/rapala10.jpeg" alt=""><br><img src="/img/20191203/rapala11.jpeg" alt=""><br><img src="/img/20191203/rapala12.jpeg" alt=""><br><img src="/img/20191203/rapala13.jpeg" alt=""></p>
<p><img src="/img/20191203/路亚点滴.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近年来一种新的垂钓方法（路亚）开始在国内风靡，很受新生代垂钓爱好者的推崇，涌现出众多喜爱此钓法的路亚一族。 &lt;/p&gt;
&lt;p&gt;路亚，一词属舶来词，由英文（lure）的近音译成，意思是引诱、诱惑。路亚钓鱼就是引诱鱼，诱惑鱼上钩。又有称其为（拟饵钓法），顾名思义是通过人为操控假饵摆动,利用不同形状的假饵在水中做出不同姿态，从而诱惑鱼类攻击，将其俘获。&lt;/p&gt;
    
    </summary>
    
    
      <category term="路亚" scheme="http://cuiqingwei.github.io/tags/%E8%B7%AF%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>大疆“御”Mavic系列教程</title>
    <link href="http://cuiqingwei.github.io/2018/06/27/2018-06-27-%E5%A4%A7%E7%96%86%E2%80%9C%E5%BE%A1%E2%80%9DMavic%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    <id>http://cuiqingwei.github.io/2018/06/27/2018-06-27-大疆“御”Mavic系列教程/</id>
    <published>2018-06-27T01:56:08.000Z</published>
    <updated>2019-12-19T13:25:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>在操控大疆“御”Mavic前，请阅读《智能飞行电池安全使用指引》，并进行飞行前检查，确保飞行器各个部件完好无损，智能电池及遥控器电量充足，上电检测正常。<br><img src="/img/20180627/mavicpro.jpeg" alt=""></p>
<a id="more"></a>
<p>“御”是大疆首款紧凑型航拍无人机。它集超高画质、机器视觉技术和便携性于一身，助你随时随地刻捕捉精彩影像。本视频中的航拍均已征得当地管理部门同意。</p>
<embed width="440" height="365" allowscriptaccess="never" menu="false" loop="false" play="true" wmode="transparent" src="http://player.youku.com/player.php/sid/XMTc0MDQ1MzU0OA==/v.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash">

<h3 id="产品展示"><a href="#产品展示" class="headerlink" title="产品展示"></a>产品展示</h3><p>先来和我一起了解大疆全新的便携无人机“御”Mavic的各个功能按键。小巧便携，性能却毫不妥协，集成大疆先进技术，带给你清晰流畅的影像和畅快的飞行体验。</p>
<embed width="440" height="365" allowscriptaccess="never" menu="false" loop="false" play="true" wmode="transparent" src="http://player.youku.com/player.php/sid/XMTc0MDUzOTAwOA==/v.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash">


<h3 id="首次飞行"><a href="#首次飞行" class="headerlink" title="首次飞行"></a>首次飞行</h3><p>和大疆其他消费级无人机一样，“御”Mavic上手即飞，操控简单。和我们一起了解Mavic的基本操作，制作你的第一部航拍大作和朋友分享吧。</p>
<embed width="440" height="365" allowscriptaccess="never" menu="false" loop="false" play="true" wmode="transparent" src="http://player.youku.com/player.php/sid/XMTc0MjI5NzE4NA==/v.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash">

<h3 id="手机操控"><a href="#手机操控" class="headerlink" title="手机操控"></a>手机操控</h3><p>“御”Mavic支持手机直接操控。按视频指引连接手机，随时飞行，或来张帅气的无人机自拍吧。</p>
<embed width="440" height="365" allowscriptaccess="never" menu="false" loop="false" play="true" wmode="transparent" src="http://player.youku.com/player.php/sid/XMTc0MjQ5NjkyOA==/v.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash">

<h3 id="指点飞行"><a href="#指点飞行" class="headerlink" title="指点飞行"></a>指点飞行</h3><p>轻触屏幕，“御”Mavic就能飞向你指的地方，无需费心控制航向，你可以专注于相机云台，调整画面，捕捉精美素材。</p>
<embed width="440" height="365" allowscriptaccess="never" menu="false" loop="false" play="true" wmode="transparent" src="http://player.youku.com/player.php/sid/XMTc0MTQxMjgxMg==/v.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash">

<h3 id="智能跟随"><a href="#智能跟随" class="headerlink" title="智能跟随"></a>智能跟随</h3><p>“御”Mavic能通过相机锁定拍摄对象，进行多种模式的视觉智能跟随。快来按视频指引试一下，轻松捕捉高难度航拍素材。</p>
<embed width="440" height="365" allowscriptaccess="never" menu="false" loop="false" play="true" wmode="transparent" src="http://player.youku.com/player.php/sid/XMTc0MTQ1OTQwNA==/v.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash">

<h3 id="精准降落"><a href="#精准降落" class="headerlink" title="精准降落"></a>精准降落</h3><p>“御”Mavic支持一键起飞和精准降落功能。起飞时，飞行器通过视觉传感器和卫星定位记录起飞地点，自动返航时通过卫星定位坐标和图像比对精准返回起飞地点，避免降落在障碍物或水上，让返航更安全。</p>
<embed width="440" height="365" allowscriptaccess="never" menu="false" loop="false" play="true" wmode="transparent" src="http://player.youku.com/player.php/sid/XMTc0MTQyNzY4NA==/v.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash">

<h3 id="精准悬停"><a href="#精准悬停" class="headerlink" title="精准悬停"></a>精准悬停</h3><p>FlightAutonomy技术让“御”Mavic在室内外都能精准悬停，平稳飞行。你可以用它轻松穿越阳台，拍摄震撼的航拍大片。</p>
<embed width="440" height="365" allowscriptaccess="never" menu="false" loop="false" play="true" wmode="transparent" src="http://player.youku.com/player.php/sid/XMTc0MTQ2NjYyNA==/v.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash">

<h3 id="视觉校准"><a href="#视觉校准" class="headerlink" title="视觉校准"></a>视觉校准</h3><p>视觉传感器为“御”Mavic获取重要的环境信息，起到避障和定位的作用。当系统提事视觉传感器异常时，请参照本视频进行校准。</p>
<embed width="440" height="365" allowscriptaccess="never" menu="false" loop="false" play="true" wmode="transparent" src="http://player.youku.com/player.php/sid/XMTc0MjI5NTM0MA==/v.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash">

<h3 id="固件升级"><a href="#固件升级" class="headerlink" title="固件升级"></a>固件升级</h3><p>通过DJI GO app或连接PC都可为“御”Mavic进行升级。及时升级固件，获得全新功能和更好的飞行体验。</p>
<embed width="440" height="365" allowscriptaccess="never" menu="false" loop="false" play="true" wmode="transparent" src="http://player.youku.com/player.php/sid/XMTc0MjI5NjY4OA==/v.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash">

<h3 id="对频方法"><a href="#对频方法" class="headerlink" title="对频方法"></a>对频方法</h3><p>在“御”Mavic飞行器和遥控器无法连接，或更换新飞行器/遥控器时可参照本视频进行对频。</p>
<embed width="440" height="365" allowscriptaccess="never" menu="false" loop="false" play="true" wmode="transparent" src="http://player.youku.com/player.php/sid/XMTc0MjI5NjI0MA==/v.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash">

<h3 id="平行-锁定跟随与手势自拍"><a href="#平行-锁定跟随与手势自拍" class="headerlink" title="平行/锁定跟随与手势自拍"></a>平行/锁定跟随与手势自拍</h3><p>“御”Mavic在智能跟随模式下，新增了平行和锁定跟随，还可以手机直接操控进行手势自拍。智能又方便的航拍伙伴，就是Mavic！</p>
<embed width="440" height="365" allowscriptaccess="never" menu="false" loop="false" play="true" wmode="transparent" src="http://player.youku.com/player.php/sid/XMTc2NTk0NTgwNA==/v.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在操控大疆“御”Mavic前，请阅读《智能飞行电池安全使用指引》，并进行飞行前检查，确保飞行器各个部件完好无损，智能电池及遥控器电量充足，上电检测正常。&lt;br&gt;&lt;img src=&quot;/img/20180627/mavicpro.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="无人机" scheme="http://cuiqingwei.github.io/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>DJI大疆创新发布多边形禁飞区策略</title>
    <link href="http://cuiqingwei.github.io/2018/06/27/2018-06-27-DJI%E5%A4%A7%E7%96%86%E5%88%9B%E6%96%B0%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%A6%81%E9%A3%9E%E5%8C%BA%E7%AD%96%E7%95%A5/"/>
    <id>http://cuiqingwei.github.io/2018/06/27/2018-06-27-DJI大疆创新多边形禁飞区策略/</id>
    <published>2018-06-27T01:12:08.000Z</published>
    <updated>2018-06-27T01:42:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>（2017年3月2日 深圳）</strong> 全球飞行影像系统的开拓者和领导者DJI大疆创新当日发布多边形禁飞区策略。本次更新将在中国大陆机场首先生效，之后逐步在全球范围内推广。</p>
<p>为保障公共空域安全并给用户带去更好的飞行体验，大疆为其无人机产品设置了机场禁飞区和限飞区。以机场每条跑道的两端为圆心、半径为4.5公里的圆形区域，由两个圆和边缘连线组成的平椭圆为禁飞区。</p>
<p>飞行器无法在禁飞区内起飞；从外部接近禁飞区边界时，将自动减速并悬停。如果在无GPS信号状态下进入禁飞区，无人机获得GPS信号后将自动降落。</p>
<a id="more"></a>
<p><img src="/img/20180627/content_F137C4EE-EECC-FB02-30B9-A5FA3D6882F2.jpg" alt=""></p>
<p>除禁飞区外，另有30米、60米、120米限飞区，具体如下：</p>
<p><strong>30米</strong> 限飞区是以跑道两端的中点为圆心、半径7公里作圆，两个圆所组成的平椭圆区域且与禁飞区不相交的部分为限飞区，限制高度为30米。</p>
<p><strong>60米</strong> 限飞区是以跑道两端延伸15公里、扩散斜率为15%的梯形范围，与30米限飞区及禁飞区皆不相交的部分，限制高度为60米。</p>
<p><strong>120米</strong> 限飞区是以跑道正中点为圆心、半径10公里作圆，该圆形范围与禁飞区、30米限飞区及60米限飞区非相交的部分，限制高度为120米。</p>
<p>当飞行器从外部接近限飞区边界时，应用程序将弹出警告，提示飞行风险。如当前高度大于限制高度，飞行器将自动减速、悬停，须下降到低于限飞高度方可进入；如低于限飞高度，飞入限飞区后高度将受到限制；如在无GPS信号状态下进入限飞区，飞行器获得GPS信号后将自动下降至限飞高度。</p>
<p>大疆各产品线将逐步适用于此次更新的多边形禁飞区策略。</p>
<p><a href="http://haokan.baidu.com/v?pd=wisenatural&amp;vid=9573858590873636023" target="_blank" rel="external">2分钟动画解读大疆新的无人机限飞区划定规则</a><br><a href="https://www.dji.com/cn/flysafe/geo-map" target="_blank" rel="external">安全飞行指引限飞区查询</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;（2017年3月2日 深圳）&lt;/strong&gt; 全球飞行影像系统的开拓者和领导者DJI大疆创新当日发布多边形禁飞区策略。本次更新将在中国大陆机场首先生效，之后逐步在全球范围内推广。&lt;/p&gt;
&lt;p&gt;为保障公共空域安全并给用户带去更好的飞行体验，大疆为其无人机产品设置了机场禁飞区和限飞区。以机场每条跑道的两端为圆心、半径为4.5公里的圆形区域，由两个圆和边缘连线组成的平椭圆为禁飞区。&lt;/p&gt;
&lt;p&gt;飞行器无法在禁飞区内起飞；从外部接近禁飞区边界时，将自动减速并悬停。如果在无GPS信号状态下进入禁飞区，无人机获得GPS信号后将自动降落。&lt;/p&gt;
    
    </summary>
    
    
      <category term="无人机" scheme="http://cuiqingwei.github.io/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>QSDK编译</title>
    <link href="http://cuiqingwei.github.io/2018/06/20/2018-06-20-QSDK%E7%BC%96%E8%AF%91/"/>
    <id>http://cuiqingwei.github.io/2018/06/20/2018-06-20-QSDK编译/</id>
    <published>2018-06-20T07:12:08.000Z</published>
    <updated>2018-06-21T00:19:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>QSDK</strong> 是一种在openwrt的基础上，加入了高通atheros芯片相关资料的一种环境。</p>
<p>QSDK与OpenWRT的区别主要在如下几个方面：</p>
<ul>
<li>arch/mips/ath79/* – updated QCA base platform device support – GPLv2</li>
<li>sound/soc/ath79/* – new ALSA-compliant QCA soundcard driver – ISC</li>
<li>drivers/net/ethernet/atheros/ag71xx/* – updated QCA Ethernet switch driver – GPLv2</li>
<li>net/core/* – performance enhancement updates to Linux sk_buff management – GPL v2</li>
<li>drivers/spi – added modes to QCA spi driver – GPLv2</li>
<li>drivers/mtd/nand/ – new QCA NAND flash controller driver – ISC</li>
</ul>
<a id="more"></a>
<p>编译步骤如下：（基于debian服务器）</p>
<p>1、安装开发所需软件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install gcc g++ binutils patch bzip2 flex make gettext pkg-config unzip zlib1g-dev libc6-dev subversion libncurses5-dev</div><div class="line">sudo apt-get install gawk sharutils curl libxml-parser-perl ocaml-nox</div></pre></td></tr></table></figure>
<p>2、安装repo和git</p>
<p>见 <a href="http://www.cnblogs.com/rohens-hbg/p/4916452.html" target="_blank" rel="external">http://www.cnblogs.com/rohens-hbg/p/4916452.html</a></p>
<p>3、下载qsdk相关文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">repo init -u git://codeaurora.org/quic/qsdk/releases/manifest/qstak -b release -m  caf_AU_LINUX_QSDK_RELEASE_BANANA_SW_TARGET_ALL.2.7.029.xml</div><div class="line">repo sync</div><div class="line">mkdir -p qsdk/dl</div><div class="line">tar xjvf qsdk-qca-wifi-2.7.029.tar.bz2 -C qsdk</div><div class="line">tar xjvf qsdk-qca-wlan-2.7.029.tar.bz2 -C qsdk</div><div class="line">tar xjvf qsdk-qca-shortcut-fe-2.7.029.tar.bz2 -c qsdk</div></pre></td></tr></table></figure>
<p>4、编译</p>
<p>1)  cd qsdk</p>
<pre><code>make package/symlinks
</code></pre><p>2)  拷贝配置文件，目前该目录下有三个配置文件</p>
<pre><code>ar71xx_open.config
ar71xx_premium.config  ： 生成16m flash使用的bin文件
ar71xx_wireless.config ： 生成8m flash使用的bin文件
cp qca/configs/qca955x.ln/ar71xx_&lt;profile&gt;.config .config
</code></pre><p>3)  重新生成配置文件并build</p>
<pre><code>make defconfig
make V=s
</code></pre><p>4) 去目录下去.bin文件download到设备上</p>
<p>   目录路径为：qsdk\bin\ar71xx</p>
<blockquote>
<p>主要文件为：<br>   openwrt-ar71xx-generic-ap147-16M-kernel.bin  (或  openwrt-ar71xx-generic-ap147-16M-kernel.bin)<br>   openwrt-ar71xx-generic-ap147-16M-rootfs-squashfs.bin (或 openwrt-ar71xx-generic-ap147-8M-rootfs-squashfs.bin)</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;QSDK&lt;/strong&gt; 是一种在openwrt的基础上，加入了高通atheros芯片相关资料的一种环境。&lt;/p&gt;
&lt;p&gt;QSDK与OpenWRT的区别主要在如下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arch/mips/ath79/* – updated QCA base platform device support – GPLv2&lt;/li&gt;
&lt;li&gt;sound/soc/ath79/* – new ALSA-compliant QCA soundcard driver – ISC&lt;/li&gt;
&lt;li&gt;drivers/net/ethernet/atheros/ag71xx/* – updated QCA Ethernet switch driver – GPLv2&lt;/li&gt;
&lt;li&gt;net/core/* – performance enhancement updates to Linux sk_buff management – GPL v2&lt;/li&gt;
&lt;li&gt;drivers/spi – added modes to QCA spi driver – GPLv2&lt;/li&gt;
&lt;li&gt;drivers/mtd/nand/ – new QCA NAND flash controller driver – ISC&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="OpenWRT" scheme="http://cuiqingwei.github.io/tags/OpenWRT/"/>
    
  </entry>
  
  <entry>
    <title>什么是LEDE?</title>
    <link href="http://cuiqingwei.github.io/2018/06/20/2018-06-20-%E4%BB%80%E4%B9%88%E6%98%AFLEDE/"/>
    <id>http://cuiqingwei.github.io/2018/06/20/2018-06-20-什么是LEDE/</id>
    <published>2018-06-20T04:12:08.000Z</published>
    <updated>2018-06-20T07:44:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>OpenWrt</strong> 可以说是世界上最出名的家用 <strong>WiFi</strong> 路由器 <strong>Linux</strong> 发行版，是由以前名不经传的 <strong>Linksys WRT54G</strong> 路由催生的一个产品，已经 <strong>12</strong> 年多了。在2016年5月初，OpenWrt用户社区宣布了另一个 <strong>OpenWrt：Linux Embedded Development Environment (LEDE)</strong> 。官方解释说，<strong>LEDE</strong> 是 OpenWrt 的一个分支，或者说是副产品，该项目主要关注透明性，协作和分权。<br>LEDE 是 OpenWrt 社区的新生，有很多目标是与 OpenWrt 相同的，但是相比于 OpenWrt 也有很大的区别。</p>
<a id="more"></a>
<p>LEDE 当前的目标是：</p>
<ul>
<li>构建一个巨大的嵌入式 Linux 发行版，主要关注稳定性和功能</li>
<li>拥有规律，可预测的发行周期</li>
<li>建立透明的决策过程，加强社区参与和公共反馈</li>
</ul>
<p>创建 LEDE 是因为 OpenWrt 有一些长期存在的问题，一直悬而未决：</p>
<ul>
<li>核心开发者活跃度低，也没有鼓励更多新成员加入的策略</li>
<li>不可靠的基础设施，因为淡点故障和内部分歧而阻碍修复</li>
<li>缺乏沟通，透明和协作，无论是核心团队还是核心团队与社区之间</li>
<li>提交 commit 的人较少，不怎么关注测试和常规构建</li>
<li>不关注稳定性和文档</li>
</ul>
<p>为了解决这些问题，创建了 LEDE 项目，相比 OpenWrt 不同之处在于：</p>
<ul>
<li>所有沟通频道都是公开的，一些对非开发成员限制只读权限</li>
<li>决策过程是公正公开的，大约有 50/50 的开发者和权威用户有投票权</li>
<li>基础设施非常简单，降低维护工作的难度</li>
<li>基于 OpenWrt 包在 Github 收到的反馈，合并策略更自由</li>
<li>强烈关注自动化测试，简历一个简单的发布流程</li>
</ul>
<p>LEDE 项目地址：<a href="https://www.lede-project.org/" target="_blank" rel="external">https://www.lede-project.org/</a></p>
<h2 id="为何使用LEDE"><a href="#为何使用LEDE" class="headerlink" title="为何使用LEDE?"></a>为何使用LEDE?</h2><p>LEDE相比制造商的原厂固件更加出色，才使得人们更倾向于使用LEDE。LEDE工作起来更加稳定、提供更多的功能，并且更加安全，同时具有良好的技术支持。<br>可扩展性： LEDE提供了许多以往只在高端设备上才提供的各种功能。它具有3000个以上的标准化应用软件包，您可以轻松地将他们应用于各种支持的设备，包括各种陈旧的路由器。</p>
<ul>
<li>高安全性： 从安装开始，LEDE就以安全的标准来设计。例如Wi-Fi默认禁用，没有弱密码，没有任何后门程序。LEDE的系统组件始终保持最新，因此漏洞一旦被发现后会很快得到解决。</li>
<li>高性能、高稳定性： LEDE固件是由所支持的所有设备的标准化组件制作而成。这意味着每个组件都会接受更多的测试和bug修复，而不像原厂固件那样一旦为生产线的产品提供固件后就再也不去碰它。</li>
<li>强大的社区支持： LEDE团队成员会经常参与到LEDE论坛、LEDE开发者、LEDE管理员以及LEDE的IRC频道中去。您可以直接与开发人员，管理软件模块的志愿者和其他LEDE用户交流，大大增加您解决问题的机会。</li>
<li>研发： 许多团队使用LEDE作为他们对网络性能研究的平台。这意味着他们的成功实验案例将会首先在LEDE中实现，而原厂固件将会落后许多。</li>
<li>开源/无额外支出： 使用LEDE没有任何金钱成本。它完全是由志愿者团队、开发者、维护人员、个人以及一些公司创建的。 如果您喜欢LEDE，可以考虑将它变得更好。作为开源社区的一部分，LEDE有强大的Linux Kernel驱动.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;OpenWrt&lt;/strong&gt; 可以说是世界上最出名的家用 &lt;strong&gt;WiFi&lt;/strong&gt; 路由器 &lt;strong&gt;Linux&lt;/strong&gt; 发行版，是由以前名不经传的 &lt;strong&gt;Linksys WRT54G&lt;/strong&gt; 路由催生的一个产品，已经 &lt;strong&gt;12&lt;/strong&gt; 年多了。在2016年5月初，OpenWrt用户社区宣布了另一个 &lt;strong&gt;OpenWrt：Linux Embedded Development Environment (LEDE)&lt;/strong&gt; 。官方解释说，&lt;strong&gt;LEDE&lt;/strong&gt; 是 OpenWrt 的一个分支，或者说是副产品，该项目主要关注透明性，协作和分权。&lt;br&gt;LEDE 是 OpenWrt 社区的新生，有很多目标是与 OpenWrt 相同的，但是相比于 OpenWrt 也有很大的区别。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OpenWRT" scheme="http://cuiqingwei.github.io/tags/OpenWRT/"/>
    
  </entry>
  
  <entry>
    <title>OpenWRT的WiFi带机量修改方法</title>
    <link href="http://cuiqingwei.github.io/2018/05/14/2018-05-14-OpenWRT%E7%9A%84WiFi%E5%B8%A6%E6%9C%BA%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95/"/>
    <id>http://cuiqingwei.github.io/2018/05/14/2018-05-14-OpenWRT的WiFi带机量修改方法/</id>
    <published>2018-05-14T04:12:08.000Z</published>
    <updated>2019-12-19T10:31:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>WiFi带机量的修改</p>
<p>(1)修改MAX_NUMBER_OF_MAC(rt2860v2/include/oid.h)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define MAX_NUMBER_OF_MAC                64 // 原始值32</div></pre></td></tr></table></figure>
<p>(2)需要同时增大RX_RING_SIZE和TX_RING_SIZE，否则连接客户端一多就会掉包(rt2860v2/include/os/rt_linux_cmm.h中)</p>
<a id="more"></a>
<blockquote>
<p>参考:<br><a href="https://blog.csdn.net/mcusun2000/article/details/50875488" target="_blank" rel="external">MT7620的WIFI带机量</a><br><a href="https://blog.csdn.net/manfeel/article/details/38356727" target="_blank" rel="external">MTK_Ralink_ApSoc_SDK编译总结</a><br><a href="http://www.right.com.cn/forum/thread-208204-1-1.html" target="_blank" rel="external">openwrt wifi用户连接数限制</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WiFi带机量的修改&lt;/p&gt;
&lt;p&gt;(1)修改MAX_NUMBER_OF_MAC(rt2860v2/include/oid.h)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#define MAX_NUMBER_OF_MAC                64 // 原始值32&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(2)需要同时增大RX_RING_SIZE和TX_RING_SIZE，否则连接客户端一多就会掉包(rt2860v2/include/os/rt_linux_cmm.h中)&lt;/p&gt;
    
    </summary>
    
    
      <category term="OpenWRT" scheme="http://cuiqingwei.github.io/tags/OpenWRT/"/>
    
      <category term="电子书包" scheme="http://cuiqingwei.github.io/tags/%E7%94%B5%E5%AD%90%E4%B9%A6%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>WiFi探针的工作原理</title>
    <link href="http://cuiqingwei.github.io/2018/05/14/2018-06-18-WiFi%E6%8E%A2%E9%92%88%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://cuiqingwei.github.io/2018/05/14/2018-06-18-WiFi探针的工作原理/</id>
    <published>2018-05-14T04:12:08.000Z</published>
    <updated>2019-12-19T10:59:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>WiFi探针</strong> 技术是指基于WiFi探测技术来识别AP（无线访问接入点）附近已开启WiFi的智能手机或者WiFi终端（笔记本，平板电脑等），无需用户接入WiFi，WiFi探针就能够识别用户的信息。</p>
<p>当我们走进探针信号覆盖区域内且我们的WiFi设备打开，我们的设备就能被探针探测出来，无论是iOS或者Android系统都能轻易检测到，并且获取设备的MAC地址。</p>
<a id="more"></a>
<h1 id="WiFi探测特点"><a href="#WiFi探测特点" class="headerlink" title="WiFi探测特点"></a>WiFi探测特点</h1><ul>
<li>用户无需连接，无需安装APP；</li>
<li>手机已经连接WiFi也可以探测；</li>
<li>自动实时探测区域内的WiFi终端标识MAC地址；</li>
<li>自动记录每个WiFi终端进入区域时间log_TIme、场强SNR；</li>
<li>兼容iOS苹果和Android系统，开启WiFi的智能手机、笔记本电脑、Pad等移动设备都能探测。</li>
</ul>
<p><img src="/img/20180618/20180424090423830.jpg" alt=""></p>
<h1 id="WiFi探针的工作原理"><a href="#WiFi探针的工作原理" class="headerlink" title="WiFi探针的工作原理"></a>WiFi探针的工作原理</h1><p>要深入了解WiFi探针技术，首先先认识WiFi使用的网络协议，WiFi采用的是IEEE802.11协议集，此协议集包含许多子协议。其中按照时间顺序发展，主要有：<br>（1）802.11a，（2）802.11b，（3）802.11g（4）802.11n。<br>在网络通信中，数据被封装成了帧，帧就是指通信中的一个数据块。但是帧在数据链路层传输的时候是有固定格式的，不是随便的封装和打包就可以传输，大小有限制，最小46字节，最大1500字节所以我们必须按照这个规则来封装。下面802.11的帧结构：</p>
<p><img src="/img/20180618/1524574939991174.jpg" alt=""><br><img src="/img/20180618/1524574939673549.jpg" alt=""></p>
<p>从上面的结构可以知道，前俩个字节为：帧控制字段。<br>控制字段的前2bit节为：协议类型，目前此值为：0。</p>
<ul>
<li>1）控制帧：（ControlFrame，例如RTS帧、CTS帧、ACK帧）用于竞争期间的握手通信和正向确认、结束非竞争期等；</li>
<li>2）管理帧：（ManagementFrame，例如Beacon帧、ProbeRequest帧）主要用于STA与AP之间协商、关系的控制，如关联、认证、同步等；</li>
<li>3）数据帧：（DataFrame，承载数据的载体）用于在竞争期和非竞争期传输数据。</li>
</ul>
<h2 id="1、管理帧"><a href="#1、管理帧" class="headerlink" title="1、管理帧"></a>1、管理帧</h2><p>BeaconFrame：信标帧，是相当重要的维护机制，主要来宣告某个AP网络的存在。定期发送的信标，可让移动WiFi设备得知该网络的存在，从而调整加入该网络所必要的参数。在基础网络里，AP必须负责发送Beacon帧，Beacon帧所及范围即为基本服务区域。在基础型网络里，所有沟通都必须通过接入点，因此WiFi设备不能距离太远，否则无法接收到信标。下图是帧格式：</p>
<p><img src="/img/20180618/1524574940570406.jpg" alt=""></p>
<h2 id="2、管理帧"><a href="#2、管理帧" class="headerlink" title="2、管理帧"></a>2、管理帧</h2><p>ProbeRequest：探测请求帧，WiFi设备将会利用ProbeRequest帧，扫描所在区域内目前有哪些802.11网络。下图是帧格式：</p>
<p><img src="/img/20180618/1524574943944955.jpg" alt=""></p>
<h2 id="3、数据帧："><a href="#3、数据帧：" class="headerlink" title="3、数据帧："></a>3、数据帧：</h2><p>Data数据帧，当接入点要送出一个帧给WiFi设备但是不必确认之前所传送的信息时，就会使用标准的数据帧。标准的数据帧并不会征询对方是否有数据待传，因此不允许接收端传送任何数据。无竞争周期所使用的纯数据（Data-Only）帧和无竞争周期所使用的数据帧完全相同。看了以上的网络知识，我们现在说说WiFi探针是怎么工作的，还是先看张图：</p>
<p><img src="/img/20180618/1524574944692277.jpg" alt=""></p>
<p>就像图中描述的一样，我们的WiFi探针其实就是一个AP，它定时的向自己的四周广播发送Beacon帧，用来通知附近的WiFi设备，AP是存在的，（好比它一直在向周围喊着，我在这里，大家快来连接我啊）。我们的WiFi设备，手机，平板电脑等，也不停的发送着probe帧，去寻找附近可用的AP。在probe帧的介绍中就我们可以看到probe帧包含了设备的mac地址，当我们的AP接收到probe帧之后就获取了这个设备的MAC地址，而这个AP就是我们的WIFI探针。因此只要在WiFi探针覆盖区域内的设备打开着WiFi，探针就能收集到他的MAC地址。</p>
<h1 id="WiFi探针可以采集哪些数据"><a href="#WiFi探针可以采集哪些数据" class="headerlink" title="WiFi探针可以采集哪些数据"></a>WiFi探针可以采集哪些数据</h1><p>　　可采集数据：<br>　　设备MAC地址；<br>　　WiFi信号强度；<br>　　WiFi信号频道；<br>　　信号帧类型。<br>　　记录格式：探针 MAC|抓取的设备 MAC|设备发送的 WiFi 包的类型|子类型|信号强度|时间戳</p>
<p><img src="/img/20180618/1524574945471237.jpg" alt=""></p>
<h1 id="数据释义"><a href="#数据释义" class="headerlink" title="数据释义"></a>数据释义</h1><p>　　“探针MAC”就是探针本身的MAC地址；<br>　　“抓取的设备MAC”指探针抓取到的WiFi信号的发射设备的MAC地址，一般为手机；<br>　　“信号强度”指探针抓取到的WiFi信号的强度，最小值为“-100”，一般来说，此值越大表示发射设备离探针越近；<br>　　“设备发送的WiFi包的类型”指探针抓取到的WiFi信号的类别，其末位数的值为0、4、8时，分别表示抓取到的WiFi信号为“管理”帧、“控制”帧、“数据”帧；<br>　　“时间戳”指探针抓取到WiFi信号的时间，如果探针在局域网内使用而没有接入广域网的话，时间戳可能是不准确的。</p>
<blockquote>
<p>WiFi探针数据可以同哪些数据融合？<br>数据的应用核心在于融合，如何将各成一派数据巧妙的组合在一起，让数据驱动商业的发展，是现在与未来的议题。虽然线上大数据已经经历过互联网的洗礼，但是线下数据仍有较长的路要走，那么WiFi探针可以同哪些数据做融合呢？<br>MAC数据可以同支付数据、会员数据、消费数据、营销数据、地理数据及线上数据做深度的融合，将多维度的数据集成一起勾画出完整的用户画像，如用户的姓名、年龄、兴趣偏好、消费特征、过往消费记录、学历等。基于这些数据再结合具体的应用，这样才能让线下商户有据可依，释放出数据的价值。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;WiFi探针&lt;/strong&gt; 技术是指基于WiFi探测技术来识别AP（无线访问接入点）附近已开启WiFi的智能手机或者WiFi终端（笔记本，平板电脑等），无需用户接入WiFi，WiFi探针就能够识别用户的信息。&lt;/p&gt;
&lt;p&gt;当我们走进探针信号覆盖区域内且我们的WiFi设备打开，我们的设备就能被探针探测出来，无论是iOS或者Android系统都能轻易检测到，并且获取设备的MAC地址。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Wi-Fi" scheme="http://cuiqingwei.github.io/tags/Wi-Fi/"/>
    
  </entry>
  
  <entry>
    <title>Android MulticastSocket 组播</title>
    <link href="http://cuiqingwei.github.io/2018/05/08/2018-05-08-Android-MulticastSocket-%E7%BB%84%E6%92%AD/"/>
    <id>http://cuiqingwei.github.io/2018/05/08/2018-05-08-Android-MulticastSocket-组播/</id>
    <published>2018-05-08T04:12:08.000Z</published>
    <updated>2018-05-14T08:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>现象是MulticastSocket发送组播消息,一些安卓平板上可以发送、接收组播消息,个别安卓不可用。</p>
<a id="more"></a>
<p>1.能正常发送接收的安卓平板,向组播地址发送了组播消息后,同时会向组播地址发送一个 <strong>IGMPv2</strong> 的协议</p>
<p><img src="/img/20180508/7820e355de8f7e4065c08b677e8fb41b.jpg" alt=""></p>
<p>2.能发送,接收不到组播消息的安卓平板设备,可以发现设备没有向组播地址发送 <strong>IGMP</strong> 协议；</p>
<p><img src="/img/20180508/394a6a000dd59316bab0f2d0d9b10387.jpg" alt=""></p>
<p>3.而查看安卓平板,在 <strong>/proc/net/</strong> 目录下,有igmp文件的设备会发送IGMP协议,能正常完成组播消息收发,而没有igmp文件的,就是不能完成组播消息收发的。<strong>igmp</strong> 是IPv4下的协议文件, <strong>igmp6</strong> 是IPv6的协议。可以看到所有设备都支持IPv6的igmp</p>
<p><img src="/img/20180508/2b61d0bd7c6a7742160c4a7aa1fd85c8.jpg" alt=""></p>
<p>4.在Android系统下,编译Linux kernel时有一config  CONFIG_IP_MULTICAST ,如果是定制系统在编译系统的时候配置这个选项 <strong>CONFIG_IP_MULTICAST=y</strong> ,就能enable组播功能。但是有很多系统厂商在编译的时候都默认把这个config给disable了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CONFIG_IP_MULTICAST</div><div class="line">adb shell netcfg</div><div class="line">adb shell ifconfig eth0</div></pre></td></tr></table></figure>
<blockquote>
<p>参考:<br><a href="https://unix.stackexchange.com/questions/25872/how-can-i-know-if-ip-multicast-is-enabled" target="_blank" rel="external">How can I know if IP Multicast is enabled</a><br><a href="https://www.cnblogs.com/inkheart0124/p/5508420.html" target="_blank" rel="external">Android App用MulticastSocket监听组播，为什么连接到不同路由、在不同手机上跑，有的能收到有的收不到</a><br><a href="https://code.google.com/p/android/issues/detail?id=51195" target="_blank" rel="external">Many devices have multicast disabled in the kernel</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现象是MulticastSocket发送组播消息,一些安卓平板上可以发送、接收组播消息,个别安卓不可用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://cuiqingwei.github.io/tags/android/"/>
    
      <category term="电子书包" scheme="http://cuiqingwei.github.io/tags/%E7%94%B5%E5%AD%90%E4%B9%A6%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>OSX安装nginx和rtmp模块</title>
    <link href="http://cuiqingwei.github.io/2018/04/24/2018-04-24-OSX%E5%AE%89%E8%A3%85nginx%E5%92%8Crtmp%E6%A8%A1%E5%9D%97/"/>
    <id>http://cuiqingwei.github.io/2018/04/24/2018-04-24-OSX安装nginx和rtmp模块/</id>
    <published>2018-04-24T04:12:08.000Z</published>
    <updated>2018-04-24T03:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装brew"><a href="#1-安装brew" class="headerlink" title="1.安装brew"></a>1.安装brew</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div><div class="line">如果安装后, 想要卸载</div><div class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2.安装nginx"></a>2.安装nginx</h1><p>先clone nginx项目到本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew tap denji/nginx</div></pre></td></tr></table></figure></p>
<blockquote>
<p>brew tap homebrew/nginx 源已失效<br>  可参考 <a href="https://github.com/denji/homebrew-nginx" target="_blank" rel="external">https://github.com/denji/homebrew-nginx</a></p>
</blockquote>
<p>执行安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install nginx-full --with-rtmp-module</div></pre></td></tr></table></figure>
<p>此时, nginx和rtmp模块就安装好了<br>输入命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx</div></pre></td></tr></table></figure>
<p>在浏览器里打开<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></p>
<blockquote>
<p>查询安装路径：brew info nginx-full</p>
</blockquote>
<h1 id="3-配置RTMP服务"><a href="#3-配置RTMP服务" class="headerlink" title="3.配置RTMP服务"></a>3.配置RTMP服务</h1><p>/usr/local/etc/nginx/nginx.conf <strong>中RTMP和Http节点一致</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -c /usr/local/etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<blockquote>
<p>使用nginx -c的参数指定nginx.conf文件的位置</p>
</blockquote>
<p>在http节点后面加上rtmp配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">rtmp &#123;</div><div class="line">    server &#123;</div><div class="line">        listen 1935;</div><div class="line">        application myapp &#123;</div><div class="line">            live on;</div><div class="line">            #record keyframes;</div><div class="line">            #record_path /tmp;</div><div class="line">            #record_max_size 128K;</div><div class="line">            #record_interval 30s;</div><div class="line">            #record_suffix .this.is.flv;</div><div class="line">            #on_publish http://localhost:8080/publish;</div><div class="line">            #on_play http://localhost:8080/play;</div><div class="line">            #on_record_done http://localhost:8080/record_done;</div><div class="line">       &#125;</div><div class="line">       application hls &#123;</div><div class="line">             live on;</div><div class="line">             hls on;</div><div class="line">             hls_path /tmp/app;</div><div class="line">             hls_fragment 5s;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-查询rtmp服务是否正常"><a href="#4-查询rtmp服务是否正常" class="headerlink" title="4.查询rtmp服务是否正常"></a>4.查询rtmp服务是否正常</h1><p>修改完配置文件之后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo lsof -i -P | grep -i &quot;listen&quot;</div></pre></td></tr></table></figure>
<p>查询1935端口是否开启</p>
<h1 id="5-直播测试"><a href="#5-直播测试" class="headerlink" title="5.直播测试　　"></a>5.直播测试　　</h1><p>安装ffmpeg</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install ffmpeg</div></pre></td></tr></table></figure>
<p>安装<a href="http://www.videolan.org/" target="_blank" rel="external">vlc播放器</a>,准备mp4文件推流测试，用vlc播放</p>
<p><strong>推流</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -re -i /Volumes/WORK/Moorgen/演示资料/演示视频/moorgen.mp4 -vcodec libx264 -acodec aac -f flv rtmp://127.0.0.1:1935/myapp/room</div></pre></td></tr></table></figure>
<p><strong>播放</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rtmp://localhost:1935/myapp/room</div></pre></td></tr></table></figure>
<p><img src="/img/20180424/rtmp.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-安装brew&quot;&gt;&lt;a href=&quot;#1-安装brew&quot; class=&quot;headerlink&quot; title=&quot;1.安装brew&quot;&gt;&lt;/a&gt;1.安装brew&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;如果安装后, 想要卸载&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="rtmp" scheme="http://cuiqingwei.github.io/tags/rtmp/"/>
    
      <category term="nginx" scheme="http://cuiqingwei.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Proguard And DexGuard</title>
    <link href="http://cuiqingwei.github.io/2018/04/24/2018-04-24-Proguard-And-DexGuard/"/>
    <id>http://cuiqingwei.github.io/2018/04/24/2018-04-24-Proguard-And-DexGuard/</id>
    <published>2018-04-24T04:12:08.000Z</published>
    <updated>2018-04-24T09:14:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下，我们混淆自己的安卓项目，会使用Proguard。</p>
<p><a href="http://www.saikoa.com/proguard" target="_blank" rel="external">http://www.saikoa.com/proguard</a></p>
<p><strong>Progurad</strong> 是免费的，而且已经集成到Android ADT中了，使用起来很方便。</p>
<p>混淆工作，是为了保护我们的代码。但是，即使使用Pgoruard混淆了我们的apk文件，也可以使用apktool工具反编译出资源，能够看到Manifest文件，res资源等等。也可以使用dex2jar工具生成jar文件，进而使用jd工具反编译出Java代码片段。虽然，这些代码大部分都经过了混淆，已经很难阅读，但是还是可以读的。</p>
<a id="more"></a>
<p>更危险的是，Proguard只能保护代码，却不能保护我们的apk文件。任何人都可以使用apktool工具，反编译我们开发的apk文件，进而更改其中各种资源，或者更改部分代码，甚至是注入代码，然后再打包回apk，二次发布后，达到自己的目的。或者是加入了广告，或者是增加了恶意木马病毒，等等。</p>
<p>还好，我们还有一种选择，DexGuard。</p>
<p><a href="http://www.saikoa.com/dexguard" target="_blank" rel="external">http://www.saikoa.com/dexguard</a></p>
<p><strong>DexGuard</strong> 是收费的，虽然挺贵的，但是对于一个公司来说，还是可以承受的。</p>
<p>DexGuard是在Proguard基础上，加入了更多的保护措施。使用DexGuard混淆后，生成的apk文件，就无法正常使用apktool反编译了。尽管还是能够反编译出部分资源文件，但是由于反编译过程不完全，就无法再打包成apk了。这样就保护了我们的apk文件，不会被二次打包发布了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般情况下，我们混淆自己的安卓项目，会使用Proguard。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.saikoa.com/proguard&quot;&gt;http://www.saikoa.com/proguard&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Progurad&lt;/strong&gt; 是免费的，而且已经集成到Android ADT中了，使用起来很方便。&lt;/p&gt;
&lt;p&gt;混淆工作，是为了保护我们的代码。但是，即使使用Pgoruard混淆了我们的apk文件，也可以使用apktool工具反编译出资源，能够看到Manifest文件，res资源等等。也可以使用dex2jar工具生成jar文件，进而使用jd工具反编译出Java代码片段。虽然，这些代码大部分都经过了混淆，已经很难阅读，但是还是可以读的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://cuiqingwei.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>802.11ac Wave2到底好在哪?</title>
    <link href="http://cuiqingwei.github.io/2018/03/16/2018-03-16-802-11ac-Wave2%E5%88%B0%E5%BA%95%E5%A5%BD%E5%9C%A8%E5%93%AA/"/>
    <id>http://cuiqingwei.github.io/2018/03/16/2018-03-16-802-11ac-Wave2到底好在哪/</id>
    <published>2018-03-16T06:12:08.000Z</published>
    <updated>2018-03-16T08:24:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在挑选无线路由或是AP时，尤其是那些价格不菲的高端产品，我们常常会在产品描述中看到“MU-MIMO”、“802.11ac Wave2”这些字眼。实际上，MU-MIMO技术正是802.11ac Wave2标准的精髓所在。怎么，感觉与802.11ac Wave2似曾相识？其实，它是第二波11ac。而在本期内容中，我们将向各位更为详尽细的表明：“Wave2”是啥，又到底好在哪？</p>
<a id="more"></a>
<p><img src="/img/20180316/10021074_Wave2hao_thumb.jpg" alt=""></p>
<h3 id="步入正题，Wave2好在哪？"><a href="#步入正题，Wave2好在哪？" class="headerlink" title="步入正题，Wave2好在哪？"></a>步入正题，Wave2好在哪？</h3><p>正式说802.11ac Wave2之前，我们先要了解什么是802.11ac，以及它有哪些特点。IEEE 802.11ac是802.11的一个通信标准，802.11n的升级版。下面重点来了，802.11ac标准最关键的特点有四个，即256QAM调制模式、80/160MHz频宽、更高空间流和MU-MIMO技术。换言之，必须同时满足这4点，才能算是真正的802.11ac，网络速度和网络体验才能算是更进一步，而802.11ac Wave2都办到了。</p>
<p>当然，这里的概念有些人可能容易混淆，Wave2只是一个名词后缀，802.11ac Wave2才是全称。我们常常口语化地说Wave2技术，只是因为我们懒。802.11ac Wave2不是新技术，其背后的黑科技应该是MU-MIMO。</p>
<p><img src="/img/20180316/10021074_20170921-00_thumb.png" alt=""></p>
<p>首先，我们来看 <strong>256QAM</strong> 。QAM，正交振幅调制，一种调制技术。QAM级别越高，每次发射的无线信号中包含的数据就越多，传输效率也就越高。802.11ac Wave2支持更高效率的256QAM（8bit）调制模式，相比802.11n采用的64QAM（6bit），调制效率提升超30%（怎么算的？8-6然后除以8啊）。</p>
<p>如下图所示，我们将每一个点看作是一个数据包，由此可见，256QAM模式下的数据包密度远大于64QAM模式，同一时间内传输的数据总量自然也就更多。</p>
<p><img src="/img/20180316/10021074_20170921-01_thumb.jpg" alt=""></p>
<p>这里，需要我们注意的是，更高的QAM会带来更高的误码率。但即便如此，802.11ac Wave2的效率仍然要高出802.11n一大截。数据表明，将误码率考虑进来，在同样频宽和链路数量下，802.11ac Wave2的理论速率也要高出802.11n至少20%。</p>
<p>接着来看 <strong>频宽</strong> 。802.11ac Wave2在802.11n——20/40MHz频宽以及802.11ac Wave1——80MHz频宽的基础上，又新增了更加稀缺的160MHz频宽。理论上，160MHz确实能够带来更高的传输速率（1x1单流传输速率即可达到867Mbps），然而你也看到了“稀缺”二字，稀缺什么意思？没资源你就没法部署，那就是空谈，尤其是在频谱资源本就不富裕的中国。</p>
<p><img src="/img/20180316/10021074_20170921-02_thumb.jpg" alt=""></p>
<p>按照标准，想要部署160MHz需要连续的160MHz频宽或者2个非连续的80MHz频宽组合才行。所以，再看上图。有没有资源？有，有一个……那支持160MHz意义何在？这还能算优势吗？当然算，有总比没有强。</p>
<p>再者，就是 <strong>空间流</strong> 。一个听起来又抽象又玄妙的词汇，其实它是诸多特点里最好理解的一个。那什么是空间流呢？通常情况下，空间流的数量指的就是天线的数量（当然也有例外，这涉及到天线技术）。天线多，增益就高，同时也会增加容错能力，提高终端的覆盖范围和质量，从而带动传输性能。</p>
<p>例如开篇我们提到的802.11ac Wave2，Wave2支持4空间流，那这个无线路由/AP采用的就是4根收发天线，即4T4R四发四收，我们也常叫它4x4 MIMO。MIMO又是啥？后面细说。为了不那么抽象，我们PO出了下面这张图帮助各位理解，眼尖的同学表示看到了8空间流？QAM调制似乎也升了一档？没错，这就是比Wave2更高阶的Wave3了。</p>
<p><img src="/img/20180316/10021074_20170921-03_thumb.jpg" alt=""></p>
<p>最后，再聊一聊 <strong>MU-MIMO</strong> 技术，也是802.11ac Wave2或者说整个IEEE 802.11ac标准的精髓。它的出现打破了困扰无线领域多年的一个枷锁——究竟如何才能提升多用户数据并发的处理能力。换言之，怎样才能最大化地榨干带宽资源，增加利用率。这才是难得的横向发展，而非一味追求最大传输速率的纵向拔高。</p>
<p><img src="/img/20180316/10021074_20170921-04_thumb.jpg" alt=""></p>
<p>正是MU-MIMO技术的重要性，网络上拿它做科普和试验对象的文章比比皆是，甚至说即便有些人不懂802.11ac Wave2，也会多少知道些MU-MIMO。因此，这里我们还是浅尝辄止，只做简单介绍。</p>
<p>802.11n时代，我们常听到“MIMO”这个词（也被称为SU-MIMO），即“单用户多入多出”。简单说就是只擅长单挑，一无线路由/AP一终端，人一多就完蛋，不能多线作战。</p>
<p><img src="/img/20180316/10021074_20170921-05_thumb.png" alt=""></p>
<p>802.11ac Wave2时期的标志，就是引入了关键性的MU-MIMO技术（即“多用户多入多出”）。MU-MIMO模式下的无线路由/AP就像长了三头六臂，现在可多线作战，个战团战都能上。</p>
<h3 id="哪些产品已经支持802-11ac-Wave2了？"><a href="#哪些产品已经支持802-11ac-Wave2了？" class="headerlink" title="哪些产品已经支持802.11ac Wave2了？"></a>哪些产品已经支持802.11ac Wave2了？</h3><p>写到这里，各位或许想知道目前市场在售产品中，有哪些已经搭上802.11ac Wave2这趟快车？别急，我们在文章的最后，也为大家在家用以及企业级两个领域，为各位举例说明。</p>
<p>华硕RT-AC5300便是一款MU-MIMO的高端路由器，搭配AiRadar智能雷达信号成束技术，令无线信号覆盖更广，信号更稳定；又或是Linksys EA9300，也是一款支持802.11ac Wave2 MU-MIMO技术的三频无线路由；此外，美国网件R8000P也是一款支持MU-MIMO的三频千兆无线路由器。当然，这里我们只是为各位列举一二，不过大多是价格不低的高端路由器。</p>
<p><img src="/img/20180316/10021074_20170921-06_thumb.jpg" alt=""></p>
<p>商用这块，比较熟的是锐捷睿易的一款支援802.11ac Wave2的双频吸顶AP–RG-RAP220(EV2)。其理论并发速率1167Mbps，最大可支持256个终端接入；支持诺客MACC云平台，可实现微信强制关注、PPSK认证、自动生成拓扑、移动运维等众多实用功能；不仅如此，RG-RAP220(EV2)特有矩阵式智能天线，支持智能无缝漫游、智能负载均衡等等，有兴趣的朋友可以去官网详细了解，这里我们就不再过多赘述。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在挑选无线路由或是AP时，尤其是那些价格不菲的高端产品，我们常常会在产品描述中看到“MU-MIMO”、“802.11ac Wave2”这些字眼。实际上，MU-MIMO技术正是802.11ac Wave2标准的精髓所在。怎么，感觉与802.11ac Wave2似曾相识？其实，它是第二波11ac。而在本期内容中，我们将向各位更为详尽细的表明：“Wave2”是啥，又到底好在哪？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Wi-Fi" scheme="http://cuiqingwei.github.io/tags/Wi-Fi/"/>
    
  </entry>
  
  <entry>
    <title>DCS和PLC的区别</title>
    <link href="http://cuiqingwei.github.io/2018/02/05/2018-02-05-DCS%E5%92%8CPLC%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://cuiqingwei.github.io/2018/02/05/2018-02-05-DCS和PLC的区别/</id>
    <published>2018-02-05T06:12:08.000Z</published>
    <updated>2018-03-08T15:06:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>发展到现在，DCS和PLC之间没有一个严格的界限，在大多数人看来，大的系统就是DCS，小的系统就叫PLC。当然，这么说也不是不可以，但是还不对。现在我们来重新建立这个概念。</p>
<a id="more"></a>
<h1 id="先通过几张图看看两者的区别"><a href="#先通过几张图看看两者的区别" class="headerlink" title="先通过几张图看看两者的区别"></a>先通过几张图看看两者的区别</h1><p><img src="/img/20180205/1.jpg" alt=""><br><img src="/img/20180205/2.jpg" alt=""><br><img src="/img/20180205/3.jpg" alt=""><br><img src="/img/20180205/4.jpg" alt=""><br><img src="/img/20180205/5.jpg" alt=""><br><img src="/img/20180205/6.jpg" alt=""><br><img src="/img/20180205/7.jpg" alt=""><br><img src="/img/20180205/8.jpg" alt=""><br><img src="/img/20180205/9.jpg" alt=""><br><img src="/img/20180205/10.jpg" alt=""><br><img src="/img/20180205/11.jpg" alt=""><br><img src="/img/20180205/12.jpg" alt=""><br><img src="/img/20180205/13.jpg" alt=""></p>
<h1 id="首先，DCS和PLC之间有什么不同？"><a href="#首先，DCS和PLC之间有什么不同？" class="headerlink" title="首先，DCS和PLC之间有什么不同？"></a>首先，DCS和PLC之间有什么不同？</h1><p>1.从发展的方向来说：</p>
<p>　　DCS从传统的仪表盘监控系统发展而来。因此，DCS从先天性来说较侧重于仪表的控制，比如YOKOGAWACS3000，DCS系统甚至没有PID数量的限制（PID，比例微分积分算法，是调节阀、变频器闭环控制的标准算法，通常PID的数量决定了可以使用的调节阀数量）。</p>
<p>　　PLC从传统的继电器回路发展而来，最初的PLC甚至没有模拟量的处理能力，因此，PLC从开始就强调的是逻辑运算能力。</p>
<p>2.从系统的可扩展性和兼容性的方面来说：</p>
<p>　　市场上控制类产品繁多，无论DCS还是PLC，均有很多厂商在生产销售。对于PLC系统来说，一般没有或者很少有扩展的需求，因为PLC系统一般针对于设备来使用。一般来讲，PLC也很少有兼容性的要求，比如两个或以上的系统要求资源共享，对于PLC来讲也是很困难的事。而且PLC一般都采用专用的网路结构，比如西门子的MPI总线性网络，甚至增加一台操作员站都不容易或成本很高。</p>
<p>　　DCS在发展的过程中也是各厂家自成体系，但大部分的DCS系统，比如横河YOKOGAWA、霍尼韦尔、ABB等等，虽说系统内部（过程级）的通讯协议不尽相同，但操作级的网络平台不约而同的选择了以太网，采用标准或变形的TCP/IP协议。这样就提供了很方便的可扩展能力。在这种网络中，控制器、计算机均作为一个节点存在，只要网络达到的地方，就可以随意增删节点数量和布置节点位置。另外，基于Windows系统的OPC、DDE等开放协议，各系统也可很方便的通讯，已实现资源共享。</p>
<p>3.从数据库来说：</p>
<p>　　DCS一般都提供统一的数据库，换句话说，在DCS系统中一旦一个数据存在于数据库中，就可以在任何情况下引用，比如在组态软件中、在监控软件中、在趋势图中、在报表中……而PLC系统的数据库通常都不是统一的，组态软件和监控软件甚至归档软件都有自己的数据库。为什么常说西门子的S7-400要到了414以上才称为DCS，因为西门子的PCS7系统才使用统一的数据库，而PCS7要求控制器起码到S7414-3以上的型号。</p>
<p>4.从时间调度上来说：</p>
<p>　　PLC的程序一般不能按事先设定的循环周期运行。PLC程序使从头到尾执行一次后又从头开始执行。（现在一些新型PLC有所改进，不过对任务周期的数量还是有限制）而DCS可以设定任务周期。比如，快速任务等。同样是传感器的采样，压力传感器的变化时间很短，我们可以用200ms的任务周期采样，而温度传感器的滞后时间很大，我们可以用2s的任务采样周期。这样，DCS可以合理的调度控制器的资源。</p>
<p>5.从网络结构方面来说：</p>
<p>　　一般来讲，DCS惯常使用两层网络结构，一层为过程级网络，大部分DCS使用自己的总线协议，比如横河的Modbus、西门子和ABB的Profibus、ABB的CANbus等，这些协议均建立在标准串口传输协议RS232或RS485协议的基础上。现场IO模块，特别是模拟量的采样数据十分庞大，同时现场干扰因素较多，因此应该采用数据吞吐量大、抗干扰能力强的网络标准。基于RS485串口异步通讯方式的总线结构，符合现场通讯的要求。IO的采样数据经CPU转换后变为整型数据或实型数据，在操作级网络（第二层网络）上传输。因此操作级网络可以采用数据吞吐量适中、传输速度快、连接方便的网路标准，同时因操作级网络一般布置在控制室内，对抗干扰的要求相对较低。因此采用标准以太网是最佳选择。TCP/IP协议是一种标准以太网协议，一般我们采用100Mbit/s的通讯速率。</p>
<p>　　PLC系统的工作任务相对简单，因此需要传输的数据量一般不会太大，所以常见的PLC系统为一层网络结构。过程级网络和操作级网络要么合并在一起，要不过程级网络简化成模块之间的内部链接。PLC不会或很少使用以太网。</p>
<p>6.从应用对象的规模上来说：</p>
<p>　　PLC一般用在小型自控场所，比如设备的控制或少量的模拟量的控制及连锁，而大型的应用一般都是DCS。当然，这个概念不准确，但很直观，习惯上我们把大于600点的系统成为DCS，小于这个规模叫做PLC。</p>
<p>　　说了这么多PLC与DCS的区别，但我们应该认识到，PLC与DCS发展到今天，事实上都在向彼此靠拢，严格的说，现在的PLC与DCS已经不能一刀切开，很多时候之间的概念已经模糊了。</p>
<h1 id="现在，我们来讨论一下彼此的相同（似）之处。"><a href="#现在，我们来讨论一下彼此的相同（似）之处。" class="headerlink" title="现在，我们来讨论一下彼此的相同（似）之处。"></a>现在，我们来讨论一下彼此的相同（似）之处。</h1><p>1.从功能上来说：</p>
<p>　　PLC已经具备了模拟量的控制功能，有的PLC系统模拟量处理能力甚至还相当强大，比如西门子S7-400、ABB的ControlLogix和施耐德的Quantum系统。而DCS也具备相当强劲的逻辑处理能力。</p>
<p>2.从系统结构上来说：</p>
<p>　　PLC与DCS的基本结构是一样的。PLC发展到今天，已经全面移植到计算机系统控制上了，传统的编程器早就被淘汰。小型应用的PLC一般使用触摸屏，大规模应用的PLC全面使用计算机系统。和DCS一样，控制器与IO站使用现场总线（一般都是基于RS485或RS232异步串口通讯协议的总线方式），控制器与计算机之间如果没有扩展的要求，也就是说只使用一台计算机的情况下，也会受用这个总线通讯。但如果有不止一台计算机使用，系统结构就会和DCS一样，上位机平台使用以太网结构。这是PLC大型化后和DCS概念模糊的原因之一。</p>
<p>3.PLC和DCS的发展方向：</p>
<p>　　小型化的PLC将向更专业化的使用角度发展，比如功能更加有针对性、对应用的环境更有针对性等等。大型的PLC与DCS的界限逐步淡化，直至完全融合。</p>
<p>　　DCS将向FCS的方向继续发展。FCS的核心除了控制系统更加分散化以外，特别重要的是仪表。FCS在国外的应用已经发展到仪表级。控制系统需要处理的只是信号采集和提供人机界面以及逻辑控制，整个模拟量的控制分散到现场仪表，仪表与控制系统之间无需传统电缆连接，使用现场总线连接整个仪表系统。（目前国内有横河在中海壳牌石化项目中用到了FCS，仪表级采用的是智能化仪表例如：EJX等，具备世界最先进的控制水准）</p>
<h1 id="如何正确对待DCS和PLC？"><a href="#如何正确对待DCS和PLC？" class="headerlink" title="如何正确对待DCS和PLC？"></a>如何正确对待DCS和PLC？</h1><p>　　我们不应强调PLC和DCS之间的孰优孰劣，他们应该定义一个新名词“控制类产品”。提供给用户的是最适合用户的控制系统。绝大部分用户不会因为想要使用一套DCS而去使用DCS，控制类产品必须定位在满足用户的工艺要求基础之上。甚至提出使用DCS还是PLC的用户大多是从没接触过自控产品或有某种特殊要求的。过分强调这个只会陷入口舌之争。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发展到现在，DCS和PLC之间没有一个严格的界限，在大多数人看来，大的系统就是DCS，小的系统就叫PLC。当然，这么说也不是不可以，但是还不对。现在我们来重新建立这个概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DCS、PLC" scheme="http://cuiqingwei.github.io/tags/DCS%E3%80%81PLC/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM对比</title>
    <link href="http://cuiqingwei.github.io/2017/12/26/2017-12-26-SSH%E4%B8%8ESSM%E5%AF%B9%E6%AF%94/"/>
    <id>http://cuiqingwei.github.io/2017/12/26/2017-12-26-SSH与SSM对比/</id>
    <published>2017-12-26T06:12:08.000Z</published>
    <updated>2017-12-26T06:09:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>当下流行的两种企业开发MVC开源框架，是我们Java程序猿必备知识能力。MVC，即模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。框架之所以流行，在于其易复用和简化开发，精髓在思想，掌握了核心思想，我们掌握其他类似框架也不会有问题，建议大家有精力的话读一下框架源码，尤其是Spring。</p>
<a id="more"></a>
<h1 id="SSH和SSM定义"><a href="#SSH和SSM定义" class="headerlink" title="SSH和SSM定义"></a>SSH和SSM定义</h1><p><strong>SSH</strong> 通常指的是 Struts2 做控制器(controller)，spring 管理各层的组件，hibernate 负责持久化层。</p>
<p><strong>SSM</strong> 则指的是 SpringMVC 做控制器(controller)，Spring 管理各层的组件，MyBatis 负责持久化层。</p>
<p><strong>共同点</strong>：</p>
<ul>
<li>1.Spring依赖注入DI来管理各层的组件；</li>
<li>2.使用面向切面编程AOP管理事物、日志、权限等。</li>
</ul>
<p><strong>不同点</strong>：Struts2 和 SpringMVC 控制器(controller)控制视图和模型的交互机制的不同，Struts2是Action类级别，SpringMVC是方法级别，更容易实现RESTful风格。</p>
<h1 id="SSH-和-SSM-的实现原理"><a href="#SSH-和-SSM-的实现原理" class="headerlink" title="SSH 和 SSM 的实现原理"></a>SSH 和 SSM 的实现原理</h1><h2 id="1-Struts2-的实现原理"><a href="#1-Struts2-的实现原理" class="headerlink" title="1.Struts2 的实现原理"></a>1.Struts2 的实现原理</h2><p><img src="/img/20171226/f740001068a5c16f544.jpg" alt=""></p>
<p>Struts2框架执行步骤（Struts2使用Filter嵌入）：</p>
<ul>
<li>1、客户端初始化一个指向Servlet容器（例如Tomcat）的请求；</li>
<li>2、这个请求经过一系列的过滤器（Filter）（这些过滤器中有一个叫做ActionContextCleanUp的可选过滤器，这个过滤器对于Struts2和其他框架的集成很有帮助；</li>
<li>3、接着FilterDispatcher被调用，FilterDispatcher询问ActionMapper来决定这个请求是否需要调用某个Action；</li>
<li>4、如果ActionMapper决定需要调用某个Action，FilterDispatcher把请求的处理交给ActionProxy；</li>
<li>5、ActionProxy通过Configuration Manager询问框架的配置文件，找到需要调用的Action类；</li>
<li>6、ActionProxy创建一个ActionInvocation的实例；</li>
<li>7、ActionInvocation实例使用命名模式来调用，在调用Action的过程前后，涉及到相关拦截器（Intercepter）的调用；</li>
<li>8、一旦Action执行完毕，ActionInvocation负责根据struts.xml中的配置找到对应的返回结果。返回结果通常是（但不总是，也可 能是另外的一个Action链）一个需要被表示的JSP或者FreeMarker的模版；</li>
<li>9、将处理结果返回给客户端。</li>
</ul>
<h2 id="2-SpringMVC-的实现原理"><a href="#2-SpringMVC-的实现原理" class="headerlink" title="2.SpringMVC 的实现原理"></a>2.SpringMVC 的实现原理</h2><p><img src="/img/20171226/f7500089dc67ac93a17.jpg" alt=""></p>
<p>SpringMVC框架执行步骤（SpringMVC使用Servlet嵌入）：</p>
<ul>
<li>1、客户端发出一个http请求给web服务器，web服务器对http请求进行解析，如果匹配DispatcherServlet的请求映射路径（在web.xml中指定），web容器将请求转交给DispatcherServlet；</li>
<li>2、DipatcherServlet接收到这个请求之后将根据请求的信息（包括URL、Http方法、请求报文头和请求参数Cookie等）以及HandlerMapping的配置找到处理请求的处理器（Handler）；</li>
<li>3-4、DispatcherServlet根据HandlerMapping找到对应的Handler,将处理权交给Handler（Handler将具体的处理进行封装），再由具体的HandlerAdapter对Handler进行具体的调用；</li>
<li>5、Handler对数据处理完成以后将返回一个ModelAndView()对象给DispatcherServlet；</li>
<li>6、Handler返回的ModelAndView()只是一个逻辑视图并不是一个正式的视图，DispatcherSevlet通过ViewResolver将逻辑视图转化为真正的视图View；</li>
<li>7、Dispatcher通过model解析出ModelAndView()中的参数进行解析最终展现出完整的view并返回给客户端。</li>
</ul>
<h1 id="Hibernate-和-MyBatis-两种ORM框架对比"><a href="#Hibernate-和-MyBatis-两种ORM框架对比" class="headerlink" title="Hibernate 和 MyBatis 两种ORM框架对比"></a>Hibernate 和 MyBatis 两种ORM框架对比</h1><p><strong>两者的相同点</strong></p>
<ul>
<li>Hibernate与MyBatis都可以是通过SessionFactoryBuider由XML配置文件生成SessionFactory，然后由SessionFactory 生成Session，最后由Session来开启执行事务和SQL语句。其中SessionFactoryBuider，SessionFactory，Session的生命周期都是差不多的。</li>
<li>Hibernate和MyBatis都支持JDBC和JTA事务处理。</li>
</ul>
<p><strong>两者各自优势</strong></p>
<ul>
<li>MyBatis可以进行更为细致的SQL优化，可以减少查询字段。</li>
<li>MyBatis容易掌握，而Hibernate门槛较高。</li>
<li>Hibernate的DAO层开发比MyBatis简单，Mybatis需要维护SQL和结果映射。</li>
<li>Hibernate对对象的维护和缓存要比MyBatis好，对增删改查的对象的维护要方便。</li>
<li>Hibernate数据库移植性很好，MyBatis的数据库移植性不好，不同的数据库需要写不同SQL。</li>
<li>Hibernate有更好的二级缓存机制，可以使用第三方缓存。MyBatis本身提供的缓存机制不佳，更新操作不能指定刷新指定记录，会清空整个表，但是也可以使用第三方缓存。</li>
<li>Hibernate 封装性好，屏蔽了数据库差异，自动生成SQL语句，应对数据库变化能力较弱，SQL语句优化困难。</li>
<li>MyBatis仅实现了SQL语句和对象的映射，需要针对具体的数据库写SQL语句，应对数据库变化能力较强，SQL语句优化较为方便。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SSM和SSH不同主要在MVC实现方式，以及ORM持久化方面不同（Hiibernate与Mybatis）。SSM越来越轻量级配置，将注解开发发挥到极致，且ORM实现更加灵活，SQL优化更简便；而SSH较注重配置开发，其中的Hiibernate对JDBC的完整封装更面向对象，对增删改查的数据维护更自动化，但SQL优化方面较弱，且入门门槛稍高。</p>
<blockquote>
<p>附Spring家族：</p>
</blockquote>
<p><img src="/img/20171226/f750008ad20260cf3f2.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当下流行的两种企业开发MVC开源框架，是我们Java程序猿必备知识能力。MVC，即模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。框架之所以流行，在于其易复用和简化开发，精髓在思想，掌握了核心思想，我们掌握其他类似框架也不会有问题，建议大家有精力的话读一下框架源码，尤其是Spring。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://cuiqingwei.github.io/tags/Java/"/>
    
      <category term="SSH" scheme="http://cuiqingwei.github.io/tags/SSH/"/>
    
      <category term="SSM" scheme="http://cuiqingwei.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>curl模拟http发送get或post接口测试</title>
    <link href="http://cuiqingwei.github.io/2017/12/05/2017-12-05-curl%E6%A8%A1%E6%8B%9Fhttp%E5%8F%91%E9%80%81get%E6%88%96post%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    <id>http://cuiqingwei.github.io/2017/12/05/2017-12-05-curl模拟http发送get或post接口测试/</id>
    <published>2017-12-05T06:12:08.000Z</published>
    <updated>2017-12-05T07:04:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、get请求"><a href="#一、get请求" class="headerlink" title="一、get请求"></a>一、get请求</h1><p>curl “<a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a>“     如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地<br>curl -i “<a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a>“  显示全部信息<br>curl -l “<a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a>“  只显示头部信息<br>curl -v “<a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a>“  显示get请求全过程解析<br>wget “<a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a>“     也可以</p>
<a id="more"></a>
<h1 id="二、post请求"><a href="#二、post请求" class="headerlink" title="二、post请求"></a>二、post请求</h1><p>curl -d “param1=value1&amp;param2=value2” “<a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a>“</p>
<h1 id="三、json格式的post请求"><a href="#三、json格式的post请求" class="headerlink" title="三、json格式的post请求"></a>三、json格式的post请求</h1><p>curl -l -H “Content-type: application/json” -X POST -d ‘{“phone”:”13521389587”,”password”:”test”}’ <a href="http://domain/apis/users.json" target="_blank" rel="external">http://domain/apis/users.json</a></p>
<blockquote>
<p>例如：curl -l -H “Content-type: application/json” -X POST -d ‘{“ver”: “1.0”,”soa”:{“req”:”123”},”iface”:”me.ele.lpdinfra.prediction.service.PredictionService”,”method”:”restaurant_make_order_time”,”args”:{“arg2”:”\”stable\””,”arg1”:”{\”code\”:[\”WIND\”],\”temperature\”:11.11}”,”arg0”:”{\”tracking_id\”:\”100000000331770936\”,\”eleme_order_id\”:\”100000000331770936\”,\”platform_id\”:\”4\”,\”restaurant_id\”:\”482571\”,\”dish_num\”:1,\”dish_info\”:[{\”entity_id\”:142547763,\”quantity\”:1,\”category_id\”:1,\”dish_name\”:\”[0xe7][0x89][0xb9][0xe4][0xbb][0xb7][0xe8][0x85][0x8a][0xe5][0x91][0xb3][0xe5][0x8f][0x89][0xe7][0x83][0xa7][0xe5][0x8f][0x8c][0xe6][0x8b][0xbc][0xe7][0x85][0xb2][0xe4][0xbb][0x94][0xe9][0xa5][0xad]\”,\”price\”:31.0}],\”merchant_location\”:{\”longitude\”:\”121.47831425\”,\”latitude\”:\”31.27576153\”},\”customer_location\”:{\”longitude\”:\”121.47831425\”,\”latitude\”:\”31.27576153\”},\”created_at\”:1477896550,\”confirmed_at\”:1477896550,\”dishes_total_price\”:0.0,\”food_boxes_total_price\”:2.0,\”delivery_total_price\”:2.0,\”pay_amount\”:35.0,\”city_id\”:\”1\”}”}}’ <a href="http://vpcb-lpdinfra-stream-1.vm.elenet.me:8989/rpc" target="_blank" rel="external">http://vpcb-lpdinfra-stream-1.vm.elenet.me:8989/rpc</a></p>
</blockquote>
<p>ps：json串内层参数需要格式化</p>
<h1 id="四、高级功能"><a href="#四、高级功能" class="headerlink" title="四、高级功能"></a>四、高级功能</h1><p>curl命令是一个功能强大的网络工具，它能够通过http、ftp等方式下载文件，也能够上传文件。其实curl远不止前面所说的那些功能，大家可以通过man curl阅读手册页获取更多的信息。类似的工具还有wget。</p>
<p>curl命令使用了libcurl库来实现，libcurl库常用在C程序中用来处理HTTP请求，curlpp是libcurl的一个C++封装，这几个东西可以用在抓取网页、网络监控等方面的开发，而curl命令可以帮助来解决开发过程中遇到的问题。</p>
<ul>
<li>1，抓取页面内容到一个文件中</li>
</ul>
<p>curl -o home.html <a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a>   –将百度首页内容抓下到home.html中<br>curl -o #2_#1.jpg<a href="http://cgi2.tky.3web.ne.jp/~{A,B}/[001-201].JPG" target="_blank" rel="external">http://cgi2.tky.3web.ne.jp/~{A,B}/[001-201].JPG</a></p>
<p>由于A/B下的文件名都是001，002…，201，下载下来的文件重名，这样，自定义出来下载下来的文件名，就变成了这样：原来： A/001.JPG —-&gt; 下载后： 001-A.JPG 原来： B/001.JPG —&gt; 下载后： 001-B.JPG</p>
<ul>
<li>2，用-O（大写的），后面的url要具体到某个文件，不然抓不下来。还可以用正则来抓取东西</li>
</ul>
<p>curl -O <a href="http://img.voidcn.com/vcimg/000/000/767/511_420_fe4.gif" target="_blank" rel="external">http://img.voidcn.com/vcimg/000/000/767/511_420_fe4.gif</a></p>
<p>运行结果如下：</p>
<p>% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>Dload  Upload   Total   Spent    Left  Speed<br>100  1575  100  1575    0     0  14940      0 –:–:– –:–:– –:–:– 1538k<br>会在当前执行目录中生成一张bdlogo.gif的图片。</p>
<p>curl -O <a href="http://XXXXX/screen[1-10].JPG" target="_blank" rel="external">http://XXXXX/screen[1-10].JPG</a>  –下载screen1.jpg~screen10.jpg</p>
<ul>
<li>3，模拟表单信息，模拟登录，保存cookie信息</li>
</ul>
<p>curl -c ./cookie_c.txt -F log=aaaa -F pwd=<strong>**</strong><a href="http://www.XXXX.com/wp-login.php" target="_blank" rel="external">http://www.XXXX.com/wp-login.php</a></p>
<ul>
<li>4，模拟表单信息，模拟登录，保存头信息</li>
</ul>
<p>curl -D ./cookie_D.txt -F log=aaaa -F pwd=<strong>**</strong><a href="http://www.XXXX.com/wp-login.php" target="_blank" rel="external">http://www.XXXX.com/wp-login.php</a></p>
<p>-c(小写)产生的cookie和-D里面的cookie是不一样的。</p>
<ul>
<li>5，使用cookie文件</li>
</ul>
<p>curl -b ./cookie_c.txt <a href="http://www.XXXX.com/wp-admin" target="_blank" rel="external">http://www.XXXX.com/wp-admin</a></p>
<ul>
<li>6，断点续传，-C(大写)</li>
</ul>
<p>curl -C -O <a href="http://img.voidcn.com/vcimg/000/000/767/511_420_fe4.gif" target="_blank" rel="external">http://img.voidcn.com/vcimg/000/000/767/511_420_fe4.gif</a></p>
<ul>
<li>7，传送数据,最好用登录页面测试，因为你传值过去后，curl回抓数据，你可以看到你传值有没有成功</li>
</ul>
<p>curl -d log=aaaa <a href="http://www.XXXX.com/wp-login.php" target="_blank" rel="external">http://www.XXXX.com/wp-login.php</a></p>
<ul>
<li>8，显示抓取错误，下面这个例子，很清楚的表明了。</li>
</ul>
<p>curl -f<a href="http://www.XXXX.com/asdf" target="_blank" rel="external">http://www.XXXX.com/asdf</a></p>
<p>curl: (22) The requested URL returned error: 404</p>
<p>curl<a href="http://www.XXXX.com/asdf" target="_blank" rel="external">http://www.XXXX.com/asdf</a></p>
<p><html><head><title>404,not found</title></head></html></p>
<ul>
<li>9，伪造来源地址，有的网站会判断，请求来源地址，防止盗链。</li>
</ul>
<p>curl -e<a href="http://localhosthttp://www.XXXX.com/wp-login.php" target="_blank" rel="external">http://localhosthttp://www.XXXX.com/wp-login.php</a></p>
<ul>
<li>10，当我们经常用curl去搞人家东西的时候，人家会把你的IP给屏蔽掉的,这个时候,我们可以用代理</li>
</ul>
<p>curl -x 24.10.28.84:32779 -o home.html<a href="http://www.XXXX.com" target="_blank" rel="external">http://www.XXXX.com</a></p>
<ul>
<li>11，比较大的东西，我们可以分段下载</li>
</ul>
<p>curl -r 0-100 -o img.part1<a href="http://www.XXXX.com/wp-content/uploads/2010/09/compare_varnish.jpg" target="_blank" rel="external">http://www.XXXX.com/wp-content/uploads/2010/09/compare_varnish.jpg</a></p>
<p>% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>Dload  Upload   Total   Spent    Left  Speed<br>100   101  100   101    0     0    105      0 –:–:– –:–:– –:–:–     0<br>curl -r 100-200 -o img.part2<a href="http://www.XXXX.com/wp-ontent/uploads/2010/09/compare_varnish.jpg" target="_blank" rel="external">http://www.XXXX.com/wp-ontent/uploads/2010/09/compare_varnish.jpg</a><br>% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>Dload  Upload   Total   Spent    Left  Speed<br>100   101  100   101    0     0     57      0  0:00:01  0:00:01 –:–:–     0<br>curl -r 200- -o img.part3<a href="http://www.XXXX.com/wp-content/uploads/2010/09/compare_varnish.jpg" target="_blank" rel="external">http://www.XXXX.com/wp-content/uploads/2010/09/compare_varnish.jpg</a><br>% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>Dload  Upload   Total   Spent    Left  Speed<br>100  104k  100  104k    0     0  52793      0  0:00:02  0:00:02 –:–:– 88961</p>
<p>ls |grep part | xargs du -sh</p>
<p>4.0K    one.part1<br>112K    three.part3<br>4.0K    two.part2</p>
<p>用的时候，把他们cat一下就OK,cat img.part* &gt;img.jpg</p>
<ul>
<li>12，不会显示下载进度信息</li>
</ul>
<p>curl -s -o aaa.jpg <a href="http://img.voidcn.com/vcimg/000/000/767/511_420_fe4.gif" target="_blank" rel="external">http://img.voidcn.com/vcimg/000/000/767/511_420_fe4.gif</a></p>
<ul>
<li>13，显示下载进度条</li>
</ul>
<p>curl  -0 <a href="http://img.voidcn.com/vcimg/000/000/767/511_420_fe4.gif" target="_blank" rel="external">http://img.voidcn.com/vcimg/000/000/767/511_420_fe4.gif</a>     (以http1.0协议请求)</p>
<p>####################################################################### 100.0%</p>
<ul>
<li>14,通过ftp下载文件</li>
</ul>
<p>curl -u用户名:密码 -O<a href="http://www.XXXX.com/demo/curtain/bbstudy_files/style.css" target="_blank" rel="external">http://www.XXXX.com/demo/curtain/bbstudy_files/style.css</a></p>
<p>% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>Dload  Upload   Total   Spent    Left  Speed<br>101  1934  101  1934    0     0   3184      0 –:–:– –:–:– –:–:–  7136</p>
<p>curl -u 用户名:密码 -O <a href="http://www.XXXX.com/demo/curtain/bbstudy_files/style.css" target="_blank" rel="external">http://www.XXXX.com/demo/curtain/bbstudy_files/style.css</a></p>
<p>% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>Dload  Upload   Total   Spent    Left  Speed<br>101  1934  101  1934    0     0   3184      0 –:–:– –:–:– –:–:–  7136</p>
<p>或者用下面的方式</p>
<p>curl -O ftp://用户名:密码@ip:port/demo/curtain/bbstudy_files/style.css<br>curl -O ftp://用户名:密码@ip:port/demo/curtain/bbstudy_files/style.css</p>
<ul>
<li>15，通过ftp上传</li>
</ul>
<p>curl -T test.sql ftp://用户名:密码@ip:port/demo/curtain/bbstudy_files/<br>curl -T test.sql ftp://用户名:密码@ip:port/demo/curtain/bbstudy_files/</p>
<ul>
<li>15,模拟浏览器头</li>
</ul>
<p>curl -A “Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)” -x 123.45.67.89:1080 -o page.html -D cookie0001.txt<a href="http://www.www.baidu.com" target="_blank" rel="external">http://www.www.baidu.com</a></p>
<ul>
<li>16,PUT、GET、POST</li>
</ul>
<p>比如 curl -T localfile <a href="http://cgi2.tky.3web.ne.jp/~zz/abc.cgi，这时候，使用的协议是HTTP的PUT" target="_blank" rel="external">http://cgi2.tky.3web.ne.jp/~zz/abc.cgi，这时候，使用的协议是HTTP的PUT</a> method<br>刚才说到PUT，自然想起来了其他几种methos－－GET和POST。<br>http提交一个表单，比较常用的是POST模式和GET模式<br>GET模式什么option都不用，只需要把变量写在url里面就可以了<br>比如：<br>curl <a href="http://www.yahoo.com/login.cgi?user=nick&amp;password=12345" target="_blank" rel="external">http://www.yahoo.com/login.cgi?user=nick&amp;password=12345</a><br>而POST模式的option则是 -d<br>比如，curl -d “user=nick&amp;password=12345” <a href="http://www.yahoo.com/login.cgi" target="_blank" rel="external">http://www.yahoo.com/login.cgi</a><br>就相当于向这个站点发出一次登陆申请<del>~</del><br>到底该用GET模式还是POST模式，要看对面服务器的程序设定。<br>一点需要注意的是，POST模式下的文件上的文件上传，比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form method=&quot;POST&quot; enctype=&quot;multipar/form-data&quot; action=&quot;http://cgi2.tky.3web.ne.jp/~zz/up_file.cgi&quot;&gt;</div><div class="line">&lt;input type=file name=upload&gt;</div><div class="line">&lt;input type=submit name=nick value=&quot;go&quot;&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>这样一个HTTP表单，我们要用curl进行模拟，就该是这样的语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -F upload=@localfile -F nick=go http://cgi2.tky.3web.ne.jp/~zz/up_file.cgi</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、get请求&quot;&gt;&lt;a href=&quot;#一、get请求&quot; class=&quot;headerlink&quot; title=&quot;一、get请求&quot;&gt;&lt;/a&gt;一、get请求&lt;/h1&gt;&lt;p&gt;curl “&lt;a href=&quot;http://www.baidu.com&quot;&gt;http://www.baidu.com&lt;/a&gt;“     如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地&lt;br&gt;curl -i “&lt;a href=&quot;http://www.baidu.com&quot;&gt;http://www.baidu.com&lt;/a&gt;“  显示全部信息&lt;br&gt;curl -l “&lt;a href=&quot;http://www.baidu.com&quot;&gt;http://www.baidu.com&lt;/a&gt;“  只显示头部信息&lt;br&gt;curl -v “&lt;a href=&quot;http://www.baidu.com&quot;&gt;http://www.baidu.com&lt;/a&gt;“  显示get请求全过程解析&lt;br&gt;wget “&lt;a href=&quot;http://www.baidu.com&quot;&gt;http://www.baidu.com&lt;/a&gt;“     也可以&lt;/p&gt;
    
    </summary>
    
    
      <category term="curl" scheme="http://cuiqingwei.github.io/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>分布式文件系统 FastDFS 5 &amp; Linux CentOS 7 搭建</title>
    <link href="http://cuiqingwei.github.io/2017/12/05/2017-12-22-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-FastDFS-5-Linux-CentOS-7-%E6%90%AD%E5%BB%BA/"/>
    <id>http://cuiqingwei.github.io/2017/12/05/2017-12-22-分布式文件系统-FastDFS-5-Linux-CentOS-7-搭建/</id>
    <published>2017-12-05T06:12:08.000Z</published>
    <updated>2019-12-19T10:36:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>FastDFS是一个开源的轻量级分布式文件系统，由跟踪服务器（tracker server）、存储服务器（storage server）和客户端（client）三个部分组成，主要解决了海量数据存储问题，特别适合以中小文件（建议范围：<strong>4KB &lt; file_size &lt;500MB</strong> ）为载体的在线服务。</p>
<a id="more"></a>
<p>FastDFS的系统结构图如下：</p>
<p><img src="/img/20171222/20160922105102336.jpg" alt=""></p>
<p>如上图，FastDFS的两个核心概念分别是：</p>
<ul>
<li>Tracker（跟踪器）</li>
<li>Storage（存储节点）</li>
</ul>
<blockquote>
<p>Tracker主要做调度工作，相当于mvc中的controller的角色，在访问上起负载均衡的作用。跟踪器和存储节点都可以由一台或多台服务器构成，跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务，其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。Tracker负责管理所有的Storage和group，每个storage在启动后会连接Tracker，告知自己所属的group等信息，并保持周期性的心跳，tracker根据storage的心跳信息，建立group==&gt;[storage server list]的映射表，Tracker需要管理的元信息很少，会全部存储在内存中；另外tracker上的元信息都是由storage汇报的信息生成的，本身不需要持久化任何数据，这样使得tracker非常容易扩展，直接增加tracker机器即可扩展为tracker cluster来服务，cluster里每个tracker之间是完全对等的，所有的tracker都接受stroage的心跳信息，生成元数据信息来提供读写服务。</p>
<p>Storage采用了分卷[Volume]（或分组[group]）的组织方式，存储系统由一个或多个组组成，组与组之间的文件是相互独立的，所有组的文件容量累加就是整个存储系统中的文件容量。一个卷[Volume]（组[group]）可以由一台或多台存储服务器组成，一个组中的存储服务器中的文件都是相同的，组中的多台存储服务器起到了冗余备份和负载均衡的作用，数据互为备份，存储空间以group内容量最小的storage为准，所以建议group内的多个storage尽量配置相同，以免造成存储空间的浪费。更多原理性的内容可以参考这篇blog，介绍的很详细：<a href="http://blog.chinaunix.net/uid-20196318-id-4058561.html" target="_blank" rel="external">分布式文件系统FastDFS设计原理</a></p>
</blockquote>
<p>Parallels安装Centos7</p>
<p><img src="/img/20171222/WX20171222-173110@2x.png" alt=""></p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/happyfish100/fastdfs/archive/V5.11.tar.gz</div><div class="line">wget https://github.com/happyfish100/libfastcommon/archive/V1.0.36.tar.gz</div></pre></td></tr></table></figure>
<p><img src="/img/20171222/WX20171222-143233@2x.png" alt=""></p>
<p>如上图，由于FastDFS是纯C语言实现，只支持Linux、FreeBSD等UNIX系统，所以我们直接下载tar.gz的压缩包，同时FastDFS 5.11同以前版本相比将公共的一些函数等单独封装成了libfastcommon包，所以在安装FastDFS之前我们还必须安装libfastcommon，在余的GitHub首页可以看到：</p>
<p><img src="/img/20171222/20160922114506577.png" alt=""></p>
<p>下载完成后，就可以开始解压安装了：</p>
<p><img src="/img/20171222/WX20171222-143631@2x.png" alt=""></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>先要安装gcc编译器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install gcc-c++</div></pre></td></tr></table></figure>
<h2 id="libfastcommon"><a href="#libfastcommon" class="headerlink" title="libfastcommon"></a>libfastcommon</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar -zxvf V1.0.36.tar.gz</div><div class="line">cd libfastcommon-1.0.36</div><div class="line">./make.sh</div><div class="line">./make.sh install</div></pre></td></tr></table></figure>
<h2 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar -zxvf V5.11.tar.gz</div><div class="line">cd fastdfs-5.11</div><div class="line">./make.sh</div><div class="line">./make.sh install</div></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>安装成功后就会生成如上的3个.sample文件（示例配置文件），拷贝出3个后面用的配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /etc/fdfs</div><div class="line">cp client.conf.sample client.conf</div><div class="line">cp storage.conf.sample storage.conf</div><div class="line">cp tracker.conf.sample tracker.conf</div></pre></td></tr></table></figure>
<p>至此FastDFS已经安装完毕，接下来的工作就是依次配置Tracker和Storage了。</p>
<h1 id="Tracker"><a href="#Tracker" class="headerlink" title="Tracker"></a>Tracker</h1><p>在配置Tracker之前，首先需要创建Tracker服务器的文件路径，即用于存储Tracker的数据文件和日志文件等，我这里选择在 <strong>/opt</strong> 目录下创建一个 <strong>fastdfs_tracker</strong> 目录用于存放Tracker服务器的相关文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /opt/fastdfs_tracker</div></pre></td></tr></table></figure>
<p>接下来就要重新编辑上一步准备好的 <strong>/etc/fdfs</strong> 目录下的 <strong>tracker.conf</strong> 配置文件，打开文件后依次做以下修改：</p>
<blockquote>
<p>disabled=false                  #启用配置文件（默认启用）<br>port=22122                      #设置tracker的端口号，通常采用22122这个默认端口<br>base_path=/opt/fastdfs_tracker  #设置tracker的数据文件和日志目录<br>http.server_port=6666           #设置http端口号，默认为8080</p>
</blockquote>
<p>配置完成后就可以启动Tracker服务器了，但首先依然要为启动脚本创建软引用，因为fdfs_trackerd等命令在/usr/local/bin中并没有，而是在/usr/bin路径下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/bin/fdfs_trackerd /usr/local/bin</div><div class="line">ln -s /usr/bin/stop.sh /usr/local/bin</div><div class="line">ln -s /usr/bin/restart.sh /usr/local/bin</div></pre></td></tr></table></figure>
<p>最后通过命令启动Tracker服务器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service fdfs_trackerd start</div></pre></td></tr></table></figure>
<p>如果启动命令执行成功，那么同时在刚才创建的tracker文件目录 <strong>/opt/fastdfs_tracker</strong> 中就可以看到启动后新生成的data和logs目录，tracker服务的端口也应当被正常监听，最后再通过netstat命令查看一下端口监听情况.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -unltp|grep fdfs</div></pre></td></tr></table></figure>
<p>Tracker至此就配置好了，接下来就可以配置FastDFS的另一核心——Storage。</p>
<h1 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h1><p>同理，步骤基本与配置Tracker一致，首先是创建Storage服务器的文件目录，需要注意的是同Tracker相比我多建了一个目录，因为Storage还需要一个文件存储路径，用于存放接收的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /opt/fastdfs_storage</div><div class="line">mkdir /opt/fastdfs_storage_data</div></pre></td></tr></table></figure>
<p>接下来修改/etc/fdfs目录下的storage.conf配置文件，打开文件后依次做以下修改：</p>
<blockquote>
<p>disabled=false    #启用配置文件（默认启用）<br>group_name=group1 #组名，根据实际情况修改<br>port=23000        #设置storage的端口号，默认是23000，同一个组的storage端口号必须一致<br>base_path=/opt/fastdfs_storage  #设置storage数据文件和日志目录<br>store_path_count=1              #存储路径个数，需要和store_path个数匹配<br>store_path0=/opt/fastdfs_storage_data #实际文件存储路径<br>tracker_server=10.211.55.8:22122   #tracker 服务器的 IP地址和端口号，如果是单机搭建，IP不要写127.0.0.1，否则启动不成功（此处的ip是我的CentOS虚拟机ip）<br>http.server_port=8888           #设置 http 端口号</p>
</blockquote>
<p>配置完成后同样要为Storage服务器的启动脚本设置软引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/bin/fdfs_storaged /usr/local/bin</div></pre></td></tr></table></figure>
<p>接下来就可以启动Storage服务了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service fdfs_storaged start</div></pre></td></tr></table></figure>
<p>同理，如果启动成功，/opt/fastdfs_storage中就可以看到启动后新生成的 <strong>data</strong> 和 <strong>logs</strong> 目录，端口23000也应被正常监听，还有一点就是文件存储路径下会生成多级存储目录，那么接下来看看是否启动成功.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -unltp|grep fdfs</div></pre></td></tr></table></figure>
<p><img src="/img/20171222/WX20171222-162905@2x.png" alt=""></p>
<p>如上图，可以看到此时已经正常监听tracker的22122端口和storage的23000端口，至此storage服务器就已经配置完成，确定了storage服务器启动成功后，还有一项工作就是看看storage服务器是否已经登记到 tracker服务器（也可以理解为tracker与storage是否整合成功），运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/fdfs_monitor /etc/fdfs/storage.conf</div></pre></td></tr></table></figure>
<p><img src="/img/20171222/WX20171222-163212@2x.png" alt=""></p>
<p>如上所示，看到 <strong>ip_addr = 10.211.55.8 (centos-7.shared)  ACTIVE</strong> 字样即可说明storage服务器已经成功登记到了tracker服务器.</p>
<p>添加开机启动，检查一下rc.local是否具备可执行权限，若是无可执行权限则通过</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x /etc/rc.d/rc.local</div></pre></td></tr></table></figure>
<p>进行授权，如下图：</p>
<p><img src="/img/20171222/WX20171222-163634@2x.png" alt=""></p>
<p>至此我们就已经完成了fastdfs的全部配置，此时也就可以用客户端工具进行文件上传下载的测试了。</p>
<h1 id="上传测试"><a href="#上传测试" class="headerlink" title="上传测试"></a>上传测试</h1><p>测试时需要设置客户端的配置文件，编辑 <strong>/etc/fdfs</strong> 目录下的 <strong>client.conf</strong> 文件，打开文件后依次做以下修改：</p>
<blockquote>
<p>base_path=/opt/fastdfs_tracker      #tracker服务器文件路径<br>tracker_server=10.211.55.8:22122    #tracker服务器IP地址和端口号<br>http.tracker_server_port=6666       #tracker服务器的http端口号，必须和tracker的设置对应起来</p>
</blockquote>
<p>配置完成后就可以模拟文件上传了，先通过scp向 <strong>/tmp</strong> 目录下传一下文件。</p>
<p>然后通过执行客户端上传命令尝试上传：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /tmp/big.jpg</div></pre></td></tr></table></figure>
<p>运行后可以发现给我们返回了一个路径：</p>
<p><img src="/img/20171222/WX20171222-164154@2x.png" alt=""></p>
<p>这就表示我们的文件已经上传成功了，当文件存储到某个子目录后，即认为该文件存储成功，接下来会为该文件生成一个文件名，文件名由group、存储目录、两级子目录、fileid、文件后缀名（由客户端指定，主要用于区分文件类型）拼接而成，如下图：</p>
<p><img src="/img/20171222/20160923132829236.jpg" alt=""></p>
<p>同时在之前配置的storage服务器的实际文件存储路径中也可以根据返回的路径找到实际文件：</p>
<h1 id="HTTP访问文件"><a href="#HTTP访问文件" class="headerlink" title="HTTP访问文件"></a>HTTP访问文件</h1><p>因为FastDFS目前已不支持http协议，<strong>4.0.5</strong> 版本开始移除了自带的HTTP支持（因为之前自带的HTTP服务较为简单，无法提供负载均衡等高性能服务），所以余大提供了nginx上使用FastDFS的模块fastdfs-nginx-module，下载地址如下：<a href="https://github.com/happyfish100/fastdfs-nginx-module" target="_blank" rel="external">https://github.com/happyfish100/fastdfs-nginx-module</a>，这样做最大的好处就是提供了HTTP服务并且解决了group中storage服务器的同步延迟问题，接下是fastdfs-nginx-module的安装配置过程.</p>
<h2 id="fastdfs-nginx-module"><a href="#fastdfs-nginx-module" class="headerlink" title="fastdfs-nginx-module"></a>fastdfs-nginx-module</h2><p>先安装系统依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install pcre pcre-devel zlib zlib-devel openssl openssl-devel git</div></pre></td></tr></table></figure>
<p>下载所需组件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/src/</div><div class="line">git clone https://github.com/happyfish100/fastdfs-nginx-module.git</div><div class="line">wget http://nginx.org/download/nginx-1.8.1.tar.gz</div></pre></td></tr></table></figure>
<h2 id="storage-nginx"><a href="#storage-nginx" class="headerlink" title="storage nginx"></a>storage nginx</h2><p>首先是为storage服务器安装nginx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nginx-1.8.1.tar.gz</div><div class="line">cd nginx-1.8.1</div><div class="line">./configure --prefix=/usr/local/nginx --add-module=/usr/local/src/fastdfs-nginx-module/src</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>接下来要修改一下nginx的配置文件，进入conf目录并打开 <strong>nginx.conf</strong> 修改，如下图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<p><img src="/img/20171222/WX20171222-165331@2x.png" alt=""></p>
<p>然后进入FastDFS的安装目录 <strong>/usr/local/src/fastdfs-5.11</strong> 目录下的conf目录，将http.conf和mime.types拷贝到 <strong>/etc/fdfs</strong> 目录下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp -r /usr/local/src/fastdfs-5.11/conf/http.conf /etc/fdfs/</div><div class="line">cp -r /usr/local/src/fastdfs-5.11/conf/mime.types /etc/fdfs/</div></pre></td></tr></table></figure>
<p>接下来还需要把fastdfs-nginx-module安装目录中src目录下的mod_fastdfs.conf也拷贝到 <strong>/etc/fdfs</strong> 目录下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -r /usr/local/src/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</div></pre></td></tr></table></figure>
<p>就需要编辑刚拷贝的这个mod_fastdfs.conf文件了，打开mod_fastdfs.conf并按顺序依次编译以下内容：</p>
<blockquote>
<p>base_path=/opt/fastdfs_storage        #保存日志目录<br>tracker_server=10.211.55.8:22122   #tracker服务器的IP地址以及端口号<br>storage_server_port=23000             #storage服务器的端口号<br>url_have_group_name = true            #文件 url 中是否有 group 名<br>store_path0=/opt/fastdfs_storage_data #存储路径<br>group_count = 3                       #设置组的个数，事实上这次只使用了group1</p>
</blockquote>
<p>设置了group_count = 3，接下来就需要在文件尾部追加这3个group setting：</p>
<blockquote>
<p>[group1]<br>group_name=group1<br>storage_server_port=23000<br>store_path_count=1<br>store_path0=/opt/fastdfs_storage_data</p>
<p>[group2]<br>group_name=group2<br>storage_server_port=23000<br>store_path_count=1<br>store_path0=/opt/fastdfs_storage_data</p>
<p>[group3]<br>group_name=group3<br>storage_server_port=23000<br>store_path_count=1<br>store_path0=/opt/fastdfs_storage_data</p>
</blockquote>
<p>接下来还需要建立 M00 至存储目录的符号连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln  -s  /opt/fastdfs_storage_data/data  /opt/fastdfs_storage_data/data/M00</div></pre></td></tr></table></figure>
<p>最后启动nginx：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure>
<p>通过浏览器访问 <a href="http://10.211.55.8:9999/" target="_blank" rel="external">http://10.211.55.8:9999/</a> 也可以看到nginx的主页：</p>
<h2 id="tracker-nginx"><a href="#tracker-nginx" class="headerlink" title="tracker nginx"></a>tracker nginx</h2><p>同理，再装一个nginx，目录命名为 <strong>nginx2</strong> ，安装路径依旧放在 <strong>/usr/local</strong> 下，由于和之前一样，此处就不再做详细解释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/loca/src/nginx-1.8.1</div><div class="line">./configure --prefix=/usr/local/nginx2 --add-module=/usr/local/src/fastdfs-nginx-module/src</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>接下来依然是修改nginx2的配置文件，进入conf目录并打开nginx.conf文件加入以下配置，storage的nginx无需修改listen端口，即默认的80端口，并将upstream指向tracker的nginx地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/nginx2/conf/nginx.conf</div></pre></td></tr></table></figure>
<p><img src="/img/20171222/WX20171222-170041@2x.png" alt=""></p>
<p>至此关于fastdfs就已经全部配置完毕了，再一次进行测试看看是否能正常上传文件并通过http访问文件。</p>
<p>上传文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scp big.jpg root@10.211.55.8:/tmp/</div><div class="line">cd /tmp/</div><div class="line">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf big.jpg</div><div class="line">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf CADENCE+SPB+15.7工程实例入门.pdf</div><div class="line">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf Step\ by\ Step_\ How\ to\ easily\ tie\ the\ FG\ Knot.mp4</div></pre></td></tr></table></figure></p>
<p>接下来的关键就是通过HTTP测试文件访问，打开浏览器输入ip地址+文件名看看是否能正常访问该图片：</p>
<p><a href="http://10.211.55.8:9999/group1/M00/00/00/CtM3CFo8ysuALXURAAyIkvltU0w661.jpg" target="_blank" rel="external">http://10.211.55.8:9999/group1/M00/00/00/CtM3CFo8ysuALXURAAyIkvltU0w661.jpg</a><br><a href="http://10.211.55.8:9999/group1/M00/00/00/CtM3CFo8ytGABqkAAnhI9lHEHhw379.pdf" target="_blank" rel="external">http://10.211.55.8:9999/group1/M00/00/00/CtM3CFo8ytGABqkAAnhI9lHEHhw379.pdf</a><br><a href="http://10.211.55.8:9999/group1/M00/00/00/CtM3CFo8ytaAZqEqA8pGTvhXcBQ424.mp4" target="_blank" rel="external">http://10.211.55.8:9999/group1/M00/00/00/CtM3CFo8ytaAZqEqA8pGTvhXcBQ424.mp4</a></p>
<p><img src="/img/20171222/WX20171222-170825@2x.png" alt=""></p>
<p>一切正常~ 至此关于FastDFS在CentOS 7下的部署测试就已经全部完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;FastDFS是一个开源的轻量级分布式文件系统，由跟踪服务器（tracker server）、存储服务器（storage server）和客户端（client）三个部分组成，主要解决了海量数据存储问题，特别适合以中小文件（建议范围：&lt;strong&gt;4KB &amp;lt; file_size &amp;lt;500MB&lt;/strong&gt; ）为载体的在线服务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="FastDFS" scheme="http://cuiqingwei.github.io/tags/FastDFS/"/>
    
  </entry>
  
</feed>
