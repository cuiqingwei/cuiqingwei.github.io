<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iZheteng</title>
  <subtitle>Enjoy work, Enjoy life!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cuiqingwei.github.io/"/>
  <updated>2017-02-22T11:08:05.000Z</updated>
  <id>http://cuiqingwei.github.io/</id>
  
  <author>
    <name>cuiqingwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HomeKit初体验</title>
    <link href="http://cuiqingwei.github.io/2017/02/09/2017-02-09-Homekit%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://cuiqingwei.github.io/2017/02/09/2017-02-09-Homekit初体验/</id>
    <published>2017-02-08T16:27:40.000Z</published>
    <updated>2017-02-22T11:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HomeKit-Siri-初体验-！"><a href="#HomeKit-Siri-初体验-！" class="headerlink" title="HomeKit Siri 初体验 ！"></a>HomeKit Siri 初体验 ！</h1><div align="center"><br><iframe height="498" width="510" src="http://player.youku.com/embed/XMjUwMzIyMjEyMA==" frameborder="0" 'allowfullscreen'=""></iframe><br></div>

<a id="more"></a>
<h1 id="界面效果"><a href="#界面效果" class="headerlink" title="界面效果"></a>界面效果</h1><p><img src="/img/20170209/homekit1.jpg" alt=""><br><img src="/img/20170209/homekit2.jpg" alt=""></p>
<p>2017年香港光顾苹果旗舰店时，看到了一些第三方Homekit产品，于是萌生了折腾Homekit的想法。</p>
<p><img src="/img/20170209/devices.jpg" alt=""></p>
<p>折腾时所用的硬件，可以根据个人需要自行更改:</p>
<ul>
<li>树莓派 3 代 B 型（包含 Micor SD 卡）</li>
<li>YeeLight 智能灯泡</li>
<li>E27螺口灯座</li>
<li>网线、MicroUSB线</li>
<li>MacMini 电脑 （ Windows PC、Ubuntu、Linux 均可）</li>
</ul>
<h1 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h1><h3 id="1-安装Raspbian系统"><a href="#1-安装Raspbian系统" class="headerlink" title="1.安装Raspbian系统"></a>1.安装Raspbian系统</h3><p>系统镜像采用 <strong>2016-09-26-Hassbian-Bluetooth.img</strong><br>下载地址 <a href="http://pan.baidu.com/s/1qYs6hn2" target="_blank" rel="external">http://pan.baidu.com/s/1qYs6hn2</a></p>
<p>Mac制作命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">df -h</div><div class="line">diskutil unmount /dev/disk3s1</div><div class="line">dd bs=4m if=2016-09-26-Hassbian-Bluetooth.img of=/dev/rdisk3</div><div class="line">diskutil unmountdisk /dev/disk3</div></pre></td></tr></table></figure></p>
<blockquote>
<p>可参考 <a href="http://cuiqingwei.github.io/2016/02/15/2016-02-15-Raspberry-Pi/">http://cuiqingwei.github.io/2016/02/15/2016-02-15-Raspberry-Pi/</a></p>
</blockquote>
<h3 id="2-登录Raspberry"><a href="#2-登录Raspberry" class="headerlink" title="2.登录Raspberry"></a>2.登录Raspberry</h3><p>安装完成之后，用网线连接好树莓派和路由器，打开电脑的终端，用 ssh 登录树莓派。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh pi@raspberrypi.local</div><div class="line">或者</div><div class="line">ssh pi@ip</div></pre></td></tr></table></figure>
<p>ip可以在路由器的运行网页查看到,当然，Windows系统可以通过 <a href="http://www.mylanviewer.com/network-ip-scanner.html" target="_blank" rel="external">MyLanViewer Network/IP Scanner</a> 扫描等到目标地址。<br>之后终端会要求输入密码，输入 <strong>raspberry</strong> 回车即可。输入密码的途中终端不会显示任何字符，只需要正常输入即可。</p>
<h3 id="3-更新软件源"><a href="#3-更新软件源" class="headerlink" title="3.更新软件源"></a>3.更新软件源</h3><p>登录树莓派之后，先升级软件源，在终端下输入以下代码，等待一段时间即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get upgrade</div></pre></td></tr></table></figure>
<h1 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo raspi-config</div></pre></td></tr></table></figure>
<p>change_locale – 更改语言设置。在Locales to be generated: 中，选择en_US.UTF-8和zh_CN.UTF-8。在Default locale for the system environment:中，选择en_US.UTF-8（等启动完机器，装完中文字体，再改回zh_CN.UTF-8，否则第一次启动会出现方块）。</p>
<blockquote>
<p>可参考 <a href="http://blog.csdn.net/xdw1985829/article/details/38816375" target="_blank" rel="external">http://blog.csdn.net/xdw1985829/article/details/38816375</a></p>
</blockquote>
<h1 id="打开-Yeelight-的极客模式"><a href="#打开-Yeelight-的极客模式" class="headerlink" title="打开 Yeelight 的极客模式"></a>打开 Yeelight 的极客模式</h1><p>在 App Store 下载官方的 Yeelight 应用，先连接上灯泡.然后点右上角的三根横杠，在下方打开极客模式。</p>
<h1 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h1><p>回到终端，我们继续来安装 Node.js 。从版本 4.0.0 开始，Node.js 默认支持基于 ARM 的平台，我们只需要输入相关代码即可。</p>
<p>依次在终端输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget https://nodejs.org/dist/v4.3.2/node-v4.3.2-linux-armv6l.tar.gz</div><div class="line">tar -xvf node-v4.3.2-linux-armv6l.tar.gz</div><div class="line">cd node-v4.3.2-linux-armv6l</div><div class="line">sudo cp -R * /usr/local/</div></pre></td></tr></table></figure>
<p>完成之后，输入 node -v 检查一下是否安装完成，如果显示  v4.3.2 ，则表示 Node.js 安装成功。<br>安装 Avahi 和相关依赖软件包</p>
<p>在终端输入以下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libavahi-compat-libdnssd-dev</div></pre></td></tr></table></figure>
<p>安装 HomeBridge 和相关依赖软件包</p>
<p>依次在终端输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g --unsafe-perm homebridge hap-nodejs node-gyp</div><div class="line">cd /usr/local/lib/node_modules/homebridge/</div><div class="line">sudo npm install --unsafe-perm bignum</div><div class="line">cd /usr/local/lib/node_modules/hap-nodejs/node_modules/mdns</div><div class="line">sudo node-gyp BUILDTYPE=Release rebuild</div></pre></td></tr></table></figure>
<p>添加 Yeelight 配置文件</p>
<p>输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g homebridge-yeelight</div></pre></td></tr></table></figure>
<p>等待命令运行结束后，输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /home/pi/.homebridge/</div><div class="line">vi config.json</div></pre></td></tr></table></figure>
<p>点击键盘的 i 键，终端左下角出现 – INSERT – ，如下图所示。</p>
<p>将以下代码复制到终端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;bridge&quot;: &#123;</div><div class="line">        &quot;name&quot;: &quot;IoTBridge&quot;,</div><div class="line">        &quot;username&quot;: &quot;28:6C:07:10:BF:16&quot;,</div><div class="line">        &quot;port&quot;: 51825,</div><div class="line">        &quot;pin&quot;: &quot;031-45-154&quot;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    &quot;platforms&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;platform&quot; : &quot;yeelight&quot;,</div><div class="line">            &quot;name&quot; : &quot;yeelight&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>粘贴完成后，按Esc键，输入 :wq 然后回车。</p>
<p>之后，便可以运行 HomeBridge ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">homebridge</div></pre></td></tr></table></figure>
<p>这一步完成之后，HomeBridge 就安装完毕并且开始运行， YeeLight 彩光灯也成功接入 Apple HomeKit ，打开 iOS 10 自带的家庭 App， 点击添加配件即可。会有两个配件，第一个是 IoTBridge ，这是一个桥接器；还有一个才是我们要控制的灯泡。</p>
<p>现在，你就可以享受 <strong>「嘿 Siri ，帮我开个灯」</strong> 了。<br>在树莓派启动后自动运行 HomeBridge 服务</p>
<h1 id="最后一步，把-HomeBridge-服务加入到树莓派的系统服务里。"><a href="#最后一步，把-HomeBridge-服务加入到树莓派的系统服务里。" class="headerlink" title="最后一步，把 HomeBridge 服务加入到树莓派的系统服务里。"></a>最后一步，把 HomeBridge 服务加入到树莓派的系统服务里。</h1><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>首先我们要开启 root 账户，首先在终端输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo passwd root</div></pre></td></tr></table></figure>
<p>然后会提示你设置 root 账户密码，第一次输入之后还要确认一次，一样两次输入不会有任何字符显示。输入完毕之后，启用 root 账户，输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo passwd --unlock root</div></pre></td></tr></table></figure>
<p>然后会提示报错： passwd: password expiry information changed. ，原因是新版的系统默认禁止 ssh 登录 root 账户，我们需要修改一下配置文件。在终端输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<p>用 Ctrl + W 搜索「 PermitRootLogin 」，找到之后将 PermitRootLogin without-password 改成 PermitRootLogin yes ，然后按 Ctrl + O 保存，回车之后退出编辑器。</p>
<p>GitHub 提供了三种让树莓派启动后自动运行 HomeBridge 服务的方法，我选择的是 init.d 的方式。打开 这个网页 ，将文件下载到本地，然后将 template 重命名为 homebridge （或者任何你想要的名字） ，放到树莓派目录 /etc/init.d 下。注意这里一定要</p>
<p>用 root 账户 ssh 登录Raspberry。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /etc/init.d</div><div class="line">vi homebridge</div></pre></td></tr></table></figure>
<p>点击键盘的 i 键，终端左下角出现 – INSERT – ，如下图所示。</p>
<p>将以下代码复制到终端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">### BEGIN INIT INFO</div><div class="line"># Provides: homebridge</div><div class="line"># Required-Start:    $network $remote_fs $syslog</div><div class="line"># Required-Stop:     $remote_fs $syslog</div><div class="line"># Default-Start:     2 3 4 5</div><div class="line"># Default-Stop:      0 1 6</div><div class="line"># Short-Description: Start daemon at boot time</div><div class="line"># Description:       Enable service provided by daemon.</div><div class="line">### END INIT INFO</div><div class="line"></div><div class="line">dir=&quot;/home/pi&quot;</div><div class="line">cmd=&quot;DEBUG=* /usr/local/bin/homebridge&quot;</div><div class="line">user=&quot;pi&quot;</div></pre></td></tr></table></figure>
<p>完成后保存，然后回到终端，依次输入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo chmod 755 /etc/init.d/homebridge</div><div class="line">sudo update-rc.d homebridge defaults</div></pre></td></tr></table></figure>
<p>现在，你可以在终端输入 HomeBridge ，等待服务运行之后关掉终端，看是否可以继续使用家庭 App 开关灯泡；或者重启一下树莓派，看看 HomeBridge 服务是否正常运行。</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>将homebridge设置成随系统启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd /</div><div class="line">sudo useradd --system homebridge</div><div class="line">sudo mkdir /var/homebridge</div><div class="line">sudo cp ~/.homebridge/config.json /var/homebridge/</div><div class="line">sudo cp -r ~/.homebridge/persist /var/homebridge</div><div class="line">sudo chmod -R 0777 /var/homebridge</div><div class="line">cd /etc/default</div><div class="line">sudo nano homebridge</div></pre></td></tr></table></figure>
<p>将下面的内容复制粘贴进去</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Defaults / Configuration options for homebridge</div><div class="line"># The following settings tells homebridge where to find the config.json file and where to persist the data (i.e. pairing and others)</div><div class="line">HOMEBRIDGE_OPTS=-U /var/homebridge</div><div class="line"></div><div class="line"># If you uncomment the following line, homebridge will log more</div><div class="line"># You can display this via systemd&apos;s journalctl: journalctl -f -u homebridge</div><div class="line"># DEBUG=*</div></pre></td></tr></table></figure>
<p>Ctrl+X，然后Y，回车，保存退出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /etc/systemd/system</div><div class="line">sudo nano homebridge.service</div></pre></td></tr></table></figure>
<p>将下面的内容复制粘贴进去</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Node.js HomeKit Server</div><div class="line">After=syslog.target network-online.target</div><div class="line">[Service]</div><div class="line">Type=simple</div><div class="line">User=homebridge</div><div class="line">EnvironmentFile=/etc/default/homebridge</div><div class="line">ExecStart=/usr/lib/node_modules/homebridge/bin/homebridge $HOMEBRIDGE_OPTS</div><div class="line">Restart=on-failure</div><div class="line">RestartSec=10</div><div class="line">KillMode=process</div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<p>然后Ctrl+X，然后Y，回车，保存退出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd /</div><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo systemctl enable homebridge</div><div class="line">sudo systemctl start homebridge</div><div class="line">sudo systemctl status homebridge</div><div class="line">sudo reboot      ####重启树莓派####</div></pre></td></tr></table></figure>
<p>如果以上均成功运行，那么恭喜你，一切都大功告成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HomeKit-Siri-初体验-！&quot;&gt;&lt;a href=&quot;#HomeKit-Siri-初体验-！&quot; class=&quot;headerlink&quot; title=&quot;HomeKit Siri 初体验 ！&quot;&gt;&lt;/a&gt;HomeKit Siri 初体验 ！&lt;/h1&gt;&lt;div align = &quot;center&quot;&gt;&lt;br&gt;&lt;iframe height=498 width=510 src=&#39;http://player.youku.com/embed/XMjUwMzIyMjEyMA==&#39; frameborder=0 &#39;allowfullscreen&#39;&gt;&lt;/iframe&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="HomeKit" scheme="http://cuiqingwei.github.io/tags/HomeKit/"/>
    
      <category term="Raspberry" scheme="http://cuiqingwei.github.io/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>OpenWRT之HomeKit</title>
    <link href="http://cuiqingwei.github.io/2017/02/08/2017-02-08-OpenWRT%E4%B9%8BHomeKit/"/>
    <id>http://cuiqingwei.github.io/2017/02/08/2017-02-08-OpenWRT之HomeKit/</id>
    <published>2017-02-08T08:20:56.000Z</published>
    <updated>2017-02-22T07:47:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-制备openwrt系统镜像"><a href="#1-制备openwrt系统镜像" class="headerlink" title="1.制备openwrt系统镜像"></a>1.制备openwrt系统镜像</h1><p>预编译的openwrt是musl的toolchain，而homebridge需要glibc的toolchain所以需要自己编译系统。</p>
<p>建议安装完成后开启ssh，直接用putty和winscp来传送文件和操作虚拟机更方便。<br>以下所有命令都是通过putty登陆虚拟机或使用虚拟机的terminal来执行的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt update</div></pre></td></tr></table></figure>
<p>安装编译系统需要的软件包:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt update</div></pre></td></tr></table></figure>
<p>下载openwrt最新代码，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/openwrt/openwrt.git</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>将feeds.conf.default改名为feeds.conf</p>
<p>更新feeds部分的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./scripts/feeds update -a</div><div class="line">./scripts/feeds install -a</div></pre></td></tr></table></figure>
<blockquote>
<p>使用feeds文件夹替换掉openwrt，原版代码不带avahi的dev库，需要自己添加支持；<br>另外自带nodejs的版本低于5.0启动homebridge的时候会有个warning，一并更换成最新版。</p>
</blockquote>
<p>openwrt编译配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make menuconfig</div></pre></td></tr></table></figure>
<p>需要的软件包：<br>Advanced configuration options (for developers)  —&gt;<br>      Toolchain Options  —&gt;<br>         C Library implementation (Use musl)  —&gt;<br>            [X] Use (e)glibc<br>Base system  —&gt;<br>   block-mount、ca-certificates<br>Development —&gt;<br>   <m> gcc<br>   <m> make<br>Kernel modules  —&gt;<br>    Filesystems  —&gt;<br>       kmod-fs-exfat、kmod-fs-ext4、kmod-fs-ntfs、kmod-fs-vfat<br>    USB Support  —&gt;<br>       kmod-usb-storage-extras、kmod-usb2、kmod-usb3<br>Languages  —&gt;<br>    Node.js  —&gt;<br>        <m> node<br>    Python  —&gt;<br>        <m> python<br>Libraries  —&gt;<br>   libavahi-compat-libdnssd-dev<br>Network  —&gt;<br>    mosquitto<br>LuCi   —&gt;</m></m></m></m></p>
<pre><code>1. Collections  ---&gt;
   luci
</code></pre><p>保存后开始编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make V=s</div></pre></td></tr></table></figure>
<p>趁着时候没事干把准备好的U盘连入虚拟机，格式化成ext3/ext4格式，插到路由器的USB接口上。</p>
<p>刷入系统不再详述，不会搞的可以百度，这方面的教程遍地。<br>成功后进入路由器管理界面luci，system下将语言改为中文。设置路由器登陆密码，然后使用putty和winscp即可连接到路由器文件系统了。<br>将U盘查到路由器上等一会以后，从路由器管理界面找到如下位置，看到U盘的大小说明成功。</p>
<h1 id="2-openwrt-挂载overlay到U盘"><a href="#2-openwrt-挂载overlay到U盘" class="headerlink" title="2. openwrt 挂载overlay到U盘"></a>2. openwrt 挂载overlay到U盘</h1><ul>
<li>2.1. 添加必要软件</li>
</ul>
<p><strong>block-mount</strong><br><strong>kmod-fs-ext4</strong><br><strong>kmod-usb-ohci</strong><br><strong>kmod-usb-storage</strong><br><strong>fdisk</strong><br><strong>cfdisk</strong><br><strong>e2fsprogs</strong></p>
<p>可以在 <strong>menuconfig</strong> 通过输入 <strong>/</strong> 查找这些组件。</p>
<ul>
<li>2.2. 升级系统</li>
</ul>
<p><strong>sysupgrade -v xxxx-sysupgrade.bin</strong></p>
<ul>
<li>2.3. 分区操作</li>
</ul>
<p><strong>cfdisk</strong></p>
<p>分三个区<br>sda1（512M）为系统盘，相当于Windows系统的C盘；<br>sda2（128M)为交换分区，用于内存交换；<br>sda3(剩余)为存储区，主要放置较大文件</p>
<ul>
<li><p>2.4.格式化各分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkfs.ext4 /dev/sda1 　　#将第一个分区格式化为ext3格式</div><div class="line">mkswap /dev/sda2    　　#将第二个分区格式化为swap交换分区</div><div class="line">mkfs.ext4 /dev/sda3 　　#将第三个分区格式化为ext3格式</div></pre></td></tr></table></figure>
</li>
<li><p>2.5.安装完成以后,挂载u盘.如下命令将默认的系统盘转移到u盘中.</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mount /dev/sda1 /mnt</div><div class="line">mkdir /tmp/root</div><div class="line">mount -o bind / /tmp/root</div><div class="line">cp /tmp/root/* /mnt -a</div><div class="line">umount /tmp/root</div></pre></td></tr></table></figure>
<ul>
<li>2.6.修改 /etc/config/fstab 文件,让系统启动自动挂载,修改成如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">config mount</div><div class="line">        option target   /overlay</div><div class="line">        option device   /dev/sda1</div><div class="line">        option fstype   ext4</div><div class="line">        option options  rw,sync</div><div class="line">        option enabled  1</div><div class="line">        option enabled_fsck 0</div></pre></td></tr></table></figure>
<ul>
<li>2.7.执行如下命令让其生效</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/fstab enable</div></pre></td></tr></table></figure>
<ul>
<li>2.8.重启后，执行df -h后如果发现/overlay挂载在/tmp/overlay-disabled上的解决方案：</li>
</ul>
<p><strong>rm /tmp/overlay-disabled/etc/extroot.md5sum</strong></p>
<p>或者删除/tmp/overlay-disabled目录下的所有系统文件，按照第2.5重新操作重启。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-制备openwrt系统镜像&quot;&gt;&lt;a href=&quot;#1-制备openwrt系统镜像&quot; class=&quot;headerlink&quot; title=&quot;1.制备openwrt系统镜像&quot;&gt;&lt;/a&gt;1.制备openwrt系统镜像&lt;/h1&gt;&lt;p&gt;预编译的openwrt是musl的toolchain，而homebridge需要glibc的toolchain所以需要自己编译系统。&lt;/p&gt;
&lt;p&gt;建议安装完成后开启ssh，直接用putty和winscp来传送文件和操作虚拟机更方便。&lt;br&gt;以下所有命令都是通过putty登陆虚拟机或使用虚拟机的terminal来执行的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt update&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装编译系统需要的软件包:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt update&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下载openwrt最新代码，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git clone git://github.com/openwrt/openwrt.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="OpenWRT" scheme="http://cuiqingwei.github.io/tags/OpenWRT/"/>
    
      <category term="HomeKit" scheme="http://cuiqingwei.github.io/tags/HomeKit/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry安装HAP-NodeJS</title>
    <link href="http://cuiqingwei.github.io/2017/02/08/2017-02-08-Raspberry%E5%AE%89%E8%A3%85HAP-NodeJS/"/>
    <id>http://cuiqingwei.github.io/2017/02/08/2017-02-08-Raspberry安装HAP-NodeJS/</id>
    <published>2017-02-07T16:27:40.000Z</published>
    <updated>2017-02-25T13:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载-Raspbian"><a href="#下载-Raspbian" class="headerlink" title="下载 Raspbian"></a>下载 Raspbian</h1><p><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="external">https://www.raspberrypi.org/downloads/raspbian/</a></p>
<h1 id="制作-TF-card"><a href="#制作-TF-card" class="headerlink" title="制作 TF card"></a>制作 TF card</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">df -h</div><div class="line">diskutil unmount /dev/disk2s1</div><div class="line">diskutil list</div><div class="line">dd bs=4m if=2017-01-11-raspbian-jessie.img of=/dev/rdisk2</div><div class="line">diskutil unmountdisk /dev/disk2</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>note：新的img默认没有打开ssh，在tf卡根目录新建名称为 ssh 的文件夹解决</p>
</blockquote>
<h1 id="登录树莓派"><a href="#登录树莓派" class="headerlink" title="登录树莓派"></a>登录树莓派</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh pi@raspberrypi.local</div></pre></td></tr></table></figure>
<h1 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</div><div class="line">sudo vi /etc/apt/sources.list</div></pre></td></tr></table></figure>
<p>进入编辑界面，用 <strong>#</strong> 注释掉原来的源，添加下方的源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deb http://mirrors.neusoft.edu.cn/raspbian/raspbian jessie main contrib non-free rpi</div></pre></td></tr></table></figure>
<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade -y</div></pre></td></tr></table></figure>
<h1 id="安装解决依赖"><a href="#安装解决依赖" class="headerlink" title="安装解决依赖"></a>安装解决依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install avahi-daemon avahi-discover libnss-mdns libavahi-compat-libdnssd-dev  build-essential -y</div><div class="line">service avahi-daemon start</div></pre></td></tr></table></figure>
<h1 id="增加nodejs源"><a href="#增加nodejs源" class="headerlink" title="增加nodejs源"></a>增加nodejs源</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~</div><div class="line">curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -</div></pre></td></tr></table></figure>
<h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd ~/Downloads</div><div class="line">wget http://nodejs.org/dist/v7.6.0/node-v7.6.0.tar.gz</div><div class="line">tar -xzf node-v7.6.0.tar.gz</div><div class="line">cd node-v7.6.0</div><div class="line">./configure</div><div class="line">make</div><div class="line">sudo make install</div></pre></td></tr></table></figure>
<h1 id="克隆HAP-NodeJS源码"><a href="#克隆HAP-NodeJS源码" class="headerlink" title="克隆HAP-NodeJS源码"></a>克隆HAP-NodeJS源码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/KhaosT/HAP-NodeJS.git</div></pre></td></tr></table></figure>
<h1 id="安装node-gyp"><a href="#安装node-gyp" class="headerlink" title="安装node-gyp"></a>安装node-gyp</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g node-gyp</div></pre></td></tr></table></figure>
<h1 id="切换到HAP-NodeJS文件夹下，运行"><a href="#切换到HAP-NodeJS文件夹下，运行" class="headerlink" title="切换到HAP-NodeJS文件夹下，运行"></a>切换到HAP-NodeJS文件夹下，运行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo npm istall</div><div class="line">node Core.js</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;下载-Raspbian&quot;&gt;&lt;a href=&quot;#下载-Raspbian&quot; class=&quot;headerlink&quot; title=&quot;下载 Raspbian&quot;&gt;&lt;/a&gt;下载 Raspbian&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/downloads/raspbian/&quot;&gt;https://www.raspberrypi.org/downloads/raspbian/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;制作-TF-card&quot;&gt;&lt;a href=&quot;#制作-TF-card&quot; class=&quot;headerlink&quot; title=&quot;制作 TF card&quot;&gt;&lt;/a&gt;制作 TF card&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;df -h&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;diskutil unmount /dev/disk2s1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;diskutil list&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dd bs=4m if=2017-01-11-raspbian-jessie.img of=/dev/rdisk2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;diskutil unmountdisk /dev/disk2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Raspberry" scheme="http://cuiqingwei.github.io/tags/Raspberry/"/>
    
      <category term="HAP-NodeJS" scheme="http://cuiqingwei.github.io/tags/HAP-NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>谈谈用ASP.NET开发的大型网站有哪些架构方式</title>
    <link href="http://cuiqingwei.github.io/2016/12/30/2016-12-30-%E7%94%A8ASP-NET%E5%BC%80%E5%8F%91%E7%9A%84%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9C%89%E5%93%AA%E4%BA%9B%E6%9E%B6%E6%9E%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://cuiqingwei.github.io/2016/12/30/2016-12-30-用ASP-NET开发的大型网站有哪些架构方式/</id>
    <published>2016-12-29T16:27:40.000Z</published>
    <updated>2016-12-30T01:19:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://www.cnblogs.com/ms0017/archive/2011/07/26/2117676.html" target="_blank" rel="external">文章</a>里，列举了国内外用ASP.NET开发的大型网站有哪些。最后提到了用.NET开发的大型网站和LAMP/JAVA平台的成本比较。其实在很多时候，收费的不一定就比免费的成本更高。因为开发一个网站要使用哪个平台的技术更合适，需要考虑很多种情况（除了开发技术本身，还要考虑人工，开发效率，时间，后续的支持，维护等等），要综合计算成本才行。微软平台本身虽然是收费的，但总体的成本并非一定比LAMP/JAVA高，上篇文章列举的国内外的那么多基于ASP.NET开发的大型网站就是例证。尤其是在开发效率上，无论是C#开发语言，还是免费的开发工具（Visual Studio Express，或者MonoDevelop/SharpDevelop），.NET明显比其他两个平台更胜一筹。而这一点正是互联网企业所需要的。效率就是生产力。并且，由于有Mono (<a href="http://mono-project.org/" target="_blank" rel="external">http://mono-project.org/</a>) 这个开源平台的存在，.NET技术也可以在linux/BSD等开源服务器上使用。使.NET完全可以实现跨平台应用。据此，我们可以分Windows/Linux两种方式来架构我们的ASP.NET网站：</p>
<a id="more"></a>
<h1 id="一、Windows平台"><a href="#一、Windows平台" class="headerlink" title="一、Windows平台"></a>一、Windows平台</h1><p>在Windows平台下开发大型网站，很多人首先想到的是Microsoft软件高昂的许可费，觉得成本一定很高。其实，这里有个误区。我们开发ASP.NET网站，web服务器完全可以用Windows Werver的WEB版本Windows Web Server 2003/2008，它们并不贵，才3k多RMB。并且注意了，一个系统是一次性买，买了可以用N年，现在还有很多大型网站在用Win2003，想想已经用了多少年？而人员工资则是月付，几年下来成本也并不是很高。贵的地方，应该是SQLServer数据库和支持它的Windows Server企业版。它们确实很贵。但我们开发网站不一定非要用SQLServer啊。数据库可以使用在linux下部署mysql,postgresql等开源数据库，并且也可以考虑用mongodb等开源NOSQL数据库。一般的中大型网站有十几台web服务器就足够了(这里有2013年底的Stack Overflow服务器数据可参考),也就是3w多人民币而已啊！对于Stack Overflow这种规模的网站，这点钱应该也不算什么了吧。当然，如果你真能做到像myspace那种超大型的.NET网站，你应该可以直接找微软要优惠价来批量购买了。呵呵。</p>
<h1 id="二、Linux平台"><a href="#二、Linux平台" class="headerlink" title="二、Linux平台"></a>二、Linux平台</h1><p>如果真的不肯在服务器上花一分钱，就要用完全免费的。我劝你根本不必因此而放弃.NET强大的生产力，而选择其他平台，因为还有Mono。Mono现在已是suse,ubuntu,debian等linux发行版中的默认安装包(apt-get install mono-complete)，并且ubuntu本身就有很多代码是用c#写的。你可以通过类似Linux+Apache/Nginx+Mono的组合（或者用Jexus Web Server）来代替Windows+IIS来架构完全免费的ASP.NET WEB SERVER。目前国内外也有了很多基于mono开发的网站案例,如：<br><a href="http://www.stockren.com/" target="_blank" rel="external">http://www.stockren.com/</a><br><a href="http://www.msannu.cn/" target="_blank" rel="external">http://www.msannu.cn/</a><br>(此外，还有像Unity3D,Xamarin等更多国外知名公司在基于mono开发应用)</p>
<blockquote>
<p>在linux上架设mono的方法有很多，可以参考如下博文：<br>配置linux(apache) + mono 下运行 asp.net<br><a href="http://www.cnblogs.com/hcl0208/archive/2010/10/25/1860173.html" target="_blank" rel="external">http://www.cnblogs.com/hcl0208/archive/2010/10/25/1860173.html</a><br>Ubuntu10.10下Mono2.10+Nginx+fastcgi 部署asp.net网站<br><a href="http://www.cnblogs.com/xiaogangqq123/archive/2011/02/28/1967345.html" target="_blank" rel="external">http://www.cnblogs.com/xiaogangqq123/archive/2011/02/28/1967345.html</a></p>
</blockquote>
<h1 id="三、补充："><a href="#三、补充：" class="headerlink" title="三、补充："></a>三、补充：</h1><p>其实关于大型网站架构的文章网上有太多太多了。如下图，是国内某基于asp.net的大型网站的架构设计图，其实不管是.net还是java/LAMP，不管什么平台，道理都一样。</p>
<p><img src="http://pic002.cnblogs.com/images/2011/318793/2011110710022537.jpg" alt=""></p>
<p>在本架构图中，如果把IIS替换成apache,SqlServer替换成mysql，也一样成立。合理的架构是跟平台无关的。最看不惯的是某些业内所谓的高手，说大型网站用ASP.NET不行，没有JAVA/LAMP好。相信看了这个架构图，再想想 <strong>bing,hotmail,myspace,match,qidian,dangdang,m18,vancl</strong> 等等基于.net开发的大型网站案例，就应该闭上他们的嘴！大型网站的开发，人的能力和合理的架构才是关键所在！(<em>最近一个反例很能说明问题：用java开发的www.12306.cn相信大家都有目共睹。它是架构/人的能力的问题，还是语言/平台的问题？</em>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://www.cnblogs.com/ms0017/archive/2011/07/26/2117676.html&quot;&gt;文章&lt;/a&gt;里，列举了国内外用ASP.NET开发的大型网站有哪些。最后提到了用.NET开发的大型网站和LAMP/JAVA平台的成本比较。其实在很多时候，收费的不一定就比免费的成本更高。因为开发一个网站要使用哪个平台的技术更合适，需要考虑很多种情况（除了开发技术本身，还要考虑人工，开发效率，时间，后续的支持，维护等等），要综合计算成本才行。微软平台本身虽然是收费的，但总体的成本并非一定比LAMP/JAVA高，上篇文章列举的国内外的那么多基于ASP.NET开发的大型网站就是例证。尤其是在开发效率上，无论是C#开发语言，还是免费的开发工具（Visual Studio Express，或者MonoDevelop/SharpDevelop），.NET明显比其他两个平台更胜一筹。而这一点正是互联网企业所需要的。效率就是生产力。并且，由于有Mono (&lt;a href=&quot;http://mono-project.org/&quot;&gt;http://mono-project.org/&lt;/a&gt;) 这个开源平台的存在，.NET技术也可以在linux/BSD等开源服务器上使用。使.NET完全可以实现跨平台应用。据此，我们可以分Windows/Linux两种方式来架构我们的ASP.NET网站：&lt;/p&gt;
    
    </summary>
    
    
      <category term="IIS" scheme="http://cuiqingwei.github.io/tags/IIS/"/>
    
      <category term="ASP.NET" scheme="http://cuiqingwei.github.io/tags/ASP-NET/"/>
    
  </entry>
  
  <entry>
    <title>基于微软平台IIS/ASP.NET开发的大型网站有哪些?</title>
    <link href="http://cuiqingwei.github.io/2016/12/30/2016-12-30-%E5%9F%BA%E4%BA%8E%E5%BE%AE%E8%BD%AF%E5%B9%B3%E5%8F%B0IIS-ASP-NET%E5%BC%80%E5%8F%91%E7%9A%84%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9C%89%E5%93%AA%E4%BA%9B/"/>
    <id>http://cuiqingwei.github.io/2016/12/30/2016-12-30-基于微软平台IIS-ASP-NET开发的大型网站有哪些/</id>
    <published>2016-12-29T16:04:40.000Z</published>
    <updated>2016-12-30T01:09:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先说明一下，本文绝不是要说Microsoft平台多么好，多么强。<br>只是要说明一下除了LAMP/JAVA平台，微软平台不至于像有些人说的，和想象的那么不堪！</p>
<a id="more"></a>
<p>下面一一列举几个:<br><a href="http://www.msn.com/" target="_blank" rel="external">http://www.msn.com/</a><br><a href="http://www.live.com/" target="_blank" rel="external">http://www.live.com/</a> (包括skydrive、hotmail等)<br><a href="http://www.bing.com/" target="_blank" rel="external">http://www.bing.com/</a></p>
<blockquote>
<p>根据comScore今年11月份的统计，微软网站已经超过雅虎、facebook成为仅此于Google的美国第二大网站。如果对这基于windows server/IIS/Asp.net构建的美国第二大网站，你们还说微软技术不能开发大型网站。那不觉得自己是在扯淡么？</p>
</blockquote>
<p><a href="http://www.godaddy.com/" target="_blank" rel="external">http://www.godaddy.com/</a> (全球最大域名注册商)<br><a href="http://www.MySpace.com/" target="_blank" rel="external">http://www.MySpace.com/</a><br><a href="http://www.match.com/" target="_blank" rel="external">http://www.match.com/</a> (世界最大婚恋网站)<br><a href="http://www.monster.com/" target="_blank" rel="external">http://www.monster.com/</a> (世界最大招聘网站,chinahr.com母公司)<br><a href="http://www.careerbuilder.com/" target="_blank" rel="external">http://www.careerbuilder.com/</a><br><a href="http://www.expedia.com/" target="_blank" rel="external">http://www.expedia.com/</a> (世界最大旅游网站,elong,kuxun母公司)<br><a href="http://www.newegg.com/" target="_blank" rel="external">http://www.newegg.com/</a><br><a href="http://www.buy.com/" target="_blank" rel="external">http://www.buy.com/</a><br><a href="http://www.pof.com/" target="_blank" rel="external">http://www.pof.com/</a><br><a href="http://www.ancestry.com/" target="_blank" rel="external">http://www.ancestry.com/</a> (世界最大的家谱网站,拥有全球最复杂的家谱tree)<br><a href="http://espn.go.com/" target="_blank" rel="external">http://espn.go.com/</a><br><a href="http://www.MSNBC.com/" target="_blank" rel="external">http://www.MSNBC.com/</a><br><a href="http://www.stackoverflow.com/" target="_blank" rel="external">http://www.stackoverflow.com/</a> (近两年火起来的技术问答网站,比Quora火的多啊)<br><a href="http://www.AngiesList.com/" target="_blank" rel="external">http://www.AngiesList.com/</a> (最近上市的美国著名点评网站)</p>
<blockquote>
<p>可能有人马上就能举出facebook,yahoo等国外大型网站来反驳我。尤其是对没落的myspace，更是嗤之以鼻。认为是使用微软技术的反面教材。其失败的原因之一就是因为用了微软技术做开发。但我想请问一下：当初myspace如日中天，为全球第一社交网站，facebook还未成气候时，你们当初有谁说它用了微软技术，将来就会失败？有谁说过？！且不说它失败的原因不是微软技术的错，相反，它使用微软技术，能做到上亿的用户，世界最大的社交网站。难道不更能说明微软技术的成功么？现在有多少大型网站能达到当初myspace的规模？屈指可数！并且，我相信如果它做到了现在 facebook的规模，用微软技术也能找到支撑的办法！</p>
</blockquote>
<p><a href="http://www.Dell.com/" target="_blank" rel="external">http://www.Dell.com/</a><br><a href="http://www.CA.com/" target="_blank" rel="external">http://www.CA.com/</a><br><a href="http://www.McAfee.com/" target="_blank" rel="external">http://www.McAfee.com/</a><br><a href="http://www.SAP.com/" target="_blank" rel="external">http://www.SAP.com/</a></p>
<blockquote>
<p>很多人看了肯定会说，这都是一些官网啊。又不是什么大型网站，有什么说服力。请注意了，Dell的官网可是电子商务—卖电脑的。CA, 迈克菲本身是安全领域的公司，SAP是全球顶级ERP提供商。他们为啥要用“安全性最差”的Microsoft技术开发其网站呢？不怕网站被黑了丢人？</p>
</blockquote>
<p><a href="http://www.360buy.com/" target="_blank" rel="external">http://www.360buy.com/</a> (京东商城)<br><a href="http://www.dangdang.com/" target="_blank" rel="external">http://www.dangdang.com/</a> (当当)<br><a href="http://www.vancl.com/" target="_blank" rel="external">http://www.vancl.com/</a> （凡客）<br><a href="http://www.m18.com/" target="_blank" rel="external">http://www.m18.com/</a> （麦考林）<br><a href="http://www.newegg.com.cn/" target="_blank" rel="external">http://www.newegg.com.cn/</a> (新蛋)<br><a href="http://www.yifu.com/" target="_blank" rel="external">http://www.yifu.com/</a><br><a href="http://www.letao.com/" target="_blank" rel="external">http://www.letao.com/</a> (乐淘)<br><a href="http://mall.sina.com.cn/" target="_blank" rel="external">http://mall.sina.com.cn/</a> (新浪商城)<br><a href="http://www.redbaby.com.cn/" target="_blank" rel="external">http://www.redbaby.com.cn/</a><br><a href="http://www.moonbasa.com/" target="_blank" rel="external">http://www.moonbasa.com/</a> (梦芭莎)<br><a href="http://www.no5.com.cn/" target="_blank" rel="external">http://www.no5.com.cn/</a><br><a href="http://www.99read.com/" target="_blank" rel="external">http://www.99read.com/</a><br><a href="http://www.coo8.com/" target="_blank" rel="external">http://www.coo8.com/</a> (库巴，国美旗下)<br><a href="http://www.yintai.com/" target="_blank" rel="external">http://www.yintai.com/</a><br><a href="http://www.5173.com/" target="_blank" rel="external">http://www.5173.com/</a><br><a href="http://www.b2b.cn/" target="_blank" rel="external">http://www.b2b.cn/</a><br><a href="http://www.Ftuan.com/" target="_blank" rel="external">http://www.Ftuan.com/</a><br><a href="http://www.dazhe.cn/" target="_blank" rel="external">http://www.dazhe.cn/</a><br><a href="http://www.tiantian.com/" target="_blank" rel="external">http://www.tiantian.com/</a></p>
<blockquote>
<p>相信很多人都认识到了这一点，国内大部分主流的大型电子商务网站都是用ASP.NET开发的。他们的流量，像360buy等虽然比不上taobao，但千万级的规模是肯定有的，绝对属于大型网站。其安全性，稳定性，性能等等，不比taobao差。</p>
</blockquote>
<p><a href="http://www.ips.com/" target="_blank" rel="external">http://www.ips.com/</a> (环迅支付)<br><a href="http://www.icbc.com.cn/" target="_blank" rel="external">http://www.icbc.com.cn/</a><br><a href="http://www.cmbchina.com/" target="_blank" rel="external">http://www.cmbchina.com/</a><br><a href="https://pbsz.ebank.cmbchina.com/CmbBank_GenShell/UI/GenShellPC/Login/Login.aspx" target="_blank" rel="external">https://pbsz.ebank.cmbchina.com/CmbBank_GenShell/UI/GenShellPC/Login/Login.aspx</a> (招商网银)<br><a href="http://www.95599.cn/" target="_blank" rel="external">http://www.95599.cn/</a><br><a href="https://easyabc.95599.cn/SlfRegPer/netBank/zh_CN/entrance/logon.aspx" target="_blank" rel="external">https://easyabc.95599.cn/SlfRegPer/netBank/zh_CN/entrance/logon.aspx</a> (农行网银)<br><a href="http://www.boc.cn/" target="_blank" rel="external">http://www.boc.cn/</a></p>
<blockquote>
<p>有人说银行的官网不是关键应用，但不知道网银是不是呢？</p>
</blockquote>
<p><a href="http://www.ctrip.com/" target="_blank" rel="external">http://www.ctrip.com/</a> (携程)<br><a href="http://www.elong.com/（艺龙）" target="_blank" rel="external">http://www.elong.com/（艺龙）</a><br><a href="http://www.lotour.com/" target="_blank" rel="external">http://www.lotour.com/</a><br><a href="http://www.17u.cn/" target="_blank" rel="external">http://www.17u.cn/</a><br><a href="http://www.uzai.com/" target="_blank" rel="external">http://www.uzai.com/</a></p>
<blockquote>
<p>主流的在线旅游/票务网站</p>
</blockquote>
<p><a href="http://www.sdo.com/" target="_blank" rel="external">http://www.sdo.com/</a> (盛大在线)<br><a href="http://www.qidian.com/" target="_blank" rel="external">http://www.qidian.com/</a> (起点中文网)<br><a href="http://www.58.com/" target="_blank" rel="external">http://www.58.com/</a> (58同城)<br><a href="http://www.hexun.com/" target="_blank" rel="external">http://www.hexun.com/</a> (和讯)<br><a href="http://www.mtime.com/" target="_blank" rel="external">http://www.mtime.com/</a><br><a href="http://www.yeshj.com/" target="_blank" rel="external">http://www.yeshj.com/</a><br><a href="http://www.eastmoney.com/" target="_blank" rel="external">http://www.eastmoney.com/</a><br><a href="http://www.stockstar.com/" target="_blank" rel="external">http://www.stockstar.com/</a><br><a href="http://feixin.10086.cn/" target="_blank" rel="external">http://feixin.10086.cn/</a> (中国移动飞信<a href="http://www.fetion.com.cn/" target="_blank" rel="external">http://www.fetion.com.cn/</a>)<br><a href="http://mail.10086.cn/" target="_blank" rel="external">http://mail.10086.cn/</a> (中国移动139邮箱)<br><a href="http://passport.189.cn/" target="_blank" rel="external">http://passport.189.cn/</a> （中国电信）<br><a href="http://www.cnblogs.com/" target="_blank" rel="external">http://www.cnblogs.com/</a><br><a href="http://www.csdn.net/" target="_blank" rel="external">http://www.csdn.net/</a><br><a href="http://www.chinahr.com/" target="_blank" rel="external">http://www.chinahr.com/</a><br><a href="http://www.zhaopin.com/" target="_blank" rel="external">http://www.zhaopin.com/</a> (智联招聘)<br><a href="http://www.soufun.com/" target="_blank" rel="external">http://www.soufun.com/</a> (搜房)<br><a href="http://www.dichan.com/" target="_blank" rel="external">http://www.dichan.com/</a> (新浪地产)<br><a href="http://nbadata.sports.qq.com/" target="_blank" rel="external">http://nbadata.sports.qq.com/</a> (腾讯NBA)<br><a href="http://www.autohome.com.cn/" target="_blank" rel="external">http://www.autohome.com.cn/</a> (汽车之家)<br><a href="http://www.bitauto.com/" target="_blank" rel="external">http://www.bitauto.com/</a><br><a href="http://www.39.net/" target="_blank" rel="external">http://www.39.net/</a><br><a href="http://3g.cn/" target="_blank" rel="external">http://3g.cn/</a></p>
<p>总之一句话，拿那些如：性能、安全、稳定、效率等等作为原因来攻击微软平台，是绝对站不住脚的！其实大家都心里清楚，ASP.NET和LAMP/JAVA相比，最大不同只不过是前者是收费的，而后者是开源免费的。仅此而已！</p>
<p>补充：<br>1、关于成本的讨论，可以看一下<a href="http://www.cnblogs.com/ms0017/archive/2011/08/17/Microsoft-NET-Mono-MySQL-MVC-Linux-Large-WebSite.html" target="_blank" rel="external">谈谈用ASP.NET开发的大型网站有哪些架构方式</a>。<br>2、相信很多人（包括我自己）都认为微软Windows在桌面OS上无敌，在服务器上不行，在服务器OS上Linux是老大。可惜事实却是：在服务器操作系统上Windows Server也是老大！这里有IDC对2009，2010两年服务器操作系统的市场份额统计，在最近两年里Windows在全球服务器OS的市场份额已经是第一，并且还在稳步上升中。<br><a href="http://blog.csdn.net/ms_net/article/details/6634295" target="_blank" rel="external">http://blog.csdn.net/ms_net/article/details/6634295</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先说明一下，本文绝不是要说Microsoft平台多么好，多么强。&lt;br&gt;只是要说明一下除了LAMP/JAVA平台，微软平台不至于像有些人说的，和想象的那么不堪！&lt;/p&gt;
    
    </summary>
    
    
      <category term="IIS" scheme="http://cuiqingwei.github.io/tags/IIS/"/>
    
      <category term="ASP.NET" scheme="http://cuiqingwei.github.io/tags/ASP-NET/"/>
    
  </entry>
  
  <entry>
    <title>GoAhead移植到OpenWRT</title>
    <link href="http://cuiqingwei.github.io/2016/11/17/2016-12-15-GoAhead%E7%A7%BB%E6%A4%8D%E5%88%B0OpenWRT/"/>
    <id>http://cuiqingwei.github.io/2016/11/17/2016-12-15-GoAhead移植到OpenWRT/</id>
    <published>2016-11-17T13:04:40.000Z</published>
    <updated>2016-12-15T13:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="make-menuconfig"><a href="#make-menuconfig" class="headerlink" title="make menuconfig"></a>make menuconfig</h1><p><img src="/img/20161215/menuconfig.jpg" alt=""><br><a id="more"></a></p>
<h1 id="ipk"><a href="#ipk" class="headerlink" title="ipk"></a>ipk</h1><p><img src="/img/20161215/goahead-ipk.jpg" alt=""></p>
<h1 id="run"><a href="#run" class="headerlink" title="run"></a>run</h1><p><img src="/img/20161215/openwrt.jpg" alt=""></p>
<h1 id="goahead运行效果"><a href="#goahead运行效果" class="headerlink" title="goahead运行效果"></a>goahead运行效果</h1><p><img src="/img/20161215/goahead2.5.jpg" alt=""></p>
<blockquote>
<p><a href="http://www.right.com.cn/forum/thread-203861-1-1.html" target="_blank" rel="external">http://www.right.com.cn/forum/thread-203861-1-1.html</a><br><a href="http://www.amobbs.com/thread-5665404-1-1.html" target="_blank" rel="external">http://www.amobbs.com/thread-5665404-1-1.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;make-menuconfig&quot;&gt;&lt;a href=&quot;#make-menuconfig&quot; class=&quot;headerlink&quot; title=&quot;make menuconfig&quot;&gt;&lt;/a&gt;make menuconfig&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/20161215/menuconfig.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="OpenWRT" scheme="http://cuiqingwei.github.io/tags/OpenWRT/"/>
    
      <category term="GoAhead" scheme="http://cuiqingwei.github.io/tags/GoAhead/"/>
    
  </entry>
  
  <entry>
    <title>Contiki-CC2538-CoAP</title>
    <link href="http://cuiqingwei.github.io/2016/11/17/2016-11-17-Contiki-CC2538-CoAP/"/>
    <id>http://cuiqingwei.github.io/2016/11/17/2016-11-17-Contiki-CC2538-CoAP/</id>
    <published>2016-11-17T13:04:40.000Z</published>
    <updated>2017-02-22T11:15:35.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><iframe height="498" width="510" src="http://player.youku.com/embed/XMTgyNDA3NDAzNg==" frameborder="0" 'allowfullscreen'=""></iframe><br></div>

<a id="more"></a>
<h1 id="Mote1"><a href="#Mote1" class="headerlink" title="Mote1"></a>Mote1</h1><h3 id="build-rp-border-router"><a href="#build-rp-border-router" class="headerlink" title="build rp-border-router"></a>build rp-border-router</h3><p>cd ~<br>cd contiki/examples/ipv6/rpl-border-router</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/contiki/examples/ipv6/rpl-border-router$ git diff .</div><div class="line">diff --git a/examples/ipv6/rpl-border-router/border-router.c b/examples/ipv6/rpl</div><div class="line">index 90b1fdf..f7d565c 100644</div><div class="line">--- a/examples/ipv6/rpl-border-router/border-router.c</div><div class="line">+++ b/examples/ipv6/rpl-border-router/border-router.c</div><div class="line">@@ -54,7 +54,8 @@</div><div class="line"> #include &lt;string.h&gt;</div><div class="line"> #include &lt;ctype.h&gt;</div><div class="line">-#define DEBUG DEBUG_NONE</div><div class="line">+//#define DEBUG DEBUG_NONE</div><div class="line">+#define DEBUG DEBUG_PRINT</div><div class="line"> #include &quot;net/ip/uip-debug.h&quot;</div><div class="line"> static uip_ipaddr_t prefix;</div><div class="line">diff --git a/examples/ipv6/rpl-border-router/project-conf.h b/examples/ipv6/rpl-</div><div class="line">index ec3eb3f..1f4f8c9 100644</div><div class="line">--- a/examples/ipv6/rpl-border-router/project-conf.h</div><div class="line">+++ b/examples/ipv6/rpl-border-router/project-conf.h</div><div class="line">@@ -64,4 +64,7 @@</div><div class="line"> #define WEBSERVER_CONF_CFS_CONNS 2</div><div class="line"> #endif</div><div class="line">+//#define RF_CORE_CONF_CHANNEL    25</div><div class="line">+#define RF_CORE_CONF_CHANNEL    26</div><div class="line">+</div><div class="line"> #endif /* PROJECT_ROUTER_CONF_H_ */</div></pre></td></tr></table></figure>
<p>make TARGET=cc2538dk all</p>
<h3 id="program-cc2538-select-reset-on-CC2538DK"><a href="#program-cc2538-select-reset-on-CC2538DK" class="headerlink" title="program cc2538,(select + reset on CC2538DK)"></a>program cc2538,(select + reset on CC2538DK)</h3><p>../../../tools/cc2538-bsl/cc2538-bsl.py -v -e -w border-router.bin</p>
<h3 id="push-reset-button-see-console-print"><a href="#push-reset-button-see-console-print" class="headerlink" title="push reset button, see console print"></a>push reset button, see console print</h3><p>../../../tools/sky/serialdump-linux -b115200 /dev/ttyUSB0</p>
<h1 id="Mote2"><a href="#Mote2" class="headerlink" title="Mote2"></a>Mote2</h1><h3 id="build-er-rest-example"><a href="#build-er-rest-example" class="headerlink" title="build er-rest-example"></a>build er-rest-example</h3><p>cd ~<br>cd contiki/examples/er-rest-example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/contiki/examples/er-rest-example$ git diff .</div><div class="line">diff --git a/examples/er-rest-example/project-conf.h b/examples/er-rest-example/project-conf.h</div><div class="line">index adcb75e..facd2fb 100644</div><div class="line">--- a/examples/er-rest-example/project-conf.h</div><div class="line">+++ b/examples/er-rest-example/project-conf.h</div><div class="line">@@ -40,25 +40,26 @@</div><div class="line"> #define __PROJECT_ERBIUM_CONF_H__</div><div class="line"></div><div class="line"> /* Custom channel and PAN ID configuration for your project. */</div><div class="line">-/*</div><div class="line">+</div><div class="line">    #undef RF_CHANNEL</div><div class="line">    #define RF_CHANNEL                     26</div><div class="line"></div><div class="line">    #undef IEEE802154_CONF_PANID</div><div class="line">    #define IEEE802154_CONF_PANID          0xABCD</div><div class="line">- */</div><div class="line">+</div><div class="line"> /* IP buffer size must match all other hops, in particular the border router. */</div><div class="line">-/*</div><div class="line">+</div><div class="line">    #undef UIP_CONF_BUFFER_SIZE</div><div class="line">    #define UIP_CONF_BUFFER_SIZE           256</div><div class="line">- */</div><div class="line">+</div><div class="line"> /* Disabling RDC and CSMA for demo purposes. Core updates often</div><div class="line">    require more memory. */</div><div class="line"> /* For projects, optimize memory and enable RDC and CSMA again. */</div><div class="line"> #undef NETSTACK_CONF_RDC</div><div class="line">-#define NETSTACK_CONF_RDC              nullrdc_driver</div><div class="line">+//#define NETSTACK_CONF_RDC              nullrdc_driver</div><div class="line">+#define NETSTACK_CONF_RDC              contikimac_driver</div><div class="line"> #undef RPL_CONF_MAX_DAG_PER_INSTANCE</div><div class="line"> #define RPL_CONF_MAX_DAG_PER_INSTANCE     1</div><div class="line">@@ -68,7 +69,8 @@</div><div class="line"> #define UIP_CONF_TCP                   0</div><div class="line"> #undef NETSTACK_CONF_MAC</div><div class="line">-#define NETSTACK_CONF_MAC     nullmac_driver</div><div class="line">+//#define NETSTACK_CONF_MAC     nullmac_driver</div><div class="line">+#define NETSTACK_CONF_MAC     csma_driver</div><div class="line"> /* Increase rpl-border-router IP-buffer when using more than 64. */</div><div class="line"> #undef REST_MAX_CHUNK_SIZE</div></pre></td></tr></table></figure></p>
<p>make TARGET=cc2538dk all</p>
<h3 id="program-cc2538-select-reset-on-CC2538DK-1"><a href="#program-cc2538-select-reset-on-CC2538DK-1" class="headerlink" title="program cc2538,(select + reset on CC2538DK)"></a>program cc2538,(select + reset on CC2538DK)</h3><p>../../../tools/cc2538-bsl/cc2538-bsl.py -p /dev/ttyUSB1 -v -e -w er-example-server.bin</p>
<h3 id="push-reset-button-see-console-print-1"><a href="#push-reset-button-see-console-print-1" class="headerlink" title="push reset button, see console print"></a>push reset button, see console print</h3><p>../../../tools/sky/serialdump-linux -b115200 /dev/ttyUSB1</p>
<h1 id="run-tunslip6"><a href="#run-tunslip6" class="headerlink" title="run tunslip6"></a>run tunslip6</h1><p>cd ~<br>cd contiki/examples/ipv6/rpl-border-router</p>
<p>sudo ../../../tools/tunslip6 aaaa::1/64 -s /dev/ttyUSB0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">********SLIP started on ``/dev/ttyUSB0&apos;&apos;</div><div class="line">opened tun device ``/dev/tun0&apos;&apos;</div><div class="line">ifconfig tun0 inet `hostname` mtu 1500 up</div><div class="line">ifconfig tun0 add aaaa::1/64</div><div class="line">ifconfig tun0 add fe80::0:0:0:1/64</div><div class="line">ifconfig tun0</div><div class="line">tun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  </div><div class="line">          inet addr:127.0.1.1  P-t-P:127.0.1.1  Mask:255.255.255.255</div><div class="line">          inet6 addr: fe80::1/64 Scope:Link</div><div class="line">          inet6 addr: aaaa::1/64 Scope:Global</div><div class="line">          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:500</div><div class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</div><div class="line"></div><div class="line">*** Address:aaaa::1 =&gt; aaaa:0000:0000:0000</div><div class="line">Got configuration message of type P</div><div class="line">Setting prefix aaaa::</div><div class="line">created a new RPL dag</div><div class="line">Server IPv6 addresses:</div><div class="line"> aaaa::212:4b00:5af:8444</div><div class="line"> fe80::212:4b00:5af:8444</div></pre></td></tr></table></figure>
<h1 id="ping6"><a href="#ping6" class="headerlink" title="ping6"></a>ping6</h1><p>ping6 aaaa::212:4b00:5af:84e0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PING aaaa::212:4b00:5af:84e0(aaaa::212:4b00:5af:84e0) 56 data bytes</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=1 ttl=63 time=1013 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=2 ttl=63 time=126 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=3 ttl=63 time=126 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=4 ttl=63 time=126 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=5 ttl=63 time=125 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=6 ttl=63 time=120 ms</div></pre></td></tr></table></figure>
<h1 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h1><p><img src="/img/20161117/coap1.png" alt=""><br><img src="/img/20161117/coap2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;div align = &quot;center&quot;&gt;&lt;br&gt;&lt;iframe height=498 width=510 src=&#39;http://player.youku.com/embed/XMTgyNDA3NDAzNg==&#39; frameborder=0 &#39;allowfullscreen&#39;&gt;&lt;/iframe&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="Contiki" scheme="http://cuiqingwei.github.io/tags/Contiki/"/>
    
      <category term="CC2538" scheme="http://cuiqingwei.github.io/tags/CC2538/"/>
    
      <category term="CoAP" scheme="http://cuiqingwei.github.io/tags/CoAP/"/>
    
  </entry>
  
  <entry>
    <title>Contiki-CC2538</title>
    <link href="http://cuiqingwei.github.io/2016/11/09/2016-11-09-Contiki-CC2538/"/>
    <id>http://cuiqingwei.github.io/2016/11/09/2016-11-09-Contiki-CC2538/</id>
    <published>2016-11-09T13:04:40.000Z</published>
    <updated>2016-11-15T05:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="InstantContiki3-0-for-CC2538dk"><a href="#InstantContiki3-0-for-CC2538dk" class="headerlink" title="InstantContiki3.0 for CC2538dk"></a>InstantContiki3.0 for CC2538dk</h1><p>继 <strong>2013</strong> 年<a href="http://www.amobbs.com/thread-5515866-1-1.html" target="_blank" rel="external">InstantContiki2.6 for cc2530dk</a>,再写个关于<strong>cc2538dk</strong>的。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol>
<li>下载安装预装有Contiki的 <em>InstantContiki3.0</em> Ubuntu虚拟机</li>
</ol>
<ul>
<li>可参考 -&gt;<a href="http://www.amobbs.com/thread-5515866-1-1.html" target="_blank" rel="external">InstantContiki2.6 for cc2530dk</a></li>
<li>也可见官网 -&gt; <a href="http://www.contiki-os.org/start.html" target="_blank" rel="external">http://www.contiki-os.org/start.html</a></li>
</ul>
<ol>
<li>安装驱动，一般插上板子后会自动安装（无非cp210x、pl2303、ft232、ch341），可以通过以下命令查看：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lsusb</div></pre></td></tr></table></figure>
</li>
</ol>
<p>一般会得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/contiki$ lsusb</div><div class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</div><div class="line">Bus 002 Device 014: ID 10c4:ea60 Cygnal Integrated Products, Inc. CP210x UART Bridge / myAVR mySmartUSB light</div><div class="line">Bus 002 Device 013: ID 0e0f:0008 VMware, Inc.</div><div class="line">Bus 002 Device 003: ID 0e0f:0002 VMware, Inc. Virtual USB Hub</div><div class="line">Bus 002 Device 002: ID 0e0f:0003 VMware, Inc. Virtual Mouse</div><div class="line">Bus 002 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="cc2538demo"><a href="#cc2538demo" class="headerlink" title="cc2538demo"></a><strong>cc2538demo</strong></h1><p>官方原网址：<br><a href="https://github.com/contiki-os/contiki/blob/master/platform/cc2538dk/README.md" target="_blank" rel="external">https://github.com/contiki-os/contiki/blob/master/platform/cc2538dk/README.md</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/contiki/examples/cc2538dk</div><div class="line">make</div></pre></td></tr></table></figure>
<h1 id="下载烧录-cc2538-demo-bin"><a href="#下载烧录-cc2538-demo-bin" class="headerlink" title="下载烧录 cc2538-demo.bin"></a>下载烧录 cc2538-demo.bin</h1><p><img src="/img/20161109/contiki4.png" alt=""></p>
<p>所用工具</p>
<ul>
<li><a href="http://www.ti.com/tool/flash-programmer" target="_blank" rel="external">SmartRF Flash Programmer 2</a></li>
<li><a href="http://www.ghostyu.com/product/41" target="_blank" rel="external">XDS110-Lite</a></li>
</ul>
<p>可以在window下通过smartRF Flash programmer 2来下载border-router.bin文件到cc2538中</p>
<p><img src="/img/20161109/contiki0.png" alt=""></p>
<p>也可以在Linux下通过串口bootloader安装border-router.elf，其中波特率要设置为115200,8N1。<br>如果想通过串口直接下载，需要手动的设置使能 bootloader，然后使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ makecc2538-demo.upload</div></pre></td></tr></table></figure>
<p>对于官方demo板的方法：按住select键，并复位板子。</p>
<p>另外，通过make cc2538-demo.lst 可以看到编译的信息，有助于调试代码。</p>
<h1 id="串口打印"><a href="#串口打印" class="headerlink" title="串口打印"></a>串口打印</h1><p>由于linux中换行以 <strong>\n</strong> 结尾（用minicom的可忽略）。而windows以 <strong>\r\n</strong> 结尾，在Windows中调试例程需要修改串口调试工具中的设置。</p>
<p>例如 <strong>putty</strong> 中,[ <strong>\n</strong> 转换为 <strong>\r\n</strong> ]修改设置见下图：</p>
<p><img src="/img/20161109/contiki1.png" alt=""></p>
<p>当然，还有最爱 <strong>SecureCRT</strong> 设置如下：</p>
<p><img src="/img/20161109/contiki2.png" alt=""></p>
<h1 id="rpl-border-router-边界路由器"><a href="#rpl-border-router-边界路由器" class="headerlink" title="rpl-border-router 边界路由器"></a><strong>rpl-border-router</strong> 边界路由器</h1><h3 id="1-编译"><a href="#1-编译" class="headerlink" title="1.编译"></a>1.编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/contiki/examples/ipv6/rpl-border-router</div><div class="line">make TARGET=cc2538dk</div></pre></td></tr></table></figure>
<p>##3 2.节点IEEE/RIME/IPv6地址</p>
<p>节点一般会根据它们的IEEE地址（MAC地址）来确定它们的IPV6地址，这个IEEE地址可能直接从cc2538的info页读取到，也可以通过硬编码得到，用户可以在编译的时候定义一个2字节的的值，这个值将用于IEEE地址的两个最低有效位。</p>
<p>设置IEEE地址来源——info页或者硬编码，可以通过定义 <strong>~/contiki/platform/cc2538dk/contiki-conf.h</strong> 中的 <strong>IEEE_ADDR_CONF_HARDCODED</strong> 设定<br><em>如果为0</em> ——从info页中得到；<br><em>如果为1</em> ——从硬编码中得到，即从IEEE_ADDR_CONF_ADDRESS得到。</p>
<p>当然，也可以重新定义IEEE的最低两位地址，通过：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make NODEID=0x8888</div></pre></td></tr></table></figure>
<p>此外，还可以设置使不同的节点具有不同的IEEE地址。<strong>IPv6中MAC地址不可以重复</strong>！</p>
<h3 id="3-测试ipv6-border-router"><a href="#3-测试ipv6-border-router" class="headerlink" title="3.测试ipv6 border router"></a>3.测试ipv6 border router</h3><p>（1）修改border-router.c</p>
<p>将#define DEBUG <em>DEBUG_NONE</em> 改为 #define DEBUG <strong>DEBUG_PRINT</strong></p>
<p>（2）在project-conf.h中定义了UIP的最大缓冲值（UIP_CONF_BUFFER_SIZE），可以将它改为更大或删除这句话，从而允许更多的的值。</p>
<p>（3）编译：<strong>make TARGET=cc2538dk</strong>，<em>因为不是在cc2538的工程中编译，所以需要加上目标平台</em>。</p>
<p>（4）下载烧录，参考上面。</p>
<p>（5）编译<a href="http://blog.csdn.net/gulansheng/article/details/43062191" target="_blank" rel="external">tunslip6</a>,测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd  ~/contiki/tools/</div><div class="line">make tunslip6</div><div class="line">sudo ./tunslip6 aaaa::1/64 -s /dev/ttyUSB0</div></pre></td></tr></table></figure>
<p>执行后，不出意外的话看到router的IPV6地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/contiki/tools$ sudo ./tunslip6 aaaa::1/64 -s /dev/ttyUSB0</div><div class="line">[sudo] password for user:</div><div class="line">********SLIP started on ``/dev/ttyUSB0&apos;&apos;</div><div class="line">opened tun device ``/dev/tun0&apos;&apos;</div><div class="line">ifconfig tun0 inet `hostname` mtu 1500 up</div><div class="line">ifconfig tun0 add aaaa::1/64</div><div class="line">ifconfig tun0 add fe80::0:0:0:1/64</div><div class="line">ifconfig tun0</div><div class="line">tun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  </div><div class="line">          inet addr:127.0.1.1  P-t-P:127.0.1.1  Mask:255.255.255.255</div><div class="line">          inet6 addr: fe80::1/64 Scope:Link</div><div class="line">          inet6 addr: aaaa::1/64 Scope:Global</div><div class="line">          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:500</div><div class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</div><div class="line">*** Address:aaaa::1 =&gt; aaaa:0000:0000:0000</div><div class="line">Got configuration message of type P</div><div class="line">Setting prefix aaaa::</div><div class="line">created a new RPL dag</div><div class="line">Server IPv6 addresses:</div><div class="line"> aaaa::212:4b00:5af:84e0</div><div class="line"> fe80::212:4b00:5af:84e0</div></pre></td></tr></table></figure>
<p>（6）通信测试</p>
<p><strong>Ping6</strong> 测试</p>
<p><em><font color="red">ping6 aaaa::212:4b00:5af:84e0</font></em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/6lbr/examples/cc2538dk$ ping6 aaaa::212:4b00:5af:84e0</div><div class="line">PING aaaa::212:4b00:5af:84e0(aaaa::212:4b00:5af:84e0) 56 data bytes</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=1 ttl=64 time=21.1 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=2 ttl=64 time=21.5 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=3 ttl=64 time=21.1 ms</div></pre></td></tr></table></figure>
<p>打开浏览器，地址栏输入 <a href="http://[aaaa::212:4b00:5af:84e0]/" target="_blank" rel="external">http://[aaaa::212:4b00:5af:84e0]/</a> 网页访问测试：</p>
<h3 id="节点联网"><a href="#节点联网" class="headerlink" title="节点联网"></a>节点联网</h3><p>（1）编译，下载烧录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/contiki/examples/webserver-ipv6</div><div class="line">make TARGET=cc2538dk NODEID=&lt;value&gt;</div></pre></td></tr></table></figure>
<p>（2）查看</p>
<p>打开浏览器，地址栏输入 <a href="http://[aaaa::212:4b00:5af:84e0]/" target="_blank" rel="external">http://[aaaa::212:4b00:5af:84e0]/</a> 查看节点：</p>
<p>Neighbors<br>fe80::212:4b00:5af:8444<br>Routes<br><strong>aaaa::212:4b00:5af:8444</strong> /128 (via fe80::212:4b00:5af:8444) 1792s</p>
<p><img src="/img/20161109/contiki5.png" alt=""></p>
<p>（3）ping6测</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/6lbr/examples/cc2538dk$ ping6 aaaa::212:4b00:5af:8444</div><div class="line">PING aaaa::212:4b00:5af:8444(aaaa::212:4b00:5af:8444) 56 data bytes</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=2 ttl=63 time=95.9 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=3 ttl=63 time=340 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=4 ttl=63 time=91.2 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=5 ttl=63 time=90.9 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=6 ttl=63 time=86.7 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=7 ttl=63 time=82.2 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=8 ttl=63 time=82.3 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=9 ttl=63 time=82.0 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=10 ttl=63 time=77.3 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=11 ttl=63 time=77.4 ms</div></pre></td></tr></table></figure>
<p>（4）也可 <strong>curl</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/6lbr/examples/cc2538dk$ curl -g http://[aaaa::212:4b00:5af:84e0]/</div><div class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;ContikiRPL&lt;/title&gt;&lt;/head&gt;&lt;body&gt;</div><div class="line">Neighbors&lt;pre&gt;fe80::212:4b00:5af:8444</div><div class="line">&lt;/pre&gt;Routes&lt;pre&gt;</div><div class="line">aaaa::212:4b00:5af:8444/128 (via fe80::212:4b00:5af:8444) 1773s</div></pre></td></tr></table></figure>
<p>（5）<strong>wget</strong> 下载 <em>index.html</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/6lbr/examples/cc2538dk$ wget http://[aaaa::212:4b00:5af:84e0]/</div><div class="line">--2016-11-09 07:27:24--  http://[aaaa::212:4b00:5af:84e0]/</div><div class="line">Connecting to [aaaa::212:4b00:5af:84e0]:80... connected.</div><div class="line">HTTP request sent, awaiting response... 200 OK</div><div class="line">Length: unspecified [text/html]</div><div class="line">Saving to: ‘index.html’</div><div class="line"></div><div class="line">    [ &lt;=&gt;                                   ] 192         --.-K/s   in 0.1s    </div><div class="line"></div><div class="line">2016-11-09 07:27:24 (1.59 KB/s) - ‘index.html’ saved [192]</div></pre></td></tr></table></figure>
<p> （6）半导体芯片越做越小，性能越强悍；系统协议越精减，越精简优化。webserver跑在单芯片上也就不稀奇了！</p>
<p> <img src="/img/20161109/contiki6.png" alt=""><br> <img src="/img/20161109/contiki7.png" alt=""><br> <img src="/img/20161109/contiki8.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;InstantContiki3-0-for-CC2538dk&quot;&gt;&lt;a href=&quot;#InstantContiki3-0-for-CC2538dk&quot; class=&quot;headerlink&quot; title=&quot;InstantContiki3.0 for CC2538dk&quot;&gt;&lt;/a&gt;InstantContiki3.0 for CC2538dk&lt;/h1&gt;&lt;p&gt;继 &lt;strong&gt;2013&lt;/strong&gt; 年&lt;a href=&quot;http://www.amobbs.com/thread-5515866-1-1.html&quot;&gt;InstantContiki2.6 for cc2530dk&lt;/a&gt;,再写个关于&lt;strong&gt;cc2538dk&lt;/strong&gt;的。&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;下载安装预装有Contiki的 &lt;em&gt;InstantContiki3.0&lt;/em&gt; Ubuntu虚拟机&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;可参考 -&amp;gt;&lt;a href=&quot;http://www.amobbs.com/thread-5515866-1-1.html&quot;&gt;InstantContiki2.6 for cc2530dk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;也可见官网 -&amp;gt; &lt;a href=&quot;http://www.contiki-os.org/start.html&quot;&gt;http://www.contiki-os.org/start.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;安装驱动，一般插上板子后会自动安装（无非cp210x、pl2303、ft232、ch341），可以通过以下命令查看：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ lsusb&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般会得到：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;user@instant-contiki:~/contiki$ lsusb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bus 002 Device 014: ID 10c4:ea60 Cygnal Integrated Products, Inc. CP210x UART Bridge / myAVR mySmartUSB light&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bus 002 Device 013: ID 0e0f:0008 VMware, Inc.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bus 002 Device 003: ID 0e0f:0002 VMware, Inc. Virtual USB Hub&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bus 002 Device 002: ID 0e0f:0003 VMware, Inc. Virtual Mouse&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bus 002 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Contiki" scheme="http://cuiqingwei.github.io/tags/Contiki/"/>
    
      <category term="CC2538" scheme="http://cuiqingwei.github.io/tags/CC2538/"/>
    
  </entry>
  
  <entry>
    <title>基于Contiki-Cooja的6lbr模拟仿真</title>
    <link href="http://cuiqingwei.github.io/2016/10/29/2016-10-29-%E5%9F%BA%E4%BA%8EContiki-Cooja%E7%9A%846lbr%E6%A8%A1%E6%8B%9F%E4%BB%BF%E7%9C%9F/"/>
    <id>http://cuiqingwei.github.io/2016/10/29/2016-10-29-基于Contiki-Cooja的6lbr模拟仿真/</id>
    <published>2016-10-29T13:04:40.000Z</published>
    <updated>2016-12-12T05:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Instant-Contiki-2-7"><a href="#Instant-Contiki-2-7" class="headerlink" title="Instant Contiki 2.7"></a>Instant Contiki 2.7</h1><p>下载、安装… 具体请查看链接-&gt;<a href="http://www.contiki-os.org/start.html" target="_blank" rel="external">http://www.contiki-os.org/start.html</a></p>
<h1 id="Java版本"><a href="#Java版本" class="headerlink" title="Java版本"></a>Java版本</h1><p>打开（<em>Ctrl+Alt+T</em>）超级终端，键入 <strong>java -version</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~$ java -version</div><div class="line">java version &quot;1.7.0_25&quot;</div><div class="line">OpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1ubuntu0.12.04.2)</div><div class="line">OpenJDK Client VM (build 23.7-b01, mixed mode, sharing)</div></pre></td></tr></table></figure>
<h1 id="安装网桥管理工具-bridge-utils-包"><a href="#安装网桥管理工具-bridge-utils-包" class="headerlink" title="安装网桥管理工具 bridge-utils 包"></a>安装网桥管理工具 <strong>bridge-utils</strong> 包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install bridge-utils</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="获取6lbr代码，初始化子模块"><a href="#获取6lbr代码，初始化子模块" class="headerlink" title="获取6lbr代码，初始化子模块"></a>获取<a href="http://cetic.github.com/6lbr" target="_blank" rel="external">6lbr</a>代码，初始化子模块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone --recursive https://github.com/cetic/6lbr</div><div class="line">cd 6lbr/examples/6lbr</div></pre></td></tr></table></figure>
<h1 id="在6lbr源目录，执行以下命令："><a href="#在6lbr源目录，执行以下命令：" class="headerlink" title="在6lbr源目录，执行以下命令："></a>在6lbr源目录，执行以下命令：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make TARGET=native all</div><div class="line">make tools</div></pre></td></tr></table></figure>
<h1 id="启动一个-1-BR-COOJA-实例"><a href="#启动一个-1-BR-COOJA-实例" class="headerlink" title="启动一个 1-BR COOJA 实例"></a>启动一个 <strong>1-BR COOJA</strong> 实例</h1><p><font style="font-weight:bold;" color="red">警告：</font> 默认Instant Contiki 2.7环境中没有添加serial2pty插件，添加方法是：</p>
<ul>
<li>运行cooja</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/6lbr/tools/cooja</div><div class="line">ant run</div></pre></td></tr></table></figure>
<p>Settings -&gt; External tools paths… 添加<br><strong>;[CONTIKI_DIR]/tools/cooja/apps/serial2pty</strong></p>
<p><img src="/img/20161029/6lbr1.png" alt=""></p>
<p>设置完成后，关闭。运行下面命令，启动实例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd examples/6lbr/test</div><div class="line">make cooja-small</div></pre></td></tr></table></figure></p>
<p><img src="/img/20161029/6lbr2.png" alt=""></p>
<p>运行成功，console会输出如下结尾的信息，详见下图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">INFO [main] (Serial2Pty.java:116) - serialpty;open;9;/dev/pts/11</div><div class="line">INFO [main] (Serial2Pty.java:116) - serialpty;open;10;/dev/pts/12</div><div class="line">INFO [main] (Serial2Pty.java:116) - serialpty;open;11;/dev/pts/13</div><div class="line">INFO [main] (Serial2Pty.java:116) - serialpty;open;12;/dev/pts/14</div></pre></td></tr></table></figure>
<p><img src="/img/20161029/6lbr3.png" alt=""></p>
<p>通过鼠标右击节点，也可打开其他节点的串口监控，如下图所示：</p>
<p><img src="/img/20161029/6lbr4.png" alt=""></p>
<h1 id="运行一个6lbr实例"><a href="#运行一个6lbr实例" class="headerlink" title="运行一个6lbr实例"></a>运行一个6lbr实例</h1><p>Cooja <em>Simulation control</em> 点击 <strong>Start</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd examples/6lbr/test</div><div class="line">sudo make launch-6lbr-router-1-cooja</div></pre></td></tr></table></figure>
<p>运行后，终端键入 <strong>ifconfig</strong> 会发现多了 <a href="/2015/07/06/2015-07-06-OpenWRT下ifconfig各接口说明">br0网桥接口</a></p>
<p><img src="/img/20161029/6lbr5.png" alt=""></p>
<p><strong>如果要避免重复输出</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Fetching MAC address</div><div class="line">Fetching MAC address</div></pre></td></tr></table></figure>
<p>可以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/6lbr/examples/6lbr/test/conf-templates</div><div class="line">vi cooja-1-router.conf</div></pre></td></tr></table></figure>
<p>最后两行，指定日志写入 <strong>/var/log/6lbr.log</strong>，如下图所示：</p>
<p><img src="/img/20161029/6lbr6.png" alt=""></p>
<h1 id="访问6lbr-webserver-界面"><a href="#访问6lbr-webserver-界面" class="headerlink" title="访问6lbr webserver 界面"></a>访问6lbr <strong>webserver</strong> 界面</h1><p>打开浏览器，地址栏输入 <strong>[bbbb::100]</strong> 回车，看到如下界面就算成功了！</p>
<p><img src="/img/20161029/6lbr7.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Instant-Contiki-2-7&quot;&gt;&lt;a href=&quot;#Instant-Contiki-2-7&quot; class=&quot;headerlink&quot; title=&quot;Instant Contiki 2.7&quot;&gt;&lt;/a&gt;Instant Contiki 2.7&lt;/h1&gt;&lt;p&gt;下载、安装… 具体请查看链接-&amp;gt;&lt;a href=&quot;http://www.contiki-os.org/start.html&quot;&gt;http://www.contiki-os.org/start.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Java版本&quot;&gt;&lt;a href=&quot;#Java版本&quot; class=&quot;headerlink&quot; title=&quot;Java版本&quot;&gt;&lt;/a&gt;Java版本&lt;/h1&gt;&lt;p&gt;打开（&lt;em&gt;Ctrl+Alt+T&lt;/em&gt;）超级终端，键入 &lt;strong&gt;java -version&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;user@instant-contiki:~$ java -version&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;java version &amp;quot;1.7.0_25&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1ubuntu0.12.04.2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OpenJDK Client VM (build 23.7-b01, mixed mode, sharing)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;安装网桥管理工具-bridge-utils-包&quot;&gt;&lt;a href=&quot;#安装网桥管理工具-bridge-utils-包&quot; class=&quot;headerlink&quot; title=&quot;安装网桥管理工具 bridge-utils 包&quot;&gt;&lt;/a&gt;安装网桥管理工具 &lt;strong&gt;bridge-utils&lt;/strong&gt; 包&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install bridge-utils&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Contiki" scheme="http://cuiqingwei.github.io/tags/Contiki/"/>
    
      <category term="Cooja" scheme="http://cuiqingwei.github.io/tags/Cooja/"/>
    
      <category term="6lbr" scheme="http://cuiqingwei.github.io/tags/6lbr/"/>
    
  </entry>
  
  <entry>
    <title>利用Travis CI、MkDocs自動部署Blog至GitHub Pages</title>
    <link href="http://cuiqingwei.github.io/2016/10/27/2016-10-27-%E5%88%A9%E7%94%A8Travis-CI%E3%80%81MkDocs%E8%87%AA%E5%8B%95%E9%83%A8%E7%BD%B2Blog%E8%87%B3GitHub-Pages/"/>
    <id>http://cuiqingwei.github.io/2016/10/27/2016-10-27-利用Travis-CI、MkDocs自動部署Blog至GitHub-Pages/</id>
    <published>2016-10-27T03:01:40.000Z</published>
    <updated>2016-10-27T05:38:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h1><h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>免费的静态站点，三个特点：免费托管、自带主题、支持自制页面和Jekyll。</p>
<h3 id="MkDocs"><a href="#MkDocs" class="headerlink" title="MkDocs"></a>MkDocs</h3><p><a href="http://markdown-docs-zh.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">MkDocs</a>是一个用于创建项目文档的 快速, 简单 , 完美华丽 的静态站点生成器. 文档源码使用 Markdown 来撰写, 用一个 YAML 文件作为配置文档.</p>
<h3 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h3><p><a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a>，是一个专门为开源项目打造的持续集成环境。<br>如果你有一个放在github上的开源项目，Travis CI简直就是一个完美的CI选择。<br><a id="more"></a></p>
<h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>源码存放处 <a href="https://github.com/cuiqingwei/iotknowledges" target="_blank" rel="external">https://github.com/cuiqingwei/iotknowledges</a><br>页面存放处 <a href="https://github.com/iotknowledges/iotknowledges.github.io" target="_blank" rel="external">https://github.com/iotknowledges/iotknowledges.github.io</a></p>
<font color="red">通过 <strong>Travis CI</strong> 部署的 <strong>MkDocs</strong> 环境将 <strong>iotknowledges</strong> 源码编译成静态页面并发布到 <strong>iotknowledges.github.io</strong></font>

<h3 id="1-创建一个GitHub-Pages"><a href="#1-创建一个GitHub-Pages" class="headerlink" title="1.创建一个GitHub Pages"></a>1.创建一个GitHub Pages</h3><p>  1.1 安装git工具<br>    <a href="http://windows.github.com/" target="_blank" rel="external">http://windows.github.com/</a><br>    <a href="http://mac.github.com/" target="_blank" rel="external">http://mac.github.com/</a></p>
<p>  1.2 两种pages模式</p>
<pre><code>① User/Organization Pages 个人或公司站点
  - 1) 使用自己的用户名，每个用户名下面只能建立一个；
  - 2) 资源命名必须符合这样的规则username/username.github.com；
  - 3) 主干上内容被用来构建和发布页面.
② Project Pages 项目站点
  - 1) gh-pages 分支用于构建和发布；
  - 2) 如果user/org pages使用了独立域名，那么托管在账户下的所有project pages将
       使用相同的域名进行重定向，除非project pages使用了自己的独立域名；
  - 3) 如果没有使用独立域名，project pages将通过子路径的形式提供服务username.github.com/projectname；
  - 4) 自定义404页面只能在独立域名下使用，否则会使用User Pages 404；
  - 5) 创建项目站点步骤：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/USERNAME/PROJECT.git PROJECT</div><div class="line">$ git checkout --orphan gh-pages</div><div class="line">$ git rm -rf .</div><div class="line">$ git add .</div><div class="line">$ git commit -a -m &quot;First pages commit&quot;</div><div class="line">$ git push origin gh-pages</div></pre></td></tr></table></figure>
</code></pre><p>  1.3. 可以通过User/Organization Pages建立主站，而通过Project Pages挂载二级应用页面。</p>
  <font color="blue">由于我是按照Organization名字命名的Pages，Repository名字是 <em>iotknowledges.github.io</em></font>

<p>  <img src="/img/20161027/github1.png" alt=""><br>  <img src="/img/20161027/github2.png" alt=""></p>
  <font color="blue"><strong>至此，Project Pages建立完成，用来存放MkDocs生成的静态页面！</strong></font>  

<h3 id="2-建立存放源码的Repository并关联Travis-CI"><a href="#2-建立存放源码的Repository并关联Travis-CI" class="headerlink" title="2. 建立存放源码的Repository并关联Travis CI"></a>2. 建立存放源码的Repository并关联Travis CI</h3><p>  2.1 创建iotknowledges</p>
<p>  登录GitHub，点击 <strong>New repository</strong> 新建即可，具体方法步骤多说！</p>
<p>  2.2 生成Token</p>
<p>  在GitHub账户的Settings里生成</p>
<p>  <img src="/img/20161027/github3.png" alt=""><br>  <img src="/img/20161027/github4.png" alt=""></p>
<h3 id="3-Travis-CI工程的Settings-添加环境变量"><a href="#3-Travis-CI工程的Settings-添加环境变量" class="headerlink" title="3. Travis CI工程的Settings,添加环境变量"></a>3. Travis CI工程的Settings,添加环境变量</h3><p>  登录 <a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a> 点击 <font color="green"> <strong>Sign in with GitHub</strong> </font> 用存放源码的github账号登录</p>
<p>  添加一个环境变量(Environment Variable)，命名为 <strong>GITHUB_API_KEY</strong> ，之后将刚刚生成的Token复制进去，这在之后会用到。接下来你还需要创建两个环境变量作为Push的身份，一个是你的名字，还有一个是你的邮箱，当然如果对邮箱和名字没什么隐私那不设置也可以。这两个变量可以分别命名为 <strong>GITHUB_EMAIL</strong> 和 <strong>GITHUB_NAME</strong>。GITHUB_NAME请务必注意设置成你Profile链接里的那个名字，即<a href="https://github.com/[user_name]这里这个值。设置完之后，注意要把下面那个“*Display" target="_blank" rel="external">https://github.com/[user_name]这里这个值。设置完之后，注意要把下面那个“*Display</a> value in build log<em>”关掉，否则这一安全措施就没用了。还有一点，记得把“</em>Build pull requests*”关掉，否则在有Pull Request的时候不论其是否合格都会自动将Pages更新。</p>
<p>  <img src="/img/20161027/github5.png" alt=""></p>
<h3 id="4-配置-travis-yml"><a href="#4-配置-travis-yml" class="headerlink" title="4. 配置.travis.yml"></a>4. 配置.travis.yml</h3><p>  由于MkDocs使用的是Python，所以先在文件开头加上：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">language: python</div><div class="line">python:</div><div class="line">-  3.5</div></pre></td></tr></table></figure>
<p>  这里我使用的是Python 3.5，如果有插件不兼容的话可以切换成2.7。之后是初始化设置：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">install:</div><div class="line">  - pip install mkdocs</div></pre></td></tr></table></figure>
<p>  接下来是构建：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">script:</div><div class="line">  - mkdocs build --clean</div></pre></td></tr></table></figure>
<p>  生成的最终网站会在site目录内，–clean参数保证构建的时候site文件夹内没有多余文件，否则可能会导致各种奇怪的问题。</p>
<p>  接下来就是最重要的部署环节了，脚本需要放在after_success阶段内：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">after_success:  |</div><div class="line">  if [ -n &quot;$GITHUB_API_KEY&quot; ]; then</div><div class="line">    cd &quot;$TRAVIS_BUILD_DIR&quot;</div><div class="line">    cd site</div><div class="line">    git init</div><div class="line">    git add .</div><div class="line">    git -c user.name=$GITHUB_NAME -c user.email=$GITHUB_EMAIL commit -m &quot;Auto Deployment&quot;</div><div class="line">    git push -f -q https://$GITHUB_NAME:$GITHUB_API_KEY@github.com/[user_name]/[repo_name] [branch]</div><div class="line">    cd &quot;$TRAVIS_BUILD_DIR&quot;</div><div class="line">  fi</div></pre></td></tr></table></figure>
<p>  首先上来先要保证 <strong>GITHUB_API_KEY</strong> 这个环境变量存在，之后进入到构建目录，再用相对位置进入构建好的site网站目录。接着就直接在本地创建一个repo，然后commit，push到需要的repo。注意[user_name]是repo所在的用户名，[repo_name]是GitHub Pages所在的repo。[branch]这里如果是用户或者Organization的GitHub Pages的话就填 master，如果是工程的GitHub Pages的话就填gh-pages。最后返回构建目录。</p>
<p>  由于push的时候有<font color="red"><strong>-f</strong></font>参数，GitHub上的历史都将被复写，并且因为我们是本地新创建的一个repo，所有历史都是空的，所以构建完成之后每次在GitHub上都只能看到一个commit ，如果成功的话，应该每次更新源码工程之后等一两分钟都能看到你自己在GitHub Pages所在的工程或者分支自动发送的commit，如果失败的话可以看一下下面完整的 <strong>.travis.yml</strong> 文件：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">language: python</div><div class="line">python:</div><div class="line">  -  3.5</div><div class="line">install:</div><div class="line">  - pip install mkdocs</div><div class="line">script:</div><div class="line">  - mkdocs build --clean</div><div class="line">after_success:  |</div><div class="line">  if [ -n &quot;$GITHUB_API_KEY&quot; ]; then</div><div class="line">    cd &quot;$TRAVIS_BUILD_DIR&quot;</div><div class="line">    cd site</div><div class="line">    git init</div><div class="line">    git add .</div><div class="line">    git -c user.name=$GITHUB_NAME -c user.email=$GITHUB_EMAIL commit -m &quot;Auto Deployment&quot;</div><div class="line">    git push -f -q https://$GITHUB_NAME:$GITHUB_API_KEY@github.com/iotknowledges/iotknowledges.github.io master</div><div class="line">    cd &quot;$TRAVIS_BUILD_DIR&quot;</div><div class="line">  fi</div></pre></td></tr></table></figure>
<ol>
<li><p>build 状态，提交代码后可以到 <a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a> 查看进度情况</p>
<p><img src="/img/20161027/github6.png" alt=""></p>
<p><a href="https://iotknowledges.github.io/" target="_blank" rel="external">https://iotknowledges.github.io/</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;技术要点&quot;&gt;&lt;a href=&quot;#技术要点&quot; class=&quot;headerlink&quot; title=&quot;技术要点&quot;&gt;&lt;/a&gt;技术要点&lt;/h1&gt;&lt;h3 id=&quot;GitHub-Pages&quot;&gt;&lt;a href=&quot;#GitHub-Pages&quot; class=&quot;headerlink&quot; title=&quot;GitHub Pages&quot;&gt;&lt;/a&gt;GitHub Pages&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;免费的静态站点，三个特点：免费托管、自带主题、支持自制页面和Jekyll。&lt;/p&gt;
&lt;h3 id=&quot;MkDocs&quot;&gt;&lt;a href=&quot;#MkDocs&quot; class=&quot;headerlink&quot; title=&quot;MkDocs&quot;&gt;&lt;/a&gt;MkDocs&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://markdown-docs-zh.readthedocs.io/zh_CN/latest/&quot;&gt;MkDocs&lt;/a&gt;是一个用于创建项目文档的 快速, 简单 , 完美华丽 的静态站点生成器. 文档源码使用 Markdown 来撰写, 用一个 YAML 文件作为配置文档.&lt;/p&gt;
&lt;h3 id=&quot;Travis-CI&quot;&gt;&lt;a href=&quot;#Travis-CI&quot; class=&quot;headerlink&quot; title=&quot;Travis CI&quot;&gt;&lt;/a&gt;Travis CI&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;，是一个专门为开源项目打造的持续集成环境。&lt;br&gt;如果你有一个放在github上的开源项目，Travis CI简直就是一个完美的CI选择。&lt;br&gt;
    
    </summary>
    
    
      <category term="GitHub Pages" scheme="http://cuiqingwei.github.io/tags/GitHub-Pages/"/>
    
      <category term="Travis CI" scheme="http://cuiqingwei.github.io/tags/Travis-CI/"/>
    
      <category term="MkDocs" scheme="http://cuiqingwei.github.io/tags/MkDocs/"/>
    
  </entry>
  
  <entry>
    <title>linkit-smart-7688-build</title>
    <link href="http://cuiqingwei.github.io/2016/10/16/2016-10-16-linkit-smart-7688-build/"/>
    <id>http://cuiqingwei.github.io/2016/10/16/2016-10-16-linkit-smart-7688-build/</id>
    <published>2016-10-15T16:37:40.000Z</published>
    <updated>2016-10-15T17:05:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linkit-smart-feed"><a href="#linkit-smart-feed" class="headerlink" title="linkit-smart-feed"></a>linkit-smart-feed</h1><p>This feeds holds the SDK wifi driver and the config/meta package for the LinkIt Smart 7688 (Duo)</p>
<h1 id="Build-the-firmware-from-sources"><a href="#Build-the-firmware-from-sources" class="headerlink" title="Build the firmware from sources"></a>Build the firmware from sources</h1><p>This section describes how to build the firmware for LinkIt Smart 7688 and LinkIt Smart 7688 Duo from source codes.<br><a id="more"></a></p>
<h3 id="Host-environment"><a href="#Host-environment" class="headerlink" title="Host environment"></a>Host environment</h3><p>The following operations are performed under a Ubuntu LTS 14.04.3 environment. For a Windows or a Mac OS X host computer, you can install a VM for having the same environment:</p>
<ul>
<li>Download Ubuntu 14.04.3 LTS image from <a href="http://www.ubuntu.com" target="_blank" rel="external">http://www.ubuntu.com</a></li>
<li>Install this image with VirtualBox (<a href="http://virtualbox.org" target="_blank" rel="external">http://virtualbox.org</a>) on the host machine. 50GB disk space reserved for the VM is recommanded</li>
</ul>
<h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><p>In the Ubuntu system, open the <em>Terminal</em> application and type the following commands:</p>
<ol>
<li><p>Install prerequisite packages for building the firmware:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git g++ make libncurses5-dev subversion libssl-dev gawk libxml-parser-perl unzip wget python xz-utils</div></pre></td></tr></table></figure>
</li>
<li><p>Download OpenWrt CC source codes:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git://git.openwrt.org/15.05/openwrt.git</div></pre></td></tr></table></figure>
</li>
<li><p>Prepare the default configuration file for feeds:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd openwrt</div><div class="line">$ cp feeds.conf.default feeds.conf</div></pre></td></tr></table></figure>
</li>
<li><p>Add the LinkIt Smart 7688 feed:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo src-git linkit https://github.com/MediaTek-Labs/linkit-smart-7688-feed.git &gt;&gt; feeds.conf</div></pre></td></tr></table></figure>
</li>
<li><p>Update the feed information of all available packages for building the firmware:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./scripts/feeds update</div></pre></td></tr></table></figure>
</li>
<li><p>Install all packages:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./scripts/feeds install -a</div></pre></td></tr></table></figure>
</li>
<li><p>Prepare the kernel configuration to inform OpenWrt that we want to build an firmware for LinkIt Smart 7688:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make menuconfig</div></pre></td></tr></table></figure>
<p> <strong> Select the options as below: </strong></p>
<pre><code>- Target System: `Ralink RT288x/RT3xxx`
- Subtarget: `MT7688 based boards`
- Target Profile: `LinkIt7688`
</code></pre><p> <img src="/img/20161016/1.png" alt=""></p>
<p> Save and exit (<strong><font color="red">use the deafult config file name without changing it</font></strong>)</p>
</li>
</ol>
<ol>
<li><p>Start the compilation process:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make V=99</div></pre></td></tr></table></figure>
</li>
<li><p>After the build process completes, the resulted firmware file will be under <code>bin/ramips/openwrt-ramips-mt7688-LinkIt7688-squashfs-sysupgrade.bin</code>. Depending on the H/W resources of the host environment, the build process may <strong>take more than 2 hours</strong>.</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linkit-smart-feed&quot;&gt;&lt;a href=&quot;#linkit-smart-feed&quot; class=&quot;headerlink&quot; title=&quot;linkit-smart-feed&quot;&gt;&lt;/a&gt;linkit-smart-feed&lt;/h1&gt;&lt;p&gt;This feeds holds the SDK wifi driver and the config/meta package for the LinkIt Smart 7688 (Duo)&lt;/p&gt;
&lt;h1 id=&quot;Build-the-firmware-from-sources&quot;&gt;&lt;a href=&quot;#Build-the-firmware-from-sources&quot; class=&quot;headerlink&quot; title=&quot;Build the firmware from sources&quot;&gt;&lt;/a&gt;Build the firmware from sources&lt;/h1&gt;&lt;p&gt;This section describes how to build the firmware for LinkIt Smart 7688 and LinkIt Smart 7688 Duo from source codes.&lt;br&gt;
    
    </summary>
    
    
      <category term="linkit-smart-7688" scheme="http://cuiqingwei.github.io/tags/linkit-smart-7688/"/>
    
  </entry>
  
  <entry>
    <title>路亚竿的硬度与调性你是否混淆</title>
    <link href="http://cuiqingwei.github.io/2016/10/12/2016-10-12-%E8%B7%AF%E4%BA%9A%E7%AB%BF%E7%9A%84%E7%A1%AC%E5%BA%A6%E4%B8%8E%E8%B0%83%E6%80%A7%E4%BD%A0%E6%98%AF%E5%90%A6%E6%B7%B7%E6%B7%86/"/>
    <id>http://cuiqingwei.github.io/2016/10/12/2016-10-12-路亚竿的硬度与调性你是否混淆/</id>
    <published>2016-10-12T02:27:40.000Z</published>
    <updated>2017-02-22T11:17:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路亚竿的硬度"><a href="#路亚竿的硬度" class="headerlink" title="路亚竿的硬度"></a>路亚竿的硬度</h2><p>选择路亚竿的时候大部分钓友会关注：长度、调性、外观做工质量、品牌与价格。其中“调性”普遍会被大家想到“M、ML、MH”等英文缩写，也经常有卖家或者钓友这样称呼：“这支竿是M调的，那支竿是MH调的”等等，实际上这些英文缩写说的不是路亚竿的调性而是硬度，英文称“<font color="red"><strong>Power</strong> <em>（最大负荷）</em></font>” 。</p>
<p>路亚竿的 <font color="red"><strong>硬度</strong> <em>（最大负荷）</em></font>就是我们通常说的ML、M、MH等“调性”，是指的路亚竿的最大负荷值以及适合抛投饵重的范围。路亚竿的硬度由软到硬大概分为几个等：<em>UUL-UL-L-ML-M-MH-H-XH-XXH</em>。其中“<strong>M</strong>”为分界线，以上为软，以下为硬。</p>
<p>路亚竿的硬度分类如下：<br>    UUL——Ultra Ultra light极软<br>    UL——Ultra light超软<br>    L——Light 软<br>    ML——Medium light 中软<br>    M——Medium 中等<br>    MH——Medium heavy 中硬<br>    H——Heavy 硬<br>    XH——Extra heavy 超硬<br>    XXH——Extra extra heavy 超超硬</p>
<h2 id="路亚竿的调性"><a href="#路亚竿的调性" class="headerlink" title="路亚竿的调性"></a>路亚竿的调性</h2><p>上面说了路亚竿的调性区别于硬度，但什么是路亚竿的调性呢？国内钓友对台钓竿相对比较了解，常说的台钓竿的调性如46、37、28、19调等，是表示钓竿中鱼受力时，竿身的弯曲点越来越靠近前稍。路亚竿的调性也可以这样理解，有类似的数值表示这样的参数，只是因为路亚钓法源于欧美，欧美关于调性的叫法不同而已。</p>
<p>路亚竿 <font color="red"><strong>调性</strong></font>，以英文单词“<font color="red"><strong>Action</strong></font>”表示，<font color="blue"><em>钓竿中鱼受力竿身的弯曲点越来越靠近前稍，称调性越快，反之调性越慢，以中调作为快慢调的分界线</em></font>，</p>
<p>详细介绍如下：<br>    S——Slow 慢速调<br>    MR——Medium Regular 中慢调<br>    R——Regular 中调<br>    MF——Medium Fsst 中快调<br>    F——Fast 快调<br>    F+——Fast+ 快调+<br>    XF——Extra Fast 超快调  </p>
<blockquote>
<p>路亚竿的硬度和调性，是根据不同钓场和需求设定的，不同的厂家有不同的设计理念，现在普遍流行的是快调路亚竿，竿稍纤细而灵敏，利于感知水下鱼的就饵动作，但有些厂家把竿稍越做越细？调性快就真的好么？其实不然，针对不同钓场和对象鱼，应该有不同的配置方式。比如重草区雷强钓法，此时应该选用慢调硬竿；而使用软虫钓组时，为了感知水下轻微动作则应该选择中软的快调竿等等。    </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;路亚竿的硬度&quot;&gt;&lt;a href=&quot;#路亚竿的硬度&quot; class=&quot;headerlink&quot; title=&quot;路亚竿的硬度&quot;&gt;&lt;/a&gt;路亚竿的硬度&lt;/h2&gt;&lt;p&gt;选择路亚竿的时候大部分钓友会关注：长度、调性、外观做工质量、品牌与价格。其中“调性”普遍会被大家想到“M、M
    
    </summary>
    
    
      <category term="路亚" scheme="http://cuiqingwei.github.io/tags/%E8%B7%AF%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>活鱼放血</title>
    <link href="http://cuiqingwei.github.io/2016/10/11/2016-10-11-%E6%B4%BB%E9%B1%BC%E6%94%BE%E8%A1%80/"/>
    <id>http://cuiqingwei.github.io/2016/10/11/2016-10-11-活鱼放血/</id>
    <published>2016-10-11T02:27:40.000Z</published>
    <updated>2016-12-30T01:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>鱼的鳃部是血管较集中的位置，在这里下刀比其它部位较好些。<br>用刀往两边的鳃盖下部边缘处也就是靠鱼腹部的方向用力往下切上一刀，此时流出血后放到清水中让其游动，这样能使鱼体内的血液加速流出体外，使鱼体内的血达到最少量，这样的排放后血的鱼较少鱼的腥味，在吃食上味道鲜美。<strong>其次放血后的鱼易于保鲜不易变质变坏。</strong></p>
<a id="more"></a>
<p><img src="/img/20161011/fish.jpg" alt=""></p>
<p><em>大多数人杀鱼时不懂得放血，其实杀鱼一定要记得放血，这样杀好的鱼才会鲜嫩不腥。因为鱼肉或其它肉类食材之所以会有腥味，归根到底还是血里有腥味，如果把血放掉一些腥味就会减轻许多了。</em></p>
<blockquote>
<embed src="http://player.youku.com/player.php/sid/XMTQ1Mzg4NjAwMA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鱼的鳃部是血管较集中的位置，在这里下刀比其它部位较好些。&lt;br&gt;用刀往两边的鳃盖下部边缘处也就是靠鱼腹部的方向用力往下切上一刀，此时流出血后放到清水中让其游动，这样能使鱼体内的血液加速流出体外，使鱼体内的血达到最少量，这样的排放后血的鱼较少鱼的腥味，在吃食上味道鲜美。&lt;strong&gt;其次放血后的鱼易于保鲜不易变质变坏。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="路亚" scheme="http://cuiqingwei.github.io/tags/%E8%B7%AF%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>路亚装备</title>
    <link href="http://cuiqingwei.github.io/2016/10/10/2016-10-10-%E8%B7%AF%E4%BA%9A%E8%A3%85%E5%A4%87/"/>
    <id>http://cuiqingwei.github.io/2016/10/10/2016-10-10-路亚装备/</id>
    <published>2016-10-10T02:27:40.000Z</published>
    <updated>2016-12-20T09:20:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路亚竿"><a href="#路亚竿" class="headerlink" title="路亚竿"></a>路亚竿</h1><p><strong><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.Jvl32R&amp;id=520196909891&amp;_u=c154cj1987f" target="_blank" rel="external">LRT702MHC</a></strong>  <em>领峰 2015款 魂系列  订制版一体式软木柄</em></p>
<blockquote>
<p>真正意义上的软饵以及岸钓远投竿，拥有超敏锐的快调竿尖和强有力的竿身不单只是精确抛投，<br>更是拥有良好感知水底结构的能力和从咬口开始一气呵成将鱼从水底拔出来的迸发力。<br>并且拥有20克亮片80+直线距离的远投能力。</p>
</blockquote>
<a id="more"></a>
<p><img src="/img/20161010/LRT702MHC.jpg" alt=""></p>
<p> <strong><a href="https://item.taobao.com/item.htm?spm=a1z0k.6846577.0.0.lvKUtC&amp;id=38551093007&amp;_u=t2dmg8j26111" target="_blank" rel="external">CWS702MH</a></strong> <em>Berkley /美国贝克力</em></p>
<p> <img src="/img/20161010/CWS702MH.png" alt=""></p>
<p><strong><a href="https://detail.tmall.com/item.htm?id=36807472493&amp;spm=a1z09.2.0.0.uapaU2&amp;_u=c154cj1d09c" target="_blank" rel="external">LMS001-662M</a></strong> <em>鱼猎人征途系列</em></p>
<p><img src="/img/20161010/LMS001-662M.jpg" alt=""></p>
<p><strong><a href="https://item.taobao.com/item.htm?spm=a1z0d.6639537.1997196601.113.Q7PwbK&amp;id=522011254955" target="_blank" rel="external">LYNN FISHING LURE/小林路亚 2.03米枪柄</a></strong></p>
<p><img src="/img/20161010/LYNN-L.jpg" alt=""></p>
<h1 id="渔线轮"><a href="#渔线轮" class="headerlink" title="渔线轮"></a>渔线轮</h1><p><strong><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.uapaU2&amp;id=525599654852&amp;_u=c154cj1c6bf" target="_blank" rel="external">TATULA CT TYPE R 100HS</a></strong>  <em>DAIWA大蜘蛛美版水滴轮</em></p>
<p><img src="/img/20161010/TATULA-CT-100HS.jpg" alt=""></p>
<p><strong><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.uapaU2&amp;id=14816583709&amp;_u=c154cj143ab" target="_blank" rel="external">SIENNA 2500FD</a></strong> <em>禧玛诺4轴纺车渔轮 买来西亚产</em></p>
<p><img src="/img/20161010/SN2500FD.jpg" alt=""></p>
<p><strong><a href="https://item.taobao.com/item.htm?spm=a1z0d.6639537.1997196601.42.Q7PwbK&amp;id=7704001910" target="_blank" rel="external">RYOGA 1016</a></strong> <em>DAIWA达瓦顶级鼓轮</em></p>
<blockquote>
<p>可选替换部件：</p>
<ol>
<li>Daiwa (达亿瓦) RCSB线杯 鼓式轮适用</li>
<li>Daiwa (达亿瓦) RCSB 单柄摇柄 鼓式轮适用</li>
<li>Daiwa (达亿瓦) RCSB 双柄摇柄 鼓式轮适用</li>
</ol>
</blockquote>
<p><img src="/img/20161010/RYOGA.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;路亚竿&quot;&gt;&lt;a href=&quot;#路亚竿&quot; class=&quot;headerlink&quot; title=&quot;路亚竿&quot;&gt;&lt;/a&gt;路亚竿&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://item.taobao.com/item.htm?spm=a1z09.2.0.0.Jvl32R&amp;amp;id=520196909891&amp;amp;_u=c154cj1987f&quot;&gt;LRT702MHC&lt;/a&gt;&lt;/strong&gt;  &lt;em&gt;领峰 2015款 魂系列  订制版一体式软木柄&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真正意义上的软饵以及岸钓远投竿，拥有超敏锐的快调竿尖和强有力的竿身不单只是精确抛投，&lt;br&gt;更是拥有良好感知水底结构的能力和从咬口开始一气呵成将鱼从水底拔出来的迸发力。&lt;br&gt;并且拥有20克亮片80+直线距离的远投能力。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路亚" scheme="http://cuiqingwei.github.io/tags/%E8%B7%AF%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>Kali Linux Live USB on MAC</title>
    <link href="http://cuiqingwei.github.io/2016/10/10/2016-10-10-Kali-Linux-Live-USB-on-MAC/"/>
    <id>http://cuiqingwei.github.io/2016/10/10/2016-10-10-Kali-Linux-Live-USB-on-MAC/</id>
    <published>2016-10-09T18:27:40.000Z</published>
    <updated>2016-10-15T12:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>download Kali Linux iso images from <a href="http://www.kali.org/downloads/" target="_blank" rel="external">http://www.kali.org/downloads/</a></li>
<li>Format the usb stick in disk utility as msdos</li>
<li>Open Terminal Window and run the following</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">➜  ~ diskutil list</div><div class="line">/dev/disk0 (internal, physical):</div><div class="line">   <span class="comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span></div><div class="line">   0:      GUID_partition_scheme                        *128.0 GB   disk0</div><div class="line">   1:                        EFI EFI                     209.7 MB   disk0s1</div><div class="line">   2:                  Apple_HFS OS X                    127.2 GB   disk0s2</div><div class="line">   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3</div><div class="line">/dev/disk1 (internal, physical):</div><div class="line">   <span class="comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span></div><div class="line">   0:      GUID_partition_scheme                        *500.1 GB   disk1</div><div class="line">   1:                        EFI EFI                     209.7 MB   disk1s1</div><div class="line">   2:                  Apple_HFS WORK                    400.0 GB   disk1s2</div><div class="line">   3:                  Apple_HFS DATA                    99.6 GB    disk1s3</div><div class="line">/dev/disk2 (external, physical):</div><div class="line">   <span class="comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span></div><div class="line">   0:     FDisk_partition_scheme                        *8.0 GB     disk2</div><div class="line">   1:                 DOS_FAT_32 KALI                    8.0 GB     disk2s1</div></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li>my USB device is /dev/disk2, Then unmount disk by diskutil command</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~ diskutil umountDisk /dev/disk2</div><div class="line">Unmount of all volumes on disk2 was successful</div></pre></td></tr></table></figure>
<ol>
<li>You may have to run this as sudo</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo dd <span class="keyword">if</span>=kali-linux-2016.2-amd64.iso of=/dev/disk2 bs=512 conv=noerror,sync</div><div class="line">6009312+0 records <span class="keyword">in</span></div><div class="line">6009312+0 records out</div><div class="line">3076767744 bytes transferred <span class="keyword">in</span> 2227.332489 secs (1381369 bytes/sec)</div></pre></td></tr></table></figure>
<p>Waiting for complete<br>When It success</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;download Kali Linux iso images from &lt;a href=&quot;http://www.kali.org/downloads/&quot;&gt;http://www.kali.org/downloads/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Format the usb stick in disk utility as msdos&lt;/li&gt;
&lt;li&gt;Open Terminal Window and run the following&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;➜  ~ diskutil list&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/disk0 (internal, physical):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   0:      GUID_partition_scheme                        *128.0 GB   disk0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   1:                        EFI EFI                     209.7 MB   disk0s1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   2:                  Apple_HFS OS X                    127.2 GB   disk0s2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/disk1 (internal, physical):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   0:      GUID_partition_scheme                        *500.1 GB   disk1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   1:                        EFI EFI                     209.7 MB   disk1s1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   2:                  Apple_HFS WORK                    400.0 GB   disk1s2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   3:                  Apple_HFS DATA                    99.6 GB    disk1s3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/disk2 (external, physical):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   0:     FDisk_partition_scheme                        *8.0 GB     disk2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   1:                 DOS_FAT_32 KALI                    8.0 GB     disk2s1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="kali-linux" scheme="http://cuiqingwei.github.io/tags/kali-linux/"/>
    
  </entry>
  
  <entry>
    <title>路亚绑法</title>
    <link href="http://cuiqingwei.github.io/2016/10/09/2016-10-09-%E8%B7%AF%E4%BA%9A%E7%BB%91%E6%B3%95/"/>
    <id>http://cuiqingwei.github.io/2016/10/09/2016-10-09-路亚绑法/</id>
    <published>2016-10-09T02:27:40.000Z</published>
    <updated>2016-12-29T15:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渔轮绑法"><a href="#渔轮绑法" class="headerlink" title="渔轮绑法"></a>渔轮绑法</h1><p><img src="/img/20161009/渔轮上线绑法.jpg" alt=""></p>
<a id="more"></a>
<p><img src="/img/20161009/渔轮上线绑法1.jpg" alt=""></p>
<h1 id="路亚饵绑法"><a href="#路亚饵绑法" class="headerlink" title="路亚饵绑法"></a>路亚饵绑法</h1><ol>
<li>帕罗玛扣（Palomar Knot）</li>
</ol>
<p><img src="/img/20161009/帕罗玛扣.jpg" alt=""><br><img src="/img/20161009/帕罗玛扣8字环.jpg" alt=""></p>
<ol>
<li>圣地亚哥果酱扣（San Diego Jam Knot）</li>
</ol>
<p><img src="/img/20161009/圣地亚哥果酱扣.jpg" alt=""></p>
<blockquote>
<p>参考视频（28分处开始看）<br><a href="http://player.youku.com/player.php/Type/Folder/Fid//Ob//sid/XODYzMjE2ODAw/v.swf" target="_blank" rel="external">http://player.youku.com/player.php/Type/Folder/Fid//Ob//sid/XODYzMjE2ODAw/v.swf</a></p>
</blockquote>
<h1 id="前导线绑法"><a href="#前导线绑法" class="headerlink" title="前导线绑法"></a>前导线绑法</h1><p><img src="/img/20161009/前导线绑法.gif" alt=""><br><img src="/img/20161009/前导线绑法.jpg" alt=""></p>
<h1 id="曲柄钩绑法"><a href="#曲柄钩绑法" class="headerlink" title="曲柄钩绑法"></a>曲柄钩绑法</h1><p><img src="/img/20161009/曲柄钩绑法.jpg" alt=""></p>
<blockquote>
<p><strong>参考链接</strong><br>什么是曲柄钩 <a href="http://www.aidiao.com/baike/3171.html" target="_blank" rel="external">http://www.aidiao.com/baike/3171.html</a><br>曲柄钩绑法 <a href="http://www.diaoyu123.com/luyarumen/87864.html" target="_blank" rel="external">http://www.diaoyu123.com/luyarumen/87864.html</a><br>德州钓组 <a href="http://www.rensheng2.com/150000/141260.shtml" target="_blank" rel="external">http://www.rensheng2.com/150000/141260.shtml</a><br>最容易的倒钓组绑法 <a href="http://www.lure123.com/news/0/550-1.shtml" target="_blank" rel="external">http://www.lure123.com/news/0/550-1.shtml</a><br>视屏演示 <a href="http://v.ku6.com/show/K91_Gmh5Vi-0TKEgDnCvSg...html?from=my" target="_blank" rel="external">http://v.ku6.com/show/K91_Gmh5Vi-0TKEgDnCvSg...html?from=my</a></p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><strong>Fishing Knots</strong> <em><a href="http://www.netknots.com/fishing_knots" target="_blank" rel="external">http://www.netknots.com/fishing_knots</a></em><br><strong>路亚鱼线的绑法</strong> <em><a href="http://www.diaoyur.com/a/2013/1140.html" target="_blank" rel="external">http://www.diaoyur.com/a/2013/1140.html</a></em><br><strong>小汐打GT节</strong>  <em><a href="http://v.youku.com/v_show/id_XODg5MzExMzQw.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XODg5MzExMzQw.html</a></em><br><strong>简单快速的前导线结AK结</strong> <em><a href="http://v.youku.com/v_show/id_XNzMwNjU1NDYw.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XNzMwNjU1NDYw.html</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;渔轮绑法&quot;&gt;&lt;a href=&quot;#渔轮绑法&quot; class=&quot;headerlink&quot; title=&quot;渔轮绑法&quot;&gt;&lt;/a&gt;渔轮绑法&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/20161009/渔轮上线绑法.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="路亚" scheme="http://cuiqingwei.github.io/tags/%E8%B7%AF%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>OpenWRT开源硬件汇总</title>
    <link href="http://cuiqingwei.github.io/2016/10/08/2016-10-08-OpenWRT%E5%BC%80%E6%BA%90%E7%A1%AC%E4%BB%B6%E6%B1%87%E6%80%BB/"/>
    <id>http://cuiqingwei.github.io/2016/10/08/2016-10-08-OpenWRT开源硬件汇总/</id>
    <published>2016-10-08T09:23:37.000Z</published>
    <updated>2016-10-08T12:15:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arduino-Yun"><a href="#Arduino-Yun" class="headerlink" title="Arduino Yún"></a>Arduino Yún</h1><p><a href="https://www.arduino.cc/en/Main/ArduinoBoardYun" target="_blank" rel="external">https://www.arduino.cc/en/Main/ArduinoBoardYun</a><br>cpu: Atheros AR9331 @400MHZ (含ATmega32U4)<br>ram:  64MB DDR2<br>flash: 16MB<br>wifi: 150Mbit Wi-Fi 1T1R 2.4 GHz</p>
<h1 id="LinkIt-Smart-7688-Duo"><a href="#LinkIt-Smart-7688-Duo" class="headerlink" title="LinkIt Smart 7688 Duo"></a>LinkIt Smart 7688 Duo</h1><p><a href="https://www.seeedstudio.com/LinkIt-Smart-7688-Duo-p-2574.html" target="_blank" rel="external">https://www.seeedstudio.com/LinkIt-Smart-7688-Duo-p-2574.html</a><br>cpu: MT7688 @580MHZ (含ATmega32U4)<br>ram:  128MB DDR2<br>flash: 32MB<br><a id="more"></a></p>
<h1 id="IntoRobot-Atom"><a href="#IntoRobot-Atom" class="headerlink" title="IntoRobot Atom"></a>IntoRobot Atom</h1><p><a href="http://shop.intorobot.com/index.php?route=product/product&amp;product_id=43" target="_blank" rel="external">http://shop.intorobot.com/index.php?route=product/product&amp;product_id=43</a><br>cpu: MT7620N @580MHZ (含STM32F103)<br>ram:  512Mbit DDR2<br>flash: 128Mbit</p>
<h1 id="WRTnode"><a href="#WRTnode" class="headerlink" title="WRTnode"></a>WRTnode</h1><p><a href="http://www.wrtnode.cc/index.html" target="_blank" rel="external">http://www.wrtnode.cc/index.html</a><br>-WRTnode1<br>cpu: MT7620N @580MHZ<br>ram:  512Mbit DDR2<br>flash: 128Mbit<br>wifi: 300Mbit Wi-Fi 2T2R 802.11n 2.4 GHz<br>-WRTnode2R<br>cpu: MT7688AN @580MHZ (含STM32F103)<br>ram:  256MB DDR2<br>flash: 32MB<br>-WRTnode2P<br>cpu: MT7628 @580MHZ<br>ram:  128MB DDR2<br>flash: 16MB<br>-WRTnodeHI<br>cpu: ARM Cortex A7 @600MHZ 支持Neon加速，集成FPU<br>ram:  512MB DDR3<br>flash: 32MB</p>
<h1 id="MMZ558"><a href="#MMZ558" class="headerlink" title="MMZ558"></a>MMZ558</h1><p><a href="http://www.compex.com.sg/product/mmz558/" target="_blank" rel="external">http://www.compex.com.sg/product/mmz558/</a><br>cpu:   QCA9558 @700MHZ<br>ram:  128MB DDR2<br>flash: 16MB</p>
<h1 id="WPJ428"><a href="#WPJ428" class="headerlink" title="WPJ428"></a>WPJ428</h1><p><a href="http://www.compex.com.sg/product/wpj428/" target="_blank" rel="external">http://www.compex.com.sg/product/wpj428/</a><br>cpu:   IPQ4028 ARM V7 @710MHZ<br>ram:  256MB DDR2<br>flash: 16MB<br>NAND flasn: 128MB</p>
<h1 id="AmazingBOX"><a href="#AmazingBOX" class="headerlink" title="AmazingBOX"></a>AmazingBOX</h1><p><a href="http://www.a-box.com.cn/product.php" target="_blank" rel="external">http://www.a-box.com.cn/product.php</a><br>cpu:   Marvell Armada370 @1.2GHZ 含FPU，双流水线技术<br>ram:  1GB DDR3<br>flash: 1GB</p>
<h1 id="RTNAS-V3"><a href="#RTNAS-V3" class="headerlink" title="RTNAS V3"></a>RTNAS V3</h1><p><a href="http://www.openwrt.org.cn/bbs/thread-15472-1-1.html" target="_blank" rel="external">http://www.openwrt.org.cn/bbs/thread-15472-1-1.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Arduino-Yun&quot;&gt;&lt;a href=&quot;#Arduino-Yun&quot; class=&quot;headerlink&quot; title=&quot;Arduino Yún&quot;&gt;&lt;/a&gt;Arduino Yún&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.arduino.cc/en/Main/ArduinoBoardYun&quot;&gt;https://www.arduino.cc/en/Main/ArduinoBoardYun&lt;/a&gt;&lt;br&gt;cpu: Atheros AR9331 @400MHZ (含ATmega32U4)&lt;br&gt;ram:  64MB DDR2&lt;br&gt;flash: 16MB&lt;br&gt;wifi: 150Mbit Wi-Fi 1T1R 2.4 GHz&lt;/p&gt;
&lt;h1 id=&quot;LinkIt-Smart-7688-Duo&quot;&gt;&lt;a href=&quot;#LinkIt-Smart-7688-Duo&quot; class=&quot;headerlink&quot; title=&quot;LinkIt Smart 7688 Duo&quot;&gt;&lt;/a&gt;LinkIt Smart 7688 Duo&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.seeedstudio.com/LinkIt-Smart-7688-Duo-p-2574.html&quot;&gt;https://www.seeedstudio.com/LinkIt-Smart-7688-Duo-p-2574.html&lt;/a&gt;&lt;br&gt;cpu: MT7688 @580MHZ (含ATmega32U4)&lt;br&gt;ram:  128MB DDR2&lt;br&gt;flash: 32MB&lt;br&gt;
    
    </summary>
    
    
      <category term="OpenWRT" scheme="http://cuiqingwei.github.io/tags/OpenWRT/"/>
    
      <category term="开源硬件" scheme="http://cuiqingwei.github.io/tags/%E5%BC%80%E6%BA%90%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>拟饵手法</title>
    <link href="http://cuiqingwei.github.io/2016/10/08/2016-10-08-%E6%8B%9F%E9%A5%B5%E6%89%8B%E6%B3%95/"/>
    <id>http://cuiqingwei.github.io/2016/10/08/2016-10-08-拟饵手法/</id>
    <published>2016-10-08T02:27:40.000Z</published>
    <updated>2016-12-29T13:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="全泳层饵的泳层基础知识"><a href="#全泳层饵的泳层基础知识" class="headerlink" title="全泳层饵的泳层基础知识"></a>全泳层饵的泳层基础知识</h3><p>全泳层饵，顾名思义，理论上可以作钓所有水层，从水表到水底，钓者有完全的决定权，这与 <strong>米诺[MINNOW]</strong> 或 <strong>摇滚[CRANK]</strong> 有明确的潜行深度明显不同。</p>
<blockquote>
<p>沉水铅笔、VIB、各类金属饵，都是全泳层饵。</p>
</blockquote>
<a id="more"></a>
<p><img src="/img/20161008/全泳层饵1.png" alt=""></p>
<p><strong>设定目标水层</strong> 全泳层饵理论上是全泳层，但到了实战的时候，钓者的每一次抛投都必定有一个目标水层，可以是多少米深，也可以只是一个读数。准确到达预设的目标水层是全泳层饵操控的灵魂！</p>
<p>确定作钓目标水层深度可以采取读秒或者读数法。</p>
<ul>
<li>读秒法</li>
</ul>
<p>在明确了解饵的下沉速度时，用读秒法可以确定水层并估测水深。如“诡道4#”的80mm沉水铅笔，每2秒下沉1m，如果抛出触底读秒是8，那么水深大致就在4m左右，当你把目标水层设定在离底1m时，抛出后读秒到6就正好到达目标水层。</p>
<ul>
<li>读数法</li>
</ul>
<p>目标水层就是你内心的一个读数，和饵的下沉速度无关，可以任意运用到任何一款全泳层饵。抛出全泳层饵后即以你最喜欢的节奏稳定读数，触底时的读数就是深度。如读数是20，深度就是20，如果目标水层设定在下层，则饵落水后读到17-18就OK了，读到19就搜底了，如果想钓中层，读到10就OK。在这里水深多少米已经没有了意义。</p>
<p><img src="/img/20161008/全泳层饵2.png" alt=""></p>
<p><strong>确定收线速度</strong> 收线快慢直接决定饵行进过程中泳层的变化！快了泳层变浅，游向水面；慢了泳层变深，往水底钻。具体情况因饵的不同而不同，需要作钓者体验感知。</p>
<p>通常情况下，自重比较大的全泳层饵需要相对比较快的速度才能保持在一定的泳层，比如各类大克重的金属饵，必须以高速操控，因此在鱼活性不高的时候，效果有限，而对于翘嘴鲌这类目标鱼，实战中低速操控往往比高速状态更具诱惑性；反之，比重相对轻的全泳层饵，如沉水铅笔，收线速度很慢也能保持一定的泳层，呈现优异的泳姿，这在低水温环境或者目标鱼活性不高时，尤其重要，特别适合翘嘴鲌作钓。</p>
<h3 id="VIB"><a href="#VIB" class="headerlink" title="VIB"></a>VIB</h3><p><img src="/img/20161008/VIB1.png" alt=""></p>
<p>竿尖上举和下指，对于VIB的操控来说你会有明显不同的感觉。上举时，震颤感更加明显，即便慢速收线时也有强烈手感，让你敏锐准确地掌控饵在水下的状态。</p>
<p><img src="/img/20161008/VIB2.png" alt=""></p>
<p>VIB是全泳层饵，抛出后等待时间的不同，让VIB下沉的深度也不同，实战中根据需要确定目标水层。<em>具体请参阅“全泳层饵的泳层基础知识”</em></p>
<p><img src="/img/20161008/VIB3.png" alt=""></p>
<p>对于颤游也可以在路亚抛出后让其自由下沉至轻轻触底，随后竿尖朝下缓缓收线，水底的路亚似一条无悠无虑觅食的小鱼，随后抬高竿尖，迅速轻轻一抽，路亚就似猛地受惊向上逃窜的小鱼，瞬间就勾起庸懒的猎食者最疯狂的追咬！VIB易挂底，因此钓线建议用2＃的PE＋5＃碳前导，这样挽救的机会比较大。</p>
<blockquote>
<p>逗逗vib</p>
</blockquote>
<p><img src="/img/20161008/逗逗VIB.jpg" alt=""><br><img src="/img/20161008/逗逗VIB1.jpg" alt=""><br><img src="/img/20161008/逗逗VIB2.jpg" alt=""></p>
<h3 id="沉水铅笔"><a href="#沉水铅笔" class="headerlink" title="沉水铅笔"></a>沉水铅笔</h3><p><img src="/img/20161008/沉水铅笔.jpg" alt=""></p>
<blockquote>
<p>沉水铅笔最致命的杀伤力就是能够完美实现作钓者随心所欲的操控，真正体现你的作钓思路。<br>铅笔、米诺和颤游的强强联合，表层到底部，不论何种方式操控，中鱼！匀速收线，缓慢摇摆，如毫无戒心游着的小鱼，猎食鱼岂肯错过；小抽猛拉，如鱼逃窜，高频小抽特别是“狗步”操控时，如同垂死的小鱼最后无力的挣扎，而猛拉再稍加停顿时，又如四处游逃还被吓呆的小鱼，诱惑无可抵挡；下沉自颤，头部下倾，加上腹尾两枚银色三本钩鱼鳍般的同频颤动，目标鱼最易从腹下发动雷霆一击，多数腹钩中鱼，而“自沉”配合“匀收”或“小抽”，则可在水层中进行“W”搜索，全泳层出击!  </p>
</blockquote>
<h4 id="沉水铅笔的慢速平拖搜索（路亚翘嘴强力推荐）-难度系数★"><a href="#沉水铅笔的慢速平拖搜索（路亚翘嘴强力推荐）-难度系数★" class="headerlink" title="沉水铅笔的慢速平拖搜索（路亚翘嘴强力推荐）　难度系数★"></a>沉水铅笔的慢速平拖搜索（路亚翘嘴强力推荐）　<em>难度系数★</em></h4><p><img src="/img/20161008/沉水铅笔1.png" alt=""></p>
<p><strong>搜索中上层</strong> 路亚抛出后即收或者稍等再匀速收线，多数情况下竿尖向下或水平，匀速缓速收线，不需要任何点抽的动作，保持匀速，这在作钓翘嘴过程中非常有效，对轻易不肯就饵的压力鱼尤其有效，低水温环境下作钓也有出色表现！</p>
<ol>
<li><p>沉水铅笔抛出后等待时间的长短，直接决定了沉水铅笔的搜索水层，等待时间越长，路亚下沉深度越大，搜索的目标水层就越深。</p>
</li>
<li><p>具体操控时，如果水下深浅变化比较均匀，但平收过程中却有触底、挂底、挂水草或螺蛳等，说明收线速度偏慢，铅笔无法保持一定的水层，潜行深度不断增加直至探底。</p>
</li>
<li><p>如果掌控了一定的收线速度并能使铅笔保持在一定的水层后，在平收过程中如果发生挂底或挂草等情形，则说明水下存在一定的深浅变化结构，而这样的区域则是路亚精细作钓时，需要重点搜索的区域。</p>
</li>
</ol>
<p><img src="/img/20161008/沉水铅笔2.png" alt=""></p>
<p><strong>搜索近底层</strong> 路路亚抛出触底后，轻轻向上一挑，保持一定的速度匀速收线，在触底时竿尖向上轻轻一挑后继续收线。如果收线感觉异样，可能是挂到水底杂物，需要立即收回重抛，挂到杂物的饵是没鱼攻击的。</p>
<p>当在近底平收过程中一到某点就发生触底情形，则说明水下存在一定的由深急浅结构，而如果此前频频有触底，一到某区域就完全没有触底的感觉，则可能是由浅急深。这些区域都是路亚精细作钓时，需要重点搜索的区域。</p>
<p>探明这样的水下结构后，对于由浅急深区域，可以有意暂停收线待饵自颤下沉后再向上挑竿带起，在下沉和上挑过程中均有极高的中鱼机率。而对于由深急浅的结构，在撞到结构前或者撞到结构后，轻轻带起铅笔，往往在挑竿的时候会有令人惊喜的一击！</p>
<h4 id="沉水铅笔的M型搜索-难度系数★★"><a href="#沉水铅笔的M型搜索-难度系数★★" class="headerlink" title="沉水铅笔的M型搜索　难度系数★★"></a>沉水铅笔的M型搜索　<em>难度系数★★</em></h4><p><img src="/img/20161008/沉水铅笔3.png" alt=""></p>
<p>路亚抛出后稍等下沉，视需要下沉到一定深度后，人面向水面，收紧余线，向上扬竿，力度视情况需要，可重可轻，然后放下竿尖松线，再让路亚下沉；路亚搜索深度范围很大，适合大水面搜索鱼所在泳层，在鱼索饵意愿不积极时，这种轻缓的手法非常有效。</p>
<p><img src="/img/20161008/沉水铅笔4.png" alt=""></p>
<p>上图操作手法的变式，在路亚下沉到目标水层后，先连续两下轻抽钓竿，随后向上高高扬竿，在这连续三抽过程中，卷线器是不收线的，随后放低竿子再收紧余线。这种操作手法，逼真模拟小鱼逃窜，运用到搜索底层时，效果非凡，鳜鱼类的也特别喜欢攻击。使用这个操作时，手法宜轻缓，这样在目标鱼警戒心高或者活力较低的冬天时，会收到出其不意的效果。</p>
<h4 id="沉水铅笔的侧身快抽-难度系数★★"><a href="#沉水铅笔的侧身快抽-难度系数★★" class="headerlink" title="沉水铅笔的侧身快抽　难度系数★★"></a>沉水铅笔的侧身快抽　<em>难度系数★★</em></h4><p><img src="/img/20161008/沉水铅笔5.png" alt=""></p>
<p>最常用的操控方式，抛出让沉水铅笔到达目标水层后，侧身横抽，挥动竿尖幅度每次约50cm，复位，收紧余线，隔一秒再抽一次，如此反复。与“M”型操控不同的是，路亚表现出水平方向上的左窜右逃的交替，似小鱼毫无戒心的游玩，攻取水库、湖泊的翘嘴鲌效果突出，对于海水类目标鱼就如岸投小铁板，效果亦佳。</p>
<p><img src="/img/20161008/沉水铅笔6.png" alt=""></p>
<p>上图操作手法的变式，也是侧身横抽，但幅度变小，每次约20cm，频率加快到一秒一次，此时即便是沉水铅笔，也是贴水表急窜，在群鱼争食的活跃期最受欢迎，中鱼率明显高出许多。这个手法抽动的力度大一些时，经常能“车祸”各种鱼，尤以鲢鱼为多，勿忘放流。</p>
<h3 id="浮水铅笔"><a href="#浮水铅笔" class="headerlink" title="浮水铅笔"></a>浮水铅笔</h3><p><img src="/img/20161008/浮水铅笔.jpg" alt=""></p>
<blockquote>
<p>浮水铅笔的“狗步/dogwalk”操控</p>
</blockquote>
<p><img src="/img/20161008/浮水铅笔1.png" alt=""></p>
<p>路亚抛出后，面向水面，收紧余线，轻抖腕缓劲地向下一压竿尖，竿尖幅度大约20-30cm，托竿向上复位，同时小收一圈或半圈线（纺车轮四分之一或三分之一圈），一定注意不能多收，再抖腕轻轻向下一压，一压一托共一秒，连续不断。整组动作有如推太极，毫不费力，假如几竿下来就手酸，那么操作就有问题。“溜狗步”最大的困难是收线与抽竿的不配合，初期练习时，可以在收紧余线后，侧身向后按上面节奏抽竿不收线，观察狗步状态，再用心揣摩练习。</p>
<p><img src="/img/20161008/浮水铅笔2.png" alt=""></p>
<p>与上图操作相比，加快频率，一秒2抽，减小幅度，每次约10cm，同时抽竿时略带力度，收线节奏与抽竿保持同步，连续不断，要领也是收线与抽竿的配合，此时的浮水铅笔表现在水面小幅急速左右摆，动静非常大，能够将远处的鱼诱惑过来一通猛咬，对大口鲈、海鲈、鳡鱼有特别的诱惑力，但这个钓法对翘嘴似乎效果不好–除非大水面翘嘴群集争食。</p>
<h3 id="波趴（Popper）"><a href="#波趴（Popper）" class="headerlink" title="波趴（Popper）"></a>波趴（Popper）</h3><p><img src="/img/20161008/ropper.jpg" alt=""></p>
<p>如果你从来没有操控过波扒或者总感觉不好，那么，请你先打一个响指，对，响指！用心感受发力的方式，随后，轻握拳抖腕（注意是抖腕，而不是挥动手臂），找到刚刚打响指时发力的感觉，多试几次，这就是波扒操控的核心！找一枝M或MH的竿子来试试吧！</p>
<p><img src="/img/20161008/ropper1.png" alt=""></p>
<p>最常用的操作，竿尖指水收紧钓线，短程发力抽竿后再卷线，1秒1抽，抽竿幅度每次约20-40cm，使波扒前进的距离短（约10cm)但撞出的水花大，整个操作要有节奏，力度恰当，末端发力，每次收线要少。此时波扒表现在前进方向上左右两侧交替撞水，动静非常大，诱惑力超凡！</p>
<p><img src="/img/20161008/ropper2.png" alt=""></p>
<p>竿尖指水，抽动的力度与幅度增大，每次的间隔时间延长至1-2秒，波扒呈现一定的钻水动作，水花减少，但水下气泡显著增多，在目标鱼活性较低或者警觉性较高时，有非常出色的效果。</p>
<blockquote>
<p>推荐链接</p>
</blockquote>
<p><a href="http://www.lure123.com/school/25/212-1.shtml" target="_blank" rel="external">认识常用路亚假饵及操作手法</a><br><a href="http://www.diaoyur.com/a/2013/1198.html" target="_blank" rel="external">路亚一些假饵的操作方法图文介绍</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;全泳层饵的泳层基础知识&quot;&gt;&lt;a href=&quot;#全泳层饵的泳层基础知识&quot; class=&quot;headerlink&quot; title=&quot;全泳层饵的泳层基础知识&quot;&gt;&lt;/a&gt;全泳层饵的泳层基础知识&lt;/h3&gt;&lt;p&gt;全泳层饵，顾名思义，理论上可以作钓所有水层，从水表到水底，钓者有完全的决定权，这与 &lt;strong&gt;米诺[MINNOW]&lt;/strong&gt; 或 &lt;strong&gt;摇滚[CRANK]&lt;/strong&gt; 有明确的潜行深度明显不同。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;沉水铅笔、VIB、各类金属饵，都是全泳层饵。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路亚" scheme="http://cuiqingwei.github.io/tags/%E8%B7%AF%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>路亚术语</title>
    <link href="http://cuiqingwei.github.io/2016/10/08/2016-10-08-%E8%B7%AF%E4%BA%9A%E6%9C%AF%E8%AF%AD/"/>
    <id>http://cuiqingwei.github.io/2016/10/08/2016-10-08-路亚术语/</id>
    <published>2016-10-08T01:27:40.000Z</published>
    <updated>2017-02-22T11:05:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>路亚</strong> 钓鱼取名来源为 <strong>Lure</strong> 的音译，即 <em>假饵钓鱼</em>，是模仿弱小生物引发大鱼攻击的一种方法。讲究技巧，需要竿、饵、轮的综合操作。在整个过程中，钓者是在做全身运动，同时路亚装备简洁，干净环保，与传统钓法有着极大的差异。路亚钓在欧洲非常盛行，自2007年我国也逐渐兴起路亚钓，被越来越多的钓鱼爱好者所喜爱。</p>
<a id="more"></a>
<p>路亚钓法是一种以现代科技辅以人类智慧的新兴钓法，更充分将环境、气候、鱼类习性等因素加以综合考虑，才能在自然环境中透过操作，使假饵能发挥引诱对象鱼觅食的作用，从某个程度来说，也就是做到了真正的“以假乱真”。</p>
<p>从最广义的分类来说，除了活饵、粉饵外、只要在挂钩端搭配人造材料物（如金属、塑料）的钓鱼方法，就能将之理解为路亚钓法，由于路亚钓法的对象多为掠食性的鱼种，不管是毛钩拟饵钓中，或是利用显著的特征侵占对象鱼地盘，激起对象鱼攻击习性而上钩的钓法，都属于路亚钓法的一环。因此吸引对象鱼的注意，是路亚钓法里十分重要的一环。</p>
<p>一般来说，路亚在水中吸引鱼的方法不外乎是透过颜色、光线、拥泳形、声响等几种方式来完成。为了使这些因素能在水中充分发挥作用，就必须使假饵不断的来回游动，探索，因此反复的抛饵、收饵，便成了路亚钓与其他钓鱼方法，在活动上最为明显的区隔特征，在国外特别是欧美等国家，路亚钓就如同其它的户外活动，被赋予动态，竞技的形象，而成为一种家喻户晓的户外运动。</p>
<p>国内近几年来，由于消费水平的提高，钓鱼人口增加的情形下，再加上环保意识的抬头，路亚钓已俨然成为一股新兴的钓游趋势，无论从硬饵、软饵的使用来看，路亚器材的操作简易性更是大幅降低了许多想进入钓鱼活动初学者的门槛，进而吸引更多人的参与，享受更多的钓鱼乐趣，并与国际潮流接轨。</p>
<h1 id="路亚分类"><a href="#路亚分类" class="headerlink" title="路亚分类"></a>路亚分类</h1><p>谈到路亚钓，不免让人好奇什么是路亚钓，路亚有哪些种类呢？从分类上来说明，路亚分为六大系统，分别是栓型饵（plug）、铁板路亚（Jig)、钢丝饵（WireBait）、生物型软饵（Soft Bait）、橡胶铅头钩（RubberJig），而这些各自的系列中，又有许多不同的差异，例如同样是栓形路亚，里面还区分为鱼型路亚(Minnow)、水表路亚（TopWater）、搅泥路亚（Crank）、颤泳路亚（Vibration），可说是非常细腻，透过附图的分类表，相信各位读者可以对路亚的形态以及分类有了初步的认识。</p>
<p><img src="/img/20161008/lure.jpeg" alt=""></p>
<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><p><strong>炒粉</strong> = 也叫炸线，新手初学水滴轮时常发生<br><strong>放枪</strong> = 抛投时断线，拟饵飞得无影无踪.使用PE线时发生较多<br><strong>放流</strong> = 钓鱼是为了享受钓鱼的过程，而不是鱼，保证鱼资源的钓之不完，钓友们钓鱼的乐趣也就钓之不尽了。当然，钓后放流并不是阻止大家将钓到的鱼带回享用!而是不希望大家做出一网打尽,赶尽杀绝的行为,因为你所能吃掉的鱼与所能钓到的鱼在数量上是不成正比的。<br><strong>正口</strong> = 拟饵在目标鱼嘴里，证明该鱼确实对拟饵发起过正面攻击<br><strong>打龟</strong> = 也叫空军,指没钓上目标鱼而归<br><strong>破龟</strong> = 一直打龟很久后中鱼<br><strong>破处</strong> = 玩家的第一次中鱼<br><strong>车祸</strong> = 钓上鱼后发现钩子在鱼嘴以外的地方<br><strong>深喉</strong> = 鱼饵被全吃进到喉咙，已经在腮附近<br><strong>米级</strong> = 指目标鱼身长超过100cm以上，简称米级<br><strong>强奸</strong> = 指在对自己装备和技术自信的情况下，采用不溜鱼而直接拉上岸的方法称为强奸。另外在遇上大鱼时被清杯断线也称强奸，不过是被鱼强奸<br><strong>清杯</strong> = 又称 <em>脱裤子</em>，指遇上大鱼将泄力锁死的情况下仍将线杯的线全部拉出<br><strong>炸水</strong> = 操作水面系拟饵时目标鱼冲出水面吃饵产生的水花简称炸水<br><strong>洗腮</strong> = 对象鱼逃生伎俩之一，指对象鱼中钩后主动冲出水面，摇摆头部欲挣脱鱼钩的束缚，此种情形以鲈鱼居多。应对办法：一是将鲈鱼拉离其原居水层时不要太超之过急；二是将竿尖压入水中控线。<br><strong>打桩</strong> = 鱼中钩后赖在河底不动<br><strong>作合</strong> = 也就是 <strong>扬杆</strong> 每位玩家最期待的哟<br><strong>爆箱</strong> = 鱼儿满箱，箱子装不下啦<br><strong>标点</strong> = 寻找藏鱼的地方也就是下竿的地方<br>左/右手轮：杆子不分左右！左手摇的是左手轮。右手摇的是右手轮<br><strong>打黑</strong> = 是指雷强钓法<br><strong>雷强</strong> =  路亚黑鱼的专业叫法，源自日本。日本反黑鱼，叫做雷鱼。 黑鱼一类的鱼也叫雷鱼，由于其栖息的场所水面大多有水草覆盖，只能用蛙路亚，但是蛙路亚呢，因为需要防挂草，所以钩尖隐藏，需要暴力扬竿刺穿黑鱼上颚，加上黑鱼生理结构的特性，上颚几乎全是骨头，很难刺穿，所以要求竿子很硬，很暴力，加上炸水后的读秒（可别说读秒也不知道），黑鱼会钻回水草深处，所以要求竿子有足够的强度连草带蛙一起拖上来，加上一般就算暴力扬竿还是有可能没有刺穿，所以需要很迅速的直接拖上来，这样的结果就是动作很强悍，太牛B了，所以很爽，也因为上面的原因，一般竿子无法做到这点，所以有专业的雷竿！用强这个字来阐述这种钓黑鱼的方法，一点也不过分，所以，就叫雷强<br><strong>中地球</strong> ＝ 假饵钩到水下的障碍物而拉不出时称为中地球，也就是挂底</p>
<h1 id="路亚词典"><a href="#路亚词典" class="headerlink" title="路亚词典"></a>路亚词典</h1><h3 id="通用类"><a href="#通用类" class="headerlink" title="通用类"></a>通用类</h3><p>HIT - （中）<br>GET - （上）<br>BREAK - （断）<br>RELEASE - （放回）<br>CATCH &amp; RELEASE - （钓后放回）<br>BOATGAME - 艇钓… OFFSHORE GAME<br>SHORE GAME - （岸钓）<br>LIGHTGAME - （小物钓）<br>SHORE JIGGING -（岸边铁板路亚钓）<br>TROLLING - （假饵拖钓）<br>CASTING - （拋掷）<br>SINKING(S) - （下沉）<br>SUSPEND(SP) - （悬浮）<br>FLOATING(F) - （浮水）<br>TOP WATER(TP) - （水面）<br>QUICK - （快）<br>SLOW - （慢）<br>BOUNCE（水底跳动）<br>UNDER HAND PITCH（反手抛投）<br>ITCH（抛投）</p>
<h3 id="钓具类"><a href="#钓具类" class="headerlink" title="钓具类"></a>钓具类</h3><p>ROD - 釣竿<br>ULTRA LIGHT (UL) - 超轻<br>LIGHT (L) - 轻<br>MEDIUM LIGHT (ML) - 中轻<br>MEDIUM (M) - 中<br>MEDIUM HARD (MH) - 中硬<br>HARD (H) - 硬<br>REEL - 钓轮… 转线器… 鲛…<br>HOOK - 勾<br>LURE - 路亚… 假饵… 拟饵…<br>GRIP - 夹…<br>PLIERS - 钳…<br>SINKER - 助沉物<br>SPINNING - 纺车式/直绞<br>BAITCAST - 双轴式/橫绞<br>JIG HEAD（铅头钩）</p>
<h3 id="假饵类"><a href="#假饵类" class="headerlink" title="假饵类"></a>假饵类</h3><p>SOFTBAIT(SB) - 软饵<br>HARDBAIT(HB) - 硬饵<br>BIGBAIT - 较大的饵<br>MINNOW - 米諾… 鰷魚型<br>SHAD - 鲱鱼型<br>CRANKBAIT - 摇摆型<br>VIBRA - 頻震型<br>POPPER - 撞水/爆竹型<br>PENCIL - 笔型<br>BANANA BOAT - 滑行船型<br>BOTTLE - 瓶型<br>CHUGGER - 叉口型<br>SPLASHING - 弹跳型<br>LIPLESS - 冇舌板型<br>SPOON - 匙型<br>JOINTED - 多节型<br>SWISHER - 旋叶噪音型<br>SPINNERBAIT - 覆合式旋转亮片型<br>WILLOW BLADE - 柳叶型转片<br>COROLADO BLADE - 科罗拉多型转片<br>BUZZBAIT - 嘈音螺旋型<br>SWIMBAIT - 游泳型<br>JERKBAIT - 抽动型<br>JIGHEAD - 汲头勾<br>RUBBERJIG - 橡胶裙摆汲头勾<br>WORM - 虫型软饵<br>GRUB - 蛆型软饵<br>LEECH - 蛭型软饵<br>SLUG - 蛞蝓型软饵<br>TUBE - 管型软饵<br>LIZARD - 蠑螈型软饵<br>CRAW FISH - 螫蝦型软饵<br>SHRIMP - 蝦型软饵<br>TAIL - 有尾型软饵<br>DOUBLE TAIL - 雙尾型软饵<br>FROG - 蛙型软饵<br>RUBBER JIG（胡须佬）</p>
<h3 id="钓组类"><a href="#钓组类" class="headerlink" title="钓组类"></a>钓组类</h3><p>NO SINKER RIG - 冇重型<br>TEXAS RIG - 德州钓组<br>SOUTH CAROLINA RIG - 南卡钓组<br>FLORIDA RIG - 福罗里达钓组<br>SPLITSHOT RIG - 分体式钓组<br>WACKY RIG –<br>JIGHEAD RIG –铅头钩钓组<br>DWONSHOT RIG –倒吊钓组<br>LADY RIG -</p>
<h3 id="鱼种类（海水）"><a href="#鱼种类（海水）" class="headerlink" title="鱼种类（海水）"></a>鱼种类（海水）</h3><p>AMBERJACK - 章雄(红甘)<br>BARRAMUNDI - 盲鰽… 金目鲈<br>DOLPHINFISH - 鬼头刀<br>FLATHEAD - 牛秋<br>FLOUNDER - 地寶… 左口.. 鰈魚… 鮃魚<br>GROUPER - 斑<br>GIANT TREVALLY(GT) - 牛廣<br>QUEENFISH - 黃祥<br>RED SNAPPER - 红油<br>RED DRUM - 红鼓… 星鲈<br>ROCKFISH(RF) - 根鱼<br>SABER FISH - 牙帶鱼… 白帶鱼… 太刀鱼<br>SEABASS - 海鲈… 百花鲈… 七星鲈<br>SKIPJACK TUNA - 正鲣<br>YELLOWFIN TUNA - 黃鳍杜仲… 黃鳍鮪</p>
<h3 id="鱼种类（淡水）"><a href="#鱼种类（淡水）" class="headerlink" title="鱼种类（淡水）"></a>鱼种类（淡水）</h3><p>Pseudorasbora parva - 麦穗鱼、尖嘴仔、车栓仔、尖嘴鱼仔<br>SNAKEHEAD - 蛇头鱼… 鳢鱼… 生鱼<br>BLACKBASS(BB) - 黑鲈… 加州鲈<br>Gymnocypris przewalskii - 青海湖裸鲤<br>Alligator Gar - （鳄雀鳝）<br>Chinoodsalm on - 王鲑（大鳞大马哈鱼）<br>Pirarucu - （巨骨舌鱼）<br>Wels - （六须鲇）<br>Taimen - （哲罗鱼）<br>Huchen - （多瑙河哲罗）<br>Leuciscus idus - （高体雅罗鱼）<br>SquafIObarb us curriCulus - 赤眼鳟<br>Culter alburnus（Topmouth culter ） - 翘嘴鲌<br>Korean piscivorous chub （Opsariichthys bidens Gunther）- 马口鱼<br>Elopichthys bambusa （Yellowcheck carp）- 鳡鱼<br>Amur pike - 狗鱼<br>Striped mullet - 鲻（乌头）<br>dogtooth - 犬齿鱿</p>
<h1 id="有关饵"><a href="#有关饵" class="headerlink" title="有关饵"></a>有关饵</h1><p><strong>与材质有关：</strong><br>Hard Bait,硬饵；Soft Bait,软饵；<br><strong>与泳层有关：</strong><br>Top Water Bait，水面系列，不会下沉，包括大多数Pencil (铅笔)，还有Popper(波扒)等；<br>F-Float，浮水；浮水形的路亚，是在收线或抽动时下潜（通过压水板的作用），停下来时，路亚会慢慢上浮到水面；<br>S-sinking，路亚的重量大于浮力，入水后会一直下沉到水底；<br>SP-suspend，悬浮型，入水后会缓慢下潜到某个深度。<br>Shallow，浅水；MIdWater，中层；Deep Water，深水；<br><strong>与环境有关：</strong><br>FW-Fresh Water，淡水用饵；<br>SW-Salt Water，海水用饵。<br><strong>与泳姿有关：</strong><br>VIB-Vibrate，振动，颤动；<br><strong>与声音有关：</strong><br>Rattle-发出格格声；（如Rattle Snake，响尾蛇）<br><strong>与形状有关：</strong><br>lip-舌板，lipless-无舌板；<br>Pencil，铅笔，无舌板；Popper，波扒；Minnow ，米诺，一种鱼型硬饵；</p>
<p>Crank-摇摆型，多指肥仔那一类；<br>Prop-Propeller，带螺旋桨的一类；<br>Spoon/blade,指铁片类；<br>Spinner，旋转铁片；<br>Jig-铅头钩，多指上下急动，乱跳；Jigging，玩铁板；<br>Drop shot-倒吊；<br>Buzz Bait-发出响声的一类；</p>
<h1 id="中英文对照"><a href="#中英文对照" class="headerlink" title="中英文对照:"></a>中英文对照:</h1><p>FHARD BAITS (硬式路亞):<br>MINNOW(米诺型)﹐<br>CRANK (曲折行進型)﹐<br>POPPER (撞水型)﹐<br>PANCEL (鉛筆型)﹐<br>VIBE (震動型)<br>SOFT BAITS (軟式路亞) ﹕<br>WORM﹐TRAILER﹐GRUB﹐CRAW﹐LIZARD﹐TUBE﹐JERKBAIT﹐PANFISH﹐FROG (有些無中文)<br>WIRE BAITS (金屬線組合型路亞) ﹕<br>SPINNERBAIT (螺旋型)﹐<br>IN-LINE SPINNERBAIT (IN-LINE螺旋型)﹐<br>BUZZBAIT (嘈音螺旋型)<br>SPOON (匙型路亞)<br>JIGBAIT (鐵板路亞)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;路亚&lt;/strong&gt; 钓鱼取名来源为 &lt;strong&gt;Lure&lt;/strong&gt; 的音译，即 &lt;em&gt;假饵钓鱼&lt;/em&gt;，是模仿弱小生物引发大鱼攻击的一种方法。讲究技巧，需要竿、饵、轮的综合操作。在整个过程中，钓者是在做全身运动，同时路亚装备简洁，干净环保，与传统钓法有着极大的差异。路亚钓在欧洲非常盛行，自2007年我国也逐渐兴起路亚钓，被越来越多的钓鱼爱好者所喜爱。&lt;/p&gt;
    
    </summary>
    
    
      <category term="路亚" scheme="http://cuiqingwei.github.io/tags/%E8%B7%AF%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>IoT知识点汇总</title>
    <link href="http://cuiqingwei.github.io/2016/05/13/2016-05-13-IoT%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <id>http://cuiqingwei.github.io/2016/05/13/2016-05-13-IoT知识点汇总/</id>
    <published>2016-05-13T09:23:37.000Z</published>
    <updated>2017-02-22T11:17:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IoT-Struct"><a href="#IoT-Struct" class="headerlink" title="IoT Struct"></a>IoT Struct</h2><div align="center"><br><img src="/img/20160513/struct.jpg" alt="IoT Struct"><br></div>

<a id="more"></a>
<h2 id="IoT-Protocol"><a href="#IoT-Protocol" class="headerlink" title="IoT Protocol"></a>IoT Protocol</h2><table>
<thead>
<tr>
<th>Protocol</th>
<th>CoAP</th>
<th>XMPP</th>
<th>RESTful HTTP</th>
<th>MQTT</th>
</tr>
</thead>
<tbody>
<tr>
<td>Transport</td>
<td>UDP</td>
<td>TCP</td>
<td>TCP</td>
<td>TCP</td>
</tr>
<tr>
<td>Messaging</td>
<td>Request/Response</td>
<td>Publish/Subscribe Request/Response</td>
<td>Request/Response</td>
<td>Publish/Subscribe Request/Response</td>
</tr>
<tr>
<td>2G, 3G, 4G Suitability (1000s nodes)</td>
<td>Excellent</td>
<td>Excellent</td>
<td>Excellent</td>
<td>Excellent</td>
</tr>
<tr>
<td>LLN Suitability (1000s nodes)</td>
<td>Excellent</td>
<td>Fair</td>
<td>Fair</td>
<td>Fair</td>
</tr>
<tr>
<td>Compute Resources</td>
<td>10Ks RAM/Flash</td>
<td>10Ks RAM/Flash</td>
<td>10Ks RAM/Flash</td>
<td>10Ks RAM/Flash</td>
</tr>
<tr>
<td>Success Storied</td>
<td>Utility Field Area Networks</td>
<td>Remote management of consumer white goods</td>
<td>Smart Energy Profile 2 (premise energy management/home services)</td>
<td>Extending enterprise messaging into IoT applications</td>
</tr>
</tbody>
</table>
<h3 id="CoAP"><a href="#CoAP" class="headerlink" title="CoAP"></a>CoAP</h3><p><div align="center"><br><img src="/img/20160513/coap.jpg" alt="coap"><br></div><br>CoAP是受限制的应用协议(Constrained Application Protocol)的代名词。在最近几年的时间中，专家们预测会有更多的设备相互连接，而这些设备的数量将远超人类的数量。在这种大背景下，物联网和M2M技术应运而生。虽然对人而言，连接入互联网显得方便容易，但是对于那些微型设备而言接入互联网非常困难。在当前由PC机组成的世界，信息交换是通过TCP和应用层协议HTTP实现的。但是对于小型设备而言，实现TCP和HTTP协议显然是一个过分的要求。为了让小设备可以接入互联网，CoAP协议被设计出来。CoAP是一种应用层协议，它运行于UDP协议之上而不是像HTTP那样运行于TCP之上。CoAP协议非常的小巧，最小的数据包仅为4字节。</p>
<h3 id="XMPP"><a href="#XMPP" class="headerlink" title="XMPP"></a>XMPP</h3><p>XMPP是一种基于标准通用标记语言的子集XML的协议，它继承了在XML环境中灵活的发展性。因此，基于XMPP的应用具有超强的可扩展性。经过扩展以后的XMPP可以通过发送扩展的信息来处理用户的需求，以及在XMPP的顶端建立如内容发布系统和基于地址的服务等应用程 序。而且，XMPP包含了针对服务器端的软件协议，使之能与另一个进行通话，这使得开发者更容易建立客户应用程序或给一个配好系统添加功能。</p>
<h3 id="RESTful-HTTP"><a href="#RESTful-HTTP" class="headerlink" title="RESTful HTTP"></a>RESTful HTTP</h3><p>REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。</p>
<p>Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。</p>
<h3 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h3><p><div align="center"><br><img src="/img/20160513/MQTT.png" alt="mqtt"><br></div><br>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个即时通讯协议，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部连接起来，被用来当做传感器和致动器（比如通过Twitter让房屋联网）的通信协议。</p>
<h2 id="主流协议标准"><a href="#主流协议标准" class="headerlink" title="主流协议标准"></a>主流协议标准</h2><h3 id="Z-Wave"><a href="#Z-Wave" class="headerlink" title="Z-Wave"></a>Z-Wave</h3><blockquote>
<p>Z-Wave是一种新兴的基于射频的、低成本、低功耗、高可靠、适于网络的短距离无线通信技术。工作频带为908.42MHz(美国)~868.42MHz(欧洲)，采用FSK(BFSK/GFSK)调制方式，数据传输速率为9.6 kbps，信号的有效覆盖范围在室内是30m，室外可超过100m，适合于窄带宽应用场合。随着通信距离的增大，设备的复杂度、功耗以及系统成本都在增加，相对于现有的各种无线通信技术，Z-Wave技术将是最低功耗和最低成本的技术，有力地推动着低速率无线个人区域网。</p>
</blockquote>
<h3 id="Zigbee"><a href="#Zigbee" class="headerlink" title="Zigbee"></a>Zigbee</h3><blockquote>
<p>ZigBee是基于IEEE802.15.4标准的低功耗局域网协议。根据国际标准规定，ZigBee技术是一种短距离、低功耗的无线通信技术。这一名称（又称紫蜂协议）来源于蜜蜂的八字舞，由于蜜蜂(bee)是靠飞翔和“嗡嗡”(zig)地抖动翅膀的“舞蹈”来与同伴传递花粉所在方位信息，也就是说蜜蜂依靠这样的方式构成了群体中的通信网络。其特点是近距离、低复杂度、自组织、低功耗、低数据速率。主要适合用于自动控制和远程控制领域，可以嵌入各种设备。简而言之，ZigBee就是一种便宜的，低功耗的近距离无线组网通讯技术。</p>
</blockquote>
<h3 id="6LoWPAN"><a href="#6LoWPAN" class="headerlink" title="6LoWPAN"></a>6LoWPAN</h3><blockquote>
<p>IETF 6LoWPAN取得的突破是得到一种非常紧凑、高效的IP实现，消除了以前造成各种专门标准和专有协议的因素。这在工业协议（BACNet、LonWorks、通用工业协议和监控与数据采集）领域具有特别的价值。这些协议最初开发是为了提供特殊的行业特有的总线和链路(从控制器区域网总线到AC电源线)上的互操作性。</p>
</blockquote>
<h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><p><div align="center"><br><img src="/img/20160513/thread.jpg" alt="thread"><br></div></p>
<blockquote>
<p>Thread是一种基于简化版IPv6的网状网络协议，该协议由行业领先的多家技术公司联合开发，旨在实现家庭中各种产品间的互联，以及与互联网和云的连接。Thread易于安装、高度安全，并且可扩展到数百台设备。Thread基于低成本、低功耗的802.15.4芯片组开发。目前正在使用的大量产品，只需一次简单的软件升级，便可支持Thread。</p>
</blockquote>
<h2 id="相关通讯技术"><a href="#相关通讯技术" class="headerlink" title="相关通讯技术"></a>相关通讯技术</h2><h3 id="NFC"><a href="#NFC" class="headerlink" title="NFC"></a>NFC</h3><blockquote>
<p>NFC近场通信技术是由非接触式射频识别（RFID）及互联互通技术整合演变而来，在单一芯片上结合感应式读卡器、感应式卡片和点对点的功能，能在短距离内与兼容设备进行识别和数据交换。工作频率为13.56MHz.但是使用这种手机支付方案的用户必须更换特制的手机。目前这项技术在日韩被广泛应用。手机用户凭着配置了支付功能的手机就可以行遍全国：他们的手机可以用作机场登机验证、大厦的门禁钥匙、交通一卡通、信用卡、支付卡等等。</p>
</blockquote>
<h3 id="WiFi"><a href="#WiFi" class="headerlink" title="WiFi"></a>WiFi</h3><blockquote>
<p>Wi-Fi是一种可以将个人电脑、手持设备（如pad、手机）等终端以无线方式互相连接的技术，事实上它是一个高频无线电信号。无线保真是一个无线网络通信技术的品牌，由Wi-Fi联盟所持有。目的是改善基于IEEE 802.11标准的无线网路产品之间的互通性。有人把使用IEEE 802.11系列协议的局域网就称为无线保真。甚至把无线保真等同于无线网际网路（Wi-Fi是WLAN的重要组成部分）</p>
</blockquote>
<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><blockquote>
<p>UDP协议的全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。UDP用来支持那些需要在计算机之间传输数据的网络应用。包括网络视频会议系统在内的众多的客户/服务器模式的网络应用都需要使用UDP协议。UDP协议从问世至今已经被使用了很多年，虽然其最初的光彩已经被一些类似协议所掩盖，但是即使是在今天UDP仍然不失为一项非常实用和可行的网络传输层协议。</p>
</blockquote>
<h3 id="uIP"><a href="#uIP" class="headerlink" title="uIP"></a>uIP</h3><blockquote>
<p>uIP 由瑞典计算机科学学院(网络嵌入式系统小组)的Adam Dunkels 开发。其源代码由C 语言编写，并完全公开。</p>
<p>uIP 协议栈去掉了完整的 TCP/IP 中不常用的功能，简化了通讯流程，但保留了网络通信必须使用的协议，设计重点放在了<br>IP/TCP/ICMP/UDP/ARP 这些网络层和传输层协议上，保证了其代码的通用性和结构的稳定性。</p>
</blockquote>
<h3 id="DTLS"><a href="#DTLS" class="headerlink" title="DTLS"></a>DTLS</h3><blockquote>
<p>DTLS(Datagram Transport Layer Security)即数据包传输层安全性协议。TLS不能用来保证UDP上传输的数据的安全，因此Datagram TLS试图在现存的TLS协议架构上提出扩展，使之支持UDP，即成为TLS的一个支持数据报传输的版本。DTLS 1.0基于TLS 1.1, DTLS 1.2基于TLS 1.2。</p>
</blockquote>
<h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><blockquote>
<p>WebSocket protocol 是HTML5一种新的协议。它是实现了浏览器与服务器全双工通信(full-duplex)。</p>
</blockquote>
<h3 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h3><blockquote>
<p>简单对象访问协议是交换数据的一种协议规范，是一种轻量的、简单的、基于XML（标准通用标记语言下的一个子集）的协议，它被设计成在WEB上交换结构化的和固化的信息。</p>
</blockquote>
<h2 id="物联网相关平台"><a href="#物联网相关平台" class="headerlink" title="物联网相关平台"></a>物联网相关平台</h2><h3 id="Yeelink"><a href="#Yeelink" class="headerlink" title="Yeelink"></a>Yeelink</h3><p>主页: <a href="http://www.yeelink.net/" target="_blank" rel="external">http://www.yeelink.net/</a></p>
<h3 id="SiteWhere"><a href="#SiteWhere" class="headerlink" title="SiteWhere"></a>SiteWhere</h3><blockquote>
<p>The Open Platform for the Internet of Things ™</p>
<p>这个项目提供了一个完整的平台，来管理物联网设备、收集数据并用外部系统进行数据整合。SiteWhere发行版本可以下载或在亚马逊云中使用。它还集成了多个大数据工具，包括MongoDB和ApacheHBase。</p>
</blockquote>
<p>主页: <a href="http://www.sitewhere.org/" target="_blank" rel="external">http://www.sitewhere.org/</a></p>
<h3 id="DeviceHive"><a href="#DeviceHive" class="headerlink" title="DeviceHive"></a>DeviceHive</h3><blockquote>
<p>该项目提供一个支持连接设备到物联网的机器对机器通信框架。它包括支持创建网络易于使用基于web的管理软件、应用安全规则和监控设备。该网站提供内置有DeviceHub的样本项目，而且它也有一个“游乐场”部分，允许用户使用DeviceHub在线去看它是如何工作的。</p>
</blockquote>
<p>主页: <a href="http://www.devicehive.com/" target="_blank" rel="external">http://www.devicehive.com/</a></p>
<h3 id="Devicehub-net"><a href="#Devicehub-net" class="headerlink" title="Devicehub.net"></a>Devicehub.net</h3><blockquote>
<p>Devicehub.net描述自己为“物联网的开源支柱”。它是一个基于云的服务，存储物联网相关的数据，提供数据的可视化并允许用户在网页上控制物联网设备。开发者使用该服务创建跟踪健康信息的应用程序，监视孩子的位置，自动化家电，跟踪车辆数据，监测天气等等。</p>
<p>主页: <a href="http://devicehub.net/" target="_blank" rel="external">http://devicehub.net/</a></p>
</blockquote>
<h3 id="IoT-Toolkit"><a href="#IoT-Toolkit" class="headerlink" title="IoT Toolkit"></a>IoT Toolkit</h3><blockquote>
<p>这个项目背后的组织正使用各种工具工作，来集成多个物联网相关的传感器网络和协议。虽然主要的项目时一个智能对象应用程序，但该组织也工作在一个HTTP对Coap的情景下，一个带有嵌入式软件代理的应用程序框架等等。在硅谷，他们也发起了一个“遇见”组织，面向对物联网开发有情趣的人。</p>
</blockquote>
<p>主页: <a href="http://iot-toolkit.com/" target="_blank" rel="external">http://iot-toolkit.com/</a></p>
<h3 id="Mango-芒果"><a href="#Mango-芒果" class="headerlink" title="Mango(芒果)"></a>Mango(芒果)</h3><blockquote>
<p>“芒果”自称是“世界上最流行的开源的机器对机器软件”。基于网络的它支持多个平台。它的主要功能包括支持多协议和数据库、元点、用户自定义事件、导入/导出等等。</p>
</blockquote>
<h3 id="Nimbits"><a href="#Nimbits" class="headerlink" title="Nimbits"></a>Nimbits</h3><blockquote>
<p>Nimbits可以存储和处理特定的数据类型，数据可以是时间标记的或地理标记的。作为服务的公用平台是可用的，或者你也可以下载这个软件并部署它到谷歌应用引擎、或亚马逊EC2上的J2EE服务器上、或一个树莓派上。它支持多种编程语言，包括Arduino、JavaScript、HTML或Nimbits.io Java库。</p>
</blockquote>
<h3 id="OpenRemote"><a href="#OpenRemote" class="headerlink" title="OpenRemote"></a>OpenRemote</h3><blockquote>
<p>OpenRemote为基于家居的爱好者、集成商、分销商和制造商提供了四种不同的集成工具。它支持十几种不同的现有协议，允许用户创建几乎任何类型的智能设备（他们能够想到和使用任何支持java的设备来控制它）。该平台是开源的，但在设计和产品开发过程中，该公司也出售各种支持、电子书等工具来进行帮助。</p>
</blockquote>
<h3 id="ThingSpeak"><a href="#ThingSpeak" class="headerlink" title="ThingSpeak"></a>ThingSpeak</h3><blockquote>
<p>ThingSpeak可以处理HTTP请求，并存储和处理数据。这个开放数据平台的主要功能包括开放应用程序、实时数据收集、地理位置数据、数据处理和可视化、设备状态信息和插件。它可以集成多个硬件和软件平台，包括Arduino、树莓派、ioBridge/RealTime.io、Electic lmp、移动和网络应用、社会网络和MATLAB数据分析。除了开源版本，还提供托管服务。</p>
</blockquote>
<h2 id="物联网相关嵌入式操作系统"><a href="#物联网相关嵌入式操作系统" class="headerlink" title="物联网相关嵌入式操作系统"></a>物联网相关嵌入式操作系统</h2><blockquote>
<p>实时系统（Real-time operating system,RTOS）的正确性不仅依赖系统计算的逻辑结果，还依赖于产生这个结果的时间。实时系统能够在指定或者确定的时间内完成系统功能和外部或内部、同步或异步时间做出响应的系统。因此实时系统应该在事先先定义的时间范围内识别和处理离散事件的能力；系统能够处理和储存控制系统所需要的大量数据。</p>
</blockquote>
<h3 id="Contiki"><a href="#Contiki" class="headerlink" title="Contiki"></a>Contiki</h3><p><strong>相关支持</strong>: <code>CoAP</code>,<code>TCP/IP网络支持</code>,<code>RPL路由</code>,<code>6Lowpan 报文压缩</code>,<code>Rime无线协议栈</code></p>
<blockquote>
<p>Contiki是一个适用于有内存的嵌入式系统的开源的、高可移植的、支持网络的多任务操作系统。包括一个多任务核心、TCP/IP 堆栈、程序集以及低能耗的无线通讯堆栈。Contiki 采用 C 语言开发的非常小型的嵌入式操作系统，运行只需要几K的内存。</p>
</blockquote>
<p>Contiki 是一个小型的，开源的，极易移植的多任务电脑操作系统。它专门设计以适用于一系列的内存受限的网络系统，包括从8位电脑到微型控制器的嵌入系统。它的名字来自于托尔·海尔达尔的康提基号。</p>
<p>Contiki只需几kilobyte的代码和几百字节的内存就能提供多任务环境和内建TCP/IP支持。</p>
<h3 id="LwIP"><a href="#LwIP" class="headerlink" title="LwIP"></a>LwIP</h3><blockquote>
<p>LwIP是Light Weight (轻型)IP协议，有无操作系统的支持都可以运行。LwIP实现的重点是在保持TCP协议主要功能的基础上减少对RAM 的占用，它只需十几KB的RAM和40K左右的ROM就可以运行，这使LwIP协议栈适合在低端的嵌入式系统中使用。</p>
<p>lwIP协议栈主要关注的是怎么样减少内存的使用和代码的大小，这样就可以让lwIP适用于资源有限的小型平台例如嵌入式系统。为了简化处理过程和内存要求，lwIP对API进行了裁减，可以不需要复制一些数据。</p>
</blockquote>
<h3 id="FreeRTOS"><a href="#FreeRTOS" class="headerlink" title="FreeRTOS"></a>FreeRTOS</h3><blockquote>
<p>FreeRTOS是一个迷你操作系统内核的小型嵌入式系统。作为一个轻量级的操作系统，功能包括：任务管理、时间管理、信号量、消息队列、内存管理、记录功能等，可基本满足较小系统的需要。</p>
<p>由于RTOS需占用一定的系统资源(尤其是RAM资源)，只有μC/OS-II、embOS、salvo、FreeRTOS等少数实时操作系统能在小RAM单片机上运行。相对μC/OS-II、embOS等商业操作系统，FreeRTOS操作系统是完全免费的操作系统，具有源码公开、可移植、可裁减、调度策略灵活的特点，可以方便地移植到各种单片机上运行，其最新版本为8.0.0版。</p>
</blockquote>
<h3 id="mbed-OS"><a href="#mbed-OS" class="headerlink" title="mbed OS"></a>mbed OS</h3><p><div align="center"><br><img src="/img/20160513/mbedos.png" alt="mbed OS"><br></div><br><strong>相关支持</strong>: <code>BLE</code>,<code>Celluar</code>,<code>WIFI</code>,<code>Zigbee</code>,<code>6LoWPAN</code></p>
<blockquote>
<p>一款基于ARM Cortex-M处理器的设备所设计的免费操作系统，配有安全、通讯和设备管理模块，支持低功率智能蓝牙标准、2G、3G与CDMA通信技术、Thread、Wi-Fi、802.15.4/6LoWPAN、TLS/DTLS、CoAP、HTTP、MQTT以及轻量级的M2M。而只需32-64kbRAM和256 kb闪存的配置，适合在小设备上运行。</p>
<p>mbed™ OS is an operating system for IoT devices and is especially well-suited to run in energy constrained environments. The OS includes the connectivity, security and device management functionalities required in every IoT device.</p>
</blockquote>
<ul>
<li>Connectivity protocol stack support for Bluetooth® low energy, Cellular, Ethernet, Thread, Wi-fi®,  Zigbee IP, Zigbee NAN, 6LoWPAN</li>
<li>Automation of power management</li>
<li>Software asset protection and secure firmware updates for device security &amp; management</li>
<li>Supports a wide range of ARM Cortex-M based hardware platforms from major MCU vendors</li>
<li>Support for OMA Lightweight M2M protocol for device management</li>
<li>Updatable and secure devices at the edge capable of additional processing and functionality</li>
<li>Banking-class end-to-end IP security across the communication channels through TLS &amp; DTLS</li>
<li>Future proof designs by supporting all the key open standards for connectivity and device management</li>
</ul>
<h3 id="emOS"><a href="#emOS" class="headerlink" title="emOS"></a>emOS</h3><blockquote>
<p>embOS是一个优先级控制的多任务系统，是专门为各种微控制器应用于实时系统应用的嵌入式操作系统．是一个具有最小RAM和ROM占用的、高速的、多功能的高性能工具。</p>
<p>贯穿embOS的整个开发过程，微控制器有限的资源一直是开发者所顾忌的。五年来，该RTOS的内部结构已经被优化为不同客户的不同应用中，以满足工业需要。对不同微控制器的完全源码，使开发者很方便用实时操作系统构建实时程序。embOS是高度模块化的，只有需要的函数才被调用，占用的ROM非常小。 最小的内存占用：1kb ROM,30字节 RAM;由于提供源码文件，你可以用embOS灵活定制系统以满足实际需求。<br>任务之间可以通过旗语、邮箱和事件安全便利地通讯。</p>
</blockquote>
<h3 id="Salvo"><a href="#Salvo" class="headerlink" title="Salvo"></a>Salvo</h3><blockquote>
<p>Salvo™ is the first Real-Time Operating System (RTOS) designed expressly for very-low-cost embedded systems with severely limited program and data memory. With Salvo, you can quickly create low-cost, smart and sophisticated embedded products. Pumpkin™ has currently certified Salvo for use with:</p>
</blockquote>
<h3 id="μC-OS-II"><a href="#μC-OS-II" class="headerlink" title="μC/OS-II"></a>μC/OS-II</h3><blockquote>
<p>uC/OS II(Micro Control Operation System Two) 是一个可以基于ROM运行的、可裁减的、抢占式、实时多任务内核，具有高度可移植性，特别适合于微处理器和控制器，是和很多商业操作系统性能相当的实时操作系统(RTOS)。</p>
<p>为了提供最好的移植性能，uC/OS II最大程度上使用ANSI C语言进行开发，并且已经移植到近40多种处理器体系上，涵盖了从8位到64位各种CPU(包括DSP)。 uC/OS II可以简单的视为一个多任务调度器，在这个任务调度器之上完善并添加了和多任务操作系统相关的系统服务，如信号量、邮箱等。其主要特点有公开源代码，代码结构清晰、明了，注释详尽，组织有条理，可移植性好，可裁剪，可固化。内核属于抢占式，最多可以管理60个任务。从1992年开始，由于高度可靠性、移植性和安全性，uC/OS II已经广泛使用在从照相机到航空电子产品的各种应用中。</p>
</blockquote>
<h3 id="TinyOS"><a href="#TinyOS" class="headerlink" title="TinyOS"></a>TinyOS</h3><p>协议支持: <code>CoAP</code></p>
<p><a href="http://tinyos.stanford.edu/tinyos-wiki/index.php/CoAP_-13" target="_blank" rel="external">TinyCoAP</a></p>
<blockquote>
<p>TinyOS是UC Berkeley（加州大学伯克利分校）开发的开放源代码操作系统，专为嵌入式无线传感网络设计，操作系统基于构件（component-based）的架构使得快速的更新成为可能，而这又减小了受传感网络存储器限制的代码长度。</p>
<p>TinyOS的构件包括网络协议、分布式服务器、传感器驱动及数据识别工具。其良好的电源管理源于事件驱动执行模型，该模型也允许时序安排具有灵活性。TinyOS已被应用于多个平台和感应板中。</p>
</blockquote>
<h3 id="MQX"><a href="#MQX" class="headerlink" title="MQX"></a>MQX</h3><blockquote>
<p>Freescale MQX™ RTOS a full-featured complimentary real-time operating system including the MQX™ Kernel, TCP/IP stack (RTCS), embedded MS-DOS file system (MFS), USB host/device stack, and more. The MQX™ multitasking kernel provides pre-emptive scheduling, fast interrupt response, extensive inter-process communication and synchronization facilities. MQX RTOS includes its own peripheral drivers.</p>
</blockquote>
<h3 id="QNX"><a href="#QNX" class="headerlink" title="QNX"></a>QNX</h3><blockquote>
<p>QNX是由加拿大QSSL公司（QNX Software System Ltd.）开发的分布式实时操作系统。该操作系统既能运行于以Intel X86、Pentium等CPU为核心硬件环境下，也能运行于以PowerPC、MIPS等CPU为核心的硬件环境。QNX操作系统符合POSIX基本标准和实时标准，使其应用可以方便的进行移植。</p>
</blockquote>
<h3 id="OpenWRT"><a href="#OpenWRT" class="headerlink" title="OpenWRT"></a>OpenWRT</h3><blockquote>
<p>OpenWrt 可以被描述为一个嵌入式的 Linux 发行版，（主流路由器固件有 dd-wrt,tomato,openwrt三类）而不是试图建立一个单一的、静态的系统。OpenWrt的包管理提供了一个完全可写的文件系统，从应用程序供应商提供的选择和配置，并允许您自定义的设备，以适应任何应用程序。</p>
<p>对于开发人员，OpenWrt 是使用框架来构建应用程序，而无需建立一个完整的固件来支持；对于用户来说，这意味着其拥有完全定制的能力，可以用前所未有的方式使用该设备。</p>
</blockquote>
<h3 id="RIOT"><a href="#RIOT" class="headerlink" title="RIOT"></a>RIOT</h3><p>项目首页: <a href="http://riot-os.org/" target="_blank" rel="external">http://riot-os.org/</a><br>平台: <code>MSP430</code>, <code>ARM7</code>, <code>Cortex-M0</code>, <code>Cortex-M3</code>,<code>Cortex-M4</code>,<code>x86</code></p>
<blockquote>
<p>RIOT自称为“友好的物联网操作系统”。RIOT是FeuerWhere项目的分支，首次亮相在2013年。它的目的是既开发者友好又资源友好。它支持多种架构，包括MSP430、ARM7、Cortex-M0、Cortex-M3、Cortex-M4和标准的x86电脑。</p>
</blockquote>
<h1 id="物联网相关库"><a href="#物联网相关库" class="headerlink" title="物联网相关库"></a>物联网相关库</h1><h2 id="CoAP协议"><a href="#CoAP协议" class="headerlink" title="CoAP协议"></a>CoAP协议</h2><h3 id="libcoap"><a href="#libcoap" class="headerlink" title="libcoap"></a>libcoap</h3><p>语言: <code>C</code></p>
<p>主页: <a href="http://sourceforge.net/projects/libcoap/" target="_blank" rel="external">http://sourceforge.net/projects/libcoap/</a></p>
<blockquote>
<p>Lightweight application-protocol for devices that are constrained their resources such as computing power, RF range, memory, bandwith, or network packet sizes. This protocol, CoAP, is developed in the IETF working group “CoRE”, <a href="http://6lowapp.net" target="_blank" rel="external">http://6lowapp.net</a>.</p>
</blockquote>
<h3 id="jCoAP"><a href="#jCoAP" class="headerlink" title="jCoAP"></a>jCoAP</h3><p>语言: <code>Java</code></p>
<p>主页: <a href="https://code.google.com/p/jcoap/" target="_blank" rel="external">https://code.google.com/p/jcoap/</a></p>
<blockquote>
<p>jCoAP is a Java Library implementing the Constrained Application Protocol (CoAP)</p>
</blockquote>
<h3 id="Node-CoAP"><a href="#Node-CoAP" class="headerlink" title="Node-CoAP"></a>Node-CoAP</h3><p>语言: <code>Javascript</code> (Nodejs)</p>
<p>主页: <a href="https://github.com/mcollina/node-coap" target="_blank" rel="external">https://github.com/mcollina/node-coap</a></p>
<blockquote>
<p>node-coap is a client and server library for CoAP modelled after the http module.</p>
</blockquote>
<h3 id="coap"><a href="#coap" class="headerlink" title="coap"></a>coap</h3><p>语言: <code>Python</code></p>
<p>主页: <a href="https://github.com/openwsn-berkeley/coap" target="_blank" rel="external">https://github.com/openwsn-berkeley/coap</a></p>
<blockquote>
<p>A CoAP Python library</p>
<p>This package implements the Constrained Application Protocol (CoAP) developed by the IETF CORE working group.</p>
</blockquote>
<h3 id="Californium-Cf-CoAP"><a href="#Californium-Cf-CoAP" class="headerlink" title="Californium (Cf) CoAP"></a>Californium (Cf) CoAP</h3><p>语言: <code>Java</code></p>
<p>主页: <a href="https://github.com/mkovatsc/Californium" target="_blank" rel="external">https://github.com/mkovatsc/Californium</a></p>
<blockquote>
<p>Californium (Cf) is an open source implementation of the Constrained Application Protocol (CoAP). It is written in Java and targets unconstrained environments such as back-end service infrastructures (e.g., proxies, resource directories, or management services) and less constrained environments such as embedded devices running Linux (e.g., smart home controllers or vehicle sensors). Californium (Cf) has been running code for the IETF standardization of CoAP and was recently reimplemented to straighten changed design decisions, but also to improve its performance with focus on scalability. The new implementation was successfully tested at the ETSI CoAP#3 and OMA LWM2M Plugtests in November 2013.</p>
</blockquote>
<h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><h3 id="cJSON"><a href="#cJSON" class="headerlink" title="cJSON"></a>cJSON</h3><p>语言: <code>C</code></p>
<p>主页: <a href="http://sourceforge.net/projects/cjson/" target="_blank" rel="external">http://sourceforge.net/projects/cjson/</a></p>
<blockquote>
<p>JSON(JavaScriptObject Notation)是一种轻量级的数据交换格式。它基于JavaScript的一个子集。JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯。这些特性使JSON成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成。</p>
</blockquote>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="cURL"><a href="#cURL" class="headerlink" title="cURL"></a>cURL</h3><p>语言: <code>C</code></p>
<p>主页: <a href="http://curl.haxx.se/" target="_blank" rel="external">http://curl.haxx.se/</a></p>
<blockquote>
<p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。</p>
</blockquote>
<h3 id="HiveMQ"><a href="#HiveMQ" class="headerlink" title="HiveMQ"></a>HiveMQ</h3><p>语言: <code>Java</code></p>
<p>主页: <a href="http://www.hivemq.com/" target="_blank" rel="external">http://www.hivemq.com/</a></p>
<blockquote>
<p>HiveMQ 是一个企业级的 MQTT 代理，主要用于企业和新兴的机器到机器M2M通讯和内部传输，最大程度的满足可伸缩性、易管理和安全特性。提供免费的个人版。HiveMQ 提供了开源的插件开发包。</p>
</blockquote>
<h2 id="物联网书籍"><a href="#物联网书籍" class="headerlink" title="物联网书籍"></a>物联网书籍</h2><table>
<thead>
<tr>
<th>书名</th>
<th>作者</th>
<th>日期</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.packtpub.com/application-development/learning-internet-things" target="_blank" rel="external">Learning Internet of Things</a></td>
<td>Peter Waher</td>
<td>2015.02</td>
<td>Book &amp; Ebook</td>
<td></td>
</tr>
<tr>
<td><a href="http://designiot.phodal.com" target="_blank" rel="external">一步步搭建物联网系统</a></td>
<td>Phodal Fengda &amp; Fortware</td>
<td>2014.11</td>
<td>电子书</td>
<td>-</td>
</tr>
<tr>
<td>[Learning Internet of Things]</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<h2 id="物联网相关书籍"><a href="#物联网相关书籍" class="headerlink" title="物联网相关书籍"></a>物联网相关书籍</h2><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><table>
<thead>
<tr>
<th>书名</th>
<th>作者</th>
<th>日期</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td> RESTful Web APIs</td>
<td>Leonard Richardson &amp; Mike Amundsen</td>
<td>2014.06</td>
<td>-</td>
</tr>
<tr>
<td> REST实战</td>
<td>韦伯 &amp; 帕拉斯泰迪斯</td>
<td>2011.09.</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><table>
<thead>
<tr>
<th>书名</th>
<th>作者</th>
<th>日期</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td> Arduino从基础到实践</td>
<td>Michael McRoberts</td>
<td>2013.03</td>
<td>-</td>
</tr>
<tr>
<td> Arduino Cookbook</td>
<td>Michael Margolis</td>
<td>2011.04</td>
<td>-</td>
</tr>
<tr>
<td> Raspberry Pi用户指南</td>
<td>Eben Upton</td>
<td>2013.08</td>
<td>-</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IoT-Struct&quot;&gt;&lt;a href=&quot;#IoT-Struct&quot; class=&quot;headerlink&quot; title=&quot;IoT Struct&quot;&gt;&lt;/a&gt;IoT Struct&lt;/h2&gt;&lt;div align = &quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/20160513/struct.jpg&quot; alt=&quot;IoT Struct&quot;&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="IoT" scheme="http://cuiqingwei.github.io/tags/IoT/"/>
    
  </entry>
  
</feed>
