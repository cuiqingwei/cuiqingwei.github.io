<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iZheteng</title>
  <subtitle>Enjoy work, Enjoy life!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cuiqingwei.github.io/"/>
  <updated>2017-09-21T05:41:19.000Z</updated>
  <id>http://cuiqingwei.github.io/</id>
  
  <author>
    <name>cuiqingwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>酒店PMS</title>
    <link href="http://cuiqingwei.github.io/2017/09/21/2017-09-21-%E9%85%92%E5%BA%97PMS/"/>
    <id>http://cuiqingwei.github.io/2017/09/21/2017-09-21-酒店PMS/</id>
    <published>2017-09-20T16:09:08.000Z</published>
    <updated>2017-09-21T05:41:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是PMS"><a href="#什么是PMS" class="headerlink" title="什么是PMS"></a>什么是PMS</h1><p><strong>PMS</strong>：Property Management System，直译为物业管理系统，也有翻译为：酒店管理系统。</p>
<p>酒店PMS系统是一个以计算机为工具，对酒店信息管理和处理的人机综合系统，它不但能准确及时地反映酒店业务的当前状态、房源状态，还能快速实现客人预定入住到财务对账等一系列操作;不但是一个数据统计的数据库，还能够提供各方面的报表，且利用数据进行统计分析，从而更有利于酒店的经营和管理。</p>
<a id="more"></a>
<h1 id="PMS行业情况"><a href="#PMS行业情况" class="headerlink" title="PMS行业情况"></a>PMS行业情况</h1><p>PMS是酒店前台预订系统的简称，是酒店管理的必备软件之一，是酒店销售完全信息化（直连）的唯一入口，也是我国酒店星级评定的重要衡量指标之一，所有评定过的三星级及以上的酒店都拥有PMS。</p>
<p>而PMS厂商一般都提供酒店管理的全套软件或是酒店管理的解决方案，包括前台管理（预订、接待、收银、夜审、客房、客史、会员、餐饮、娱乐等）、后台管理（财务、物流、人事、维护、宽带等）和接口管理（内部接口和外部接口）等。所以如果某酒店采用某PMS厂商的PMS产品，那么该酒店的其他管理软件也基本上是来自于该PMS厂商，且酒店要更换产品会比较麻烦。</p>
<p>目前，我国的几大PMS厂商主要有：<br><strong>石基信息</strong>：（通过买断和代理Micros Fidelio）占有国内90%以上的五星级酒店市场和80%以上的高星级（4、5星级）酒店的市场份额，在高端酒店市场处在垄断地位；<strong>杭州西软科技</strong>：拥有国内最多的酒店客户群，已超过2600家酒店，于2006年被石基收购；<strong>北京中软好泰</strong>：在国内拥有第二大酒店客户群，于2008年被携程控股（好像已经收购了华仪技术，有待进一步澄清）；<strong>华仪软件</strong>：总部设在北京，市场份额06年还排第四，不过近两年发展比较缓慢；<strong>广州万讯（广州千里马）</strong>：占有珠江三角洲最大的市场份额，06年拥有大概1000家左右的市场，07年与pegasus solutions在华公司易旅科技结成合作伙伴，不过这两年发展缓慢；北京泰能：05年被石基信息收购，不过08年又自由了，现在拥有的酒店客户群大概有1500左右，酒店数量排在第三位。</p>
<h1 id="主流PMS"><a href="#主流PMS" class="headerlink" title="主流PMS"></a>主流PMS</h1><p>国际酒店有OPERA、FIDELIO，国内三到五星有中软、西软，腾云、千里马，中小型酒店有简单点、罗盘、芙蓉等。</p>
<p>其它还有：金天鹅、欣欣、方寸、齐创、华仪、金达莱、企发、智信、易能、云飞、千里马、大总管、捷信达…</p>
<blockquote>
<p>1987年10月在德国慕尼黑成立的Fidelio Software GmbH,成立仅仅四年就成为了欧洲顶尖的酒店软件管理产品，成立六年跃居世界酒店信息系统供应商之首。</p>
<p>之后并入美国Micros System Inc 公司，1995年 Micros成立中国分公司–上海富达，2003年北京中长石基信息技术有限公司从Micros公司取得了FIDELIO和OPERA中国唯一的销售许可。</p>
<p>FIDELIO和OPERA几乎是所有国内高端外资酒店的共同选择，<br>在国内，除非5星级或者有一定影响力的酒店，一般都不进行合作。</p>
<p>国内各方观点<br>1、FIDELIO不错，但是在操作的方便性、高效性上，没有本地系统优秀。有的人在90年代初做酒店，入门就玩FIDELIO，根本就没有好好研究在90年代后期发展起来的本地造，妄下断语。闭眼讲话，拿着无知当高尚。<br>2、FIDELIO早期版本建立起来的严谨、稳定、茁壮的程序风格可以说让OPERA SYSTEMS给破坏成了昨日黄花。各位谁知：FIDELIO OPERA7.0版因为数据处理错误，FIDELIO放弃不可一世的面孔，自己上门为用户打补丁。<br>3、FIDELIO太孤傲了，不仅仅忽略中国市场群落的需求呼声，没有为大陆开发中文增值包（连微软ms office都为特意为中国市场增加了增值服务包),而且故障维护费用惊人。他们的理念是：一切故障都是客户的故障。我的系统永远是正常的。我想引用一位欧洲学者的话：偏见比无知更可怕。 但我们承认computer system 是作为一个酒店整体解决方案（ERP）进入酒店，系统本身融入了开发者的管理思想和理念，如果说安装了系统，不如说我们导入了新的经营思想，FIDELIO在技术上渐失优势的时刻，仍有管理牌紧握。</p>
</blockquote>
<h1 id="PMS链接"><a href="#PMS链接" class="headerlink" title="PMS链接"></a>PMS链接</h1><p>OPERA<br><a href="https://www.oracle.com/industries/hospitality/products/opera-property-services/index.html" target="_blank" rel="external">https://www.oracle.com/industries/hospitality/products/opera-property-services/index.html</a><br>千里马<br><a href="http://www.armitage.com.cn" target="_blank" rel="external">http://www.armitage.com.cn</a><br>金天鹅<br><a href="http://www.jdglrj.com/down.html" target="_blank" rel="external">http://www.jdglrj.com/down.html</a></p>
<h1 id="云PMS"><a href="#云PMS" class="headerlink" title="云PMS"></a>云PMS</h1><p>罗盘<br><a href="http://www.luopan.cn/" target="_blank" rel="external">http://www.luopan.cn/</a><br>住哲<br><a href="http://www.zhuzher.com/" target="_blank" rel="external">http://www.zhuzher.com/</a><br>智选云<br><a href="http://www.ccshis.com/index.html" target="_blank" rel="external">http://www.ccshis.com/index.html</a><br>天龙云<br><a href="http://pms.yaduo.com/login.html" target="_blank" rel="external">http://pms.yaduo.com/login.html</a><br>民宿云<br><a href="http://www.minsuyun.com/home/index.html" target="_blank" rel="external">http://www.minsuyun.com/home/index.html</a><br>方信科技<br><a href="http://www.cnfangxin.com/cn/rjcp.asp?id=236" target="_blank" rel="external">http://www.cnfangxin.com/cn/rjcp.asp?id=236</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是PMS&quot;&gt;&lt;a href=&quot;#什么是PMS&quot; class=&quot;headerlink&quot; title=&quot;什么是PMS&quot;&gt;&lt;/a&gt;什么是PMS&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;PMS&lt;/strong&gt;：Property Management System，直译为物业管理系统，也有翻译为：酒店管理系统。&lt;/p&gt;
&lt;p&gt;酒店PMS系统是一个以计算机为工具，对酒店信息管理和处理的人机综合系统，它不但能准确及时地反映酒店业务的当前状态、房源状态，还能快速实现客人预定入住到财务对账等一系列操作;不但是一个数据统计的数据库，还能够提供各方面的报表，且利用数据进行统计分析，从而更有利于酒店的经营和管理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PMS" scheme="http://cuiqingwei.github.io/tags/PMS/"/>
    
  </entry>
  
  <entry>
    <title>如何查看网站是用什么语言开发的?</title>
    <link href="http://cuiqingwei.github.io/2017/09/21/2017-10-31-%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%AB%99%E6%98%AF%E7%94%A8%E4%BB%80%E4%B9%88%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%9A%84/"/>
    <id>http://cuiqingwei.github.io/2017/09/21/2017-10-31-如何查看网站是用什么语言开发的/</id>
    <published>2017-09-20T16:09:08.000Z</published>
    <updated>2017-10-31T03:16:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>查看网站开发语言方法：</p>
<p>1）利用工具直接输入查询</p>
<p><a href="http://w3techs.com/sites/info/baidu.com" target="_blank" rel="external">http://w3techs.com/sites/info/baidu.com</a><br><a href="https://builtwith.com/baidu.com" target="_blank" rel="external">https://builtwith.com/baidu.com</a></p>
<p>把最后的域名换成想知道的网址，系统会自动分析。</p>
<p>2）后台语言可以通过服务器类型推测。</p>
<p>一般情况下，服务器类型可以通过 Response Header 来看。</p>
<p>比如 IIS，一般是 <a href="http://ASP.NET" target="_blank" rel="external">http://ASP.NET</a></p>
<p>Tomcat、Resin、JBoss，一般是 Java。</p>
<p>Nginx，不一定，很有可能是 PHP 或者 Python 之类的脚本语言。</p>
<p>3）后台框架就更难分析了，不过可以尝试通过 HTML 代码格式，或者 URL 来分析。</p>
<p>比如 URL 后缀是 do，可能用到了 Java Struts。</p>
<p>URL 一般都是 index.php，但是后面参数不同，那么可能用到了 PHP 的一些模板引擎。</p>
<p>当然，这个分析不可靠，只是一种推测。</p>
<p>4）想办法联系网站创始人：），邮件或私信询问。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;查看网站开发语言方法：&lt;/p&gt;
&lt;p&gt;1）利用工具直接输入查询&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://w3techs.com/sites/info/baidu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://w3techs.co
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Ionic框架开发Hybird应用</title>
    <link href="http://cuiqingwei.github.io/2017/09/19/2017-09-19-%E4%BD%BF%E7%94%A8Ionic%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91Hybird%E5%BA%94%E7%94%A8/"/>
    <id>http://cuiqingwei.github.io/2017/09/19/2017-09-19-使用Ionic框架开发Hybird应用/</id>
    <published>2017-09-18T16:09:08.000Z</published>
    <updated>2017-09-22T03:41:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Ionic"><a href="#什么是Ionic" class="headerlink" title="什么是Ionic"></a>什么是Ionic</h1><p>Ionic是一个强大的HTML5 原生应用（Native App）开发框架，帮助你用HTML，CSS和JavaScript构建具有原生味道的移动应用;</p>
<p>Ionic是一个高级HTML5混合式移动应用开发框架，同时也是一个开源的前端框架;</p>
<p>Ionic注重的是视觉效果和用户体验，所以使用了AngularJS来构建很各种酷的效果;</p>
<p>Ionic是类似Bootstrap概念的WebApp框架,提供了Hybrid App的基础CSS,UI控件,工程架构和最佳实践。</p>
<a id="more"></a>
<h1 id="Ionic的优势"><a href="#Ionic的优势" class="headerlink" title="Ionic的优势"></a>Ionic的优势</h1><ul>
<li>性能优异</li>
<li>基于红的发紫AngularJs</li>
<li>漂亮的UI</li>
<li>强大的命令行(基于更热门的NodeJS)</li>
<li>开发团队非常活跃，</li>
<li>相关配套非常齐全：</li>
<li>相对充足的学习资料，Learn Iconic,The Iconic book</li>
<li>ngcordova，将主流的Cordova API或者Cordova插件封装为AngularJS扩展，使用非常方便。</li>
<li>开源免费的webfont icon库ionicons,基本满足你icon需求。</li>
<li>甚至最近开发出的可视化开发工具Ionic Creator</li>
<li>最后便是至关重要的，异常活跃的在线社区。</li>
</ul>
<h1 id="谈谈-Hybrid-app"><a href="#谈谈-Hybrid-app" class="headerlink" title="谈谈 Hybrid app"></a>谈谈 Hybrid app</h1><p>Ionic+Cordova的组合是一个跨平台的移动开发框架，属于HybirdApp开发模式。其中Ionic是一个前端框架，集成了AngularJs在里面，有很好很漂亮的UI控件。Cordova本身就是一个跨平台的移动开发框架，可以将应用打包成各个平台下的应用。他们之间的关系可以用下面的图展示：</p>
<p><img src="/img/20170919/webapp0.png" alt=""></p>
<p>从网下图，可以很直观的看出Native app 、Web app和Hybrid app三者之间的区别：</p>
<p><img src="/img/20170919/webapp1.png" alt=""><br><img src="/img/20170919/webapp2.png" alt=""></p>
<ul>
<li><p>1）Native APP：Native *<br>Code编程，代码编译之后以2进制或者字节码的形式运行在OS上，直接调用OS的Device API；</p>
</li>
<li><p>2）Web APP * ，以HTML+JS+CSS等WEB技术编程，代码运行在浏览器中，通过浏览器来调用Device API（取决于HTML5未来的支持能力）：</p>
</li>
<li><p>3）Hybrid APP * ，部分代码以WEB技术编程，部分代码由某些Native Container承担（例如PhonGAP插件，BAE插件），其目的是在HTML5尚未完全支持Device API和Network API的目前阶段，承担这部分职责。</p>
</li>
</ul>
<p>总体来讲，<strong> Hybrid App是同时采用网页语言与程序语言进行开发，通过不同的应用商店进行打包与分发，应用的特性更接近原生应用而且又区别与Web应用 </strong> 。但是在开发过程中同时使用了网页语言，所以开发成本与难度大大降低。也就是说Hybrid App兼具了Native App与Web App两者的诸多优点。</p>
<p>Hybrid App有以下的特性：</p>
<blockquote>
<p>开发时可能不采用或者大部分不采用原生语言，但是却有所有原生应用的特性；<br>架构方案会和原生有出入，基本由工具而定；<br>具有跨平台特性；<br>一般开发相对原生开发的方式要简单。</p>
</blockquote>
<p>工具方面，我们可以使用Angular.js用于双向数据绑定和网络请求以及视图管理等工作，使用require.js来实现模块化开发，组织代码.</p>
<h1 id="安装Cordova和Ionic"><a href="#安装Cordova和Ionic" class="headerlink" title="安装Cordova和Ionic"></a>安装Cordova和Ionic</h1><p>如果你想要开始Ionic开发，你需要先安装Node.js。</p>
<blockquote>
<p>在Win系统中：<br><strong>npm install -g cordova ionic</strong><br>在Mac中，需要加上sudo：<br><strong>sudo npm install -g cordova ionic</strong><br>安装完后在cmd或者终端输入ionic：</p>
</blockquote>
<p><img src="/img/20170919/webapp3.png" alt=""></p>
<p>这样就表示安装成功。</p>
<h1 id="开始一个Ionic-App"><a href="#开始一个Ionic-App" class="headerlink" title="开始一个Ionic App"></a>开始一个Ionic App</h1><p>Ionic官网<a href="http://ionicframework.com为开发者提供了多个开发模板，如：" target="_blank" rel="external">http://ionicframework.com为开发者提供了多个开发模板，如：</a></p>
<blockquote>
<p>空白模板（Black app）：<br><strong>ionic start myApp blank</strong><br>tabs模板 ：<br><strong>ionic start myApp tabs</strong><br>sidemenu模板：<br><strong>ionic start myApp sidemenu</strong></p>
</blockquote>
<p><img src="/img/20170919/webapp4.png" alt=""></p>
<h1 id="开始创建一个工程："><a href="#开始创建一个工程：" class="headerlink" title="开始创建一个工程："></a>开始创建一个工程：</h1><p>ionic start myApp1 tabs</p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>cd myApp1<br>ionic cordova platform add ios<br>ionic cordova build ios<br>ionic cordova emulate ios<br>然后再输入下面这串命令行，继续刷屏：<br>sudo npm install -g ios-sim<br>然后继续输入：<br>ionic cordova emulate ios<br>就会弹出模拟器了。</p>
<p><img src="/img/20170919/webapp5.png" alt=""></p>
<p>我推荐大家使用<strong>ionic serve</strong>命令来使用电脑浏览器调试，如图：</p>
<p><img src="/img/20170919/webapp6.png" alt=""></p>
<h1 id="Ionic插件安装与卸载"><a href="#Ionic插件安装与卸载" class="headerlink" title="Ionic插件安装与卸载"></a>Ionic插件安装与卸载</h1><p>使用下面的命令查询、安装、卸载插件：<br>ionic plugin list       //列出所有已安装插件<br>ionic plugin remove 插件名     //先根据上面的list列出插件，然后根据插件名卸载<br>ionic plugin  add  插件地址     //这个插件地址可以是github的项目地址，也可以是一个文件夹路径<br>ionic –help     //查看帮助文件<br>ionic项目托管平台地址： <a href="https://github.com/driftyco/ionic/" target="_blank" rel="external">https://github.com/driftyco/ionic/</a><br>css组件：<a href="http://www.ionicframework.com/docs/components/#header" target="_blank" rel="external">http://www.ionicframework.com/docs/components/#header</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>Ionic+Cordova开发环境搭建 <a href="http://blog.csdn.net/gameloft9/article/details/50923615" target="_blank" rel="external">http://blog.csdn.net/gameloft9/article/details/50923615</a><br>使用ionic框架开发移动hybrid应用 <a href="https://segmentfault.com/a/1190000002688632" target="_blank" rel="external">https://segmentfault.com/a/1190000002688632</a><br>ionic react-native和native开发移动app那个好 ?  <a href="http://www.phonegap100.com/article-486-1.html" target="_blank" rel="external">http://www.phonegap100.com/article-486-1.html</a><br>ionic工作室 <a href="http://www.ionic.wang" target="_blank" rel="external">http://www.ionic.wang</a><br>ionic china <a href="http://ionic-china.com/index.html" target="_blank" rel="external">http://ionic-china.com/index.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是Ionic&quot;&gt;&lt;a href=&quot;#什么是Ionic&quot; class=&quot;headerlink&quot; title=&quot;什么是Ionic&quot;&gt;&lt;/a&gt;什么是Ionic&lt;/h1&gt;&lt;p&gt;Ionic是一个强大的HTML5 原生应用（Native App）开发框架，帮助你用HTML，CSS和JavaScript构建具有原生味道的移动应用;&lt;/p&gt;
&lt;p&gt;Ionic是一个高级HTML5混合式移动应用开发框架，同时也是一个开源的前端框架;&lt;/p&gt;
&lt;p&gt;Ionic注重的是视觉效果和用户体验，所以使用了AngularJS来构建很各种酷的效果;&lt;/p&gt;
&lt;p&gt;Ionic是类似Bootstrap概念的WebApp框架,提供了Hybrid App的基础CSS,UI控件,工程架构和最佳实践。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hybird" scheme="http://cuiqingwei.github.io/tags/Hybird/"/>
    
      <category term="Ionic" scheme="http://cuiqingwei.github.io/tags/Ionic/"/>
    
  </entry>
  
  <entry>
    <title>HomeKit初体验</title>
    <link href="http://cuiqingwei.github.io/2017/02/09/2017-02-09-Homekit%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://cuiqingwei.github.io/2017/02/09/2017-02-09-Homekit初体验/</id>
    <published>2017-02-08T16:27:40.000Z</published>
    <updated>2017-02-22T11:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HomeKit-Siri-初体验-！"><a href="#HomeKit-Siri-初体验-！" class="headerlink" title="HomeKit Siri 初体验 ！"></a>HomeKit Siri 初体验 ！</h1><div align="center"><br><iframe height="498" width="510" src="http://player.youku.com/embed/XMjUwMzIyMjEyMA==" frameborder="0" 'allowfullscreen'=""></iframe><br></div>

<a id="more"></a>
<h1 id="界面效果"><a href="#界面效果" class="headerlink" title="界面效果"></a>界面效果</h1><p><img src="/img/20170209/homekit1.jpg" alt=""><br><img src="/img/20170209/homekit2.jpg" alt=""></p>
<p>2017年香港光顾苹果旗舰店时，看到了一些第三方Homekit产品，于是萌生了折腾Homekit的想法。</p>
<p><img src="/img/20170209/devices.jpg" alt=""></p>
<p>折腾时所用的硬件，可以根据个人需要自行更改:</p>
<ul>
<li>树莓派 3 代 B 型（包含 Micor SD 卡）</li>
<li>YeeLight 智能灯泡</li>
<li>E27螺口灯座</li>
<li>网线、MicroUSB线</li>
<li>MacMini 电脑 （ Windows PC、Ubuntu、Linux 均可）</li>
</ul>
<h1 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h1><h3 id="1-安装Raspbian系统"><a href="#1-安装Raspbian系统" class="headerlink" title="1.安装Raspbian系统"></a>1.安装Raspbian系统</h3><p>系统镜像采用 <strong>2016-09-26-Hassbian-Bluetooth.img</strong><br>下载地址 <a href="http://pan.baidu.com/s/1qYs6hn2" target="_blank" rel="external">http://pan.baidu.com/s/1qYs6hn2</a></p>
<p>Mac制作命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">df -h</div><div class="line">diskutil unmount /dev/disk3s1</div><div class="line">dd bs=4m if=2016-09-26-Hassbian-Bluetooth.img of=/dev/rdisk3</div><div class="line">diskutil unmountdisk /dev/disk3</div></pre></td></tr></table></figure></p>
<blockquote>
<p>可参考 <a href="http://cuiqingwei.github.io/2016/02/15/2016-02-15-Raspberry-Pi/">http://cuiqingwei.github.io/2016/02/15/2016-02-15-Raspberry-Pi/</a></p>
</blockquote>
<h3 id="2-登录Raspberry"><a href="#2-登录Raspberry" class="headerlink" title="2.登录Raspberry"></a>2.登录Raspberry</h3><p>安装完成之后，用网线连接好树莓派和路由器，打开电脑的终端，用 ssh 登录树莓派。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh pi@raspberrypi.local</div><div class="line">或者</div><div class="line">ssh pi@ip</div></pre></td></tr></table></figure>
<p>ip可以在路由器的运行网页查看到,当然，Windows系统可以通过 <a href="http://www.mylanviewer.com/network-ip-scanner.html" target="_blank" rel="external">MyLanViewer Network/IP Scanner</a> 扫描等到目标地址。<br>之后终端会要求输入密码，输入 <strong>raspberry</strong> 回车即可。输入密码的途中终端不会显示任何字符，只需要正常输入即可。</p>
<h3 id="3-更新软件源"><a href="#3-更新软件源" class="headerlink" title="3.更新软件源"></a>3.更新软件源</h3><p>登录树莓派之后，先升级软件源，在终端下输入以下代码，等待一段时间即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get upgrade</div></pre></td></tr></table></figure>
<h1 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo raspi-config</div></pre></td></tr></table></figure>
<p>change_locale – 更改语言设置。在Locales to be generated: 中，选择en_US.UTF-8和zh_CN.UTF-8。在Default locale for the system environment:中，选择en_US.UTF-8（等启动完机器，装完中文字体，再改回zh_CN.UTF-8，否则第一次启动会出现方块）。</p>
<blockquote>
<p>可参考 <a href="http://blog.csdn.net/xdw1985829/article/details/38816375" target="_blank" rel="external">http://blog.csdn.net/xdw1985829/article/details/38816375</a></p>
</blockquote>
<h1 id="打开-Yeelight-的极客模式"><a href="#打开-Yeelight-的极客模式" class="headerlink" title="打开 Yeelight 的极客模式"></a>打开 Yeelight 的极客模式</h1><p>在 App Store 下载官方的 Yeelight 应用，先连接上灯泡.然后点右上角的三根横杠，在下方打开极客模式。</p>
<h1 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h1><p>回到终端，我们继续来安装 Node.js 。从版本 4.0.0 开始，Node.js 默认支持基于 ARM 的平台，我们只需要输入相关代码即可。</p>
<p>依次在终端输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget https://nodejs.org/dist/v4.3.2/node-v4.3.2-linux-armv6l.tar.gz</div><div class="line">tar -xvf node-v4.3.2-linux-armv6l.tar.gz</div><div class="line">cd node-v4.3.2-linux-armv6l</div><div class="line">sudo cp -R * /usr/local/</div></pre></td></tr></table></figure>
<p>完成之后，输入 node -v 检查一下是否安装完成，如果显示  v4.3.2 ，则表示 Node.js 安装成功。<br>安装 Avahi 和相关依赖软件包</p>
<p>在终端输入以下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libavahi-compat-libdnssd-dev</div></pre></td></tr></table></figure>
<p>安装 HomeBridge 和相关依赖软件包</p>
<p>依次在终端输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g --unsafe-perm homebridge hap-nodejs node-gyp</div><div class="line">cd /usr/local/lib/node_modules/homebridge/</div><div class="line">sudo npm install --unsafe-perm bignum</div><div class="line">cd /usr/local/lib/node_modules/hap-nodejs/node_modules/mdns</div><div class="line">sudo node-gyp BUILDTYPE=Release rebuild</div></pre></td></tr></table></figure>
<p>添加 Yeelight 配置文件</p>
<p>输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g homebridge-yeelight</div></pre></td></tr></table></figure>
<p>等待命令运行结束后，输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /home/pi/.homebridge/</div><div class="line">vi config.json</div></pre></td></tr></table></figure>
<p>点击键盘的 i 键，终端左下角出现 – INSERT – ，如下图所示。</p>
<p>将以下代码复制到终端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;bridge&quot;: &#123;</div><div class="line">        &quot;name&quot;: &quot;IoTBridge&quot;,</div><div class="line">        &quot;username&quot;: &quot;28:6C:07:10:BF:16&quot;,</div><div class="line">        &quot;port&quot;: 51825,</div><div class="line">        &quot;pin&quot;: &quot;031-45-154&quot;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    &quot;platforms&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;platform&quot; : &quot;yeelight&quot;,</div><div class="line">            &quot;name&quot; : &quot;yeelight&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>粘贴完成后，按Esc键，输入 :wq 然后回车。</p>
<p>之后，便可以运行 HomeBridge ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">homebridge</div></pre></td></tr></table></figure>
<p>这一步完成之后，HomeBridge 就安装完毕并且开始运行， YeeLight 彩光灯也成功接入 Apple HomeKit ，打开 iOS 10 自带的家庭 App， 点击添加配件即可。会有两个配件，第一个是 IoTBridge ，这是一个桥接器；还有一个才是我们要控制的灯泡。</p>
<p>现在，你就可以享受 <strong>「嘿 Siri ，帮我开个灯」</strong> 了。<br>在树莓派启动后自动运行 HomeBridge 服务</p>
<h1 id="最后一步，把-HomeBridge-服务加入到树莓派的系统服务里。"><a href="#最后一步，把-HomeBridge-服务加入到树莓派的系统服务里。" class="headerlink" title="最后一步，把 HomeBridge 服务加入到树莓派的系统服务里。"></a>最后一步，把 HomeBridge 服务加入到树莓派的系统服务里。</h1><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>首先我们要开启 root 账户，首先在终端输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo passwd root</div></pre></td></tr></table></figure>
<p>然后会提示你设置 root 账户密码，第一次输入之后还要确认一次，一样两次输入不会有任何字符显示。输入完毕之后，启用 root 账户，输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo passwd --unlock root</div></pre></td></tr></table></figure>
<p>然后会提示报错： passwd: password expiry information changed. ，原因是新版的系统默认禁止 ssh 登录 root 账户，我们需要修改一下配置文件。在终端输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<p>用 Ctrl + W 搜索「 PermitRootLogin 」，找到之后将 PermitRootLogin without-password 改成 PermitRootLogin yes ，然后按 Ctrl + O 保存，回车之后退出编辑器。</p>
<p>GitHub 提供了三种让树莓派启动后自动运行 HomeBridge 服务的方法，我选择的是 init.d 的方式。打开 这个网页 ，将文件下载到本地，然后将 template 重命名为 homebridge （或者任何你想要的名字） ，放到树莓派目录 /etc/init.d 下。注意这里一定要</p>
<p>用 root 账户 ssh 登录Raspberry。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /etc/init.d</div><div class="line">vi homebridge</div></pre></td></tr></table></figure>
<p>点击键盘的 i 键，终端左下角出现 – INSERT – ，如下图所示。</p>
<p>将以下代码复制到终端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">### BEGIN INIT INFO</div><div class="line"># Provides: homebridge</div><div class="line"># Required-Start:    $network $remote_fs $syslog</div><div class="line"># Required-Stop:     $remote_fs $syslog</div><div class="line"># Default-Start:     2 3 4 5</div><div class="line"># Default-Stop:      0 1 6</div><div class="line"># Short-Description: Start daemon at boot time</div><div class="line"># Description:       Enable service provided by daemon.</div><div class="line">### END INIT INFO</div><div class="line"></div><div class="line">dir=&quot;/home/pi&quot;</div><div class="line">cmd=&quot;DEBUG=* /usr/local/bin/homebridge&quot;</div><div class="line">user=&quot;pi&quot;</div></pre></td></tr></table></figure>
<p>完成后保存，然后回到终端，依次输入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo chmod 755 /etc/init.d/homebridge</div><div class="line">sudo update-rc.d homebridge defaults</div></pre></td></tr></table></figure>
<p>现在，你可以在终端输入 HomeBridge ，等待服务运行之后关掉终端，看是否可以继续使用家庭 App 开关灯泡；或者重启一下树莓派，看看 HomeBridge 服务是否正常运行。</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>将homebridge设置成随系统启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd /</div><div class="line">sudo useradd --system homebridge</div><div class="line">sudo mkdir /var/homebridge</div><div class="line">sudo cp ~/.homebridge/config.json /var/homebridge/</div><div class="line">sudo cp -r ~/.homebridge/persist /var/homebridge</div><div class="line">sudo chmod -R 0777 /var/homebridge</div><div class="line">cd /etc/default</div><div class="line">sudo nano homebridge</div></pre></td></tr></table></figure>
<p>将下面的内容复制粘贴进去</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Defaults / Configuration options for homebridge</div><div class="line"># The following settings tells homebridge where to find the config.json file and where to persist the data (i.e. pairing and others)</div><div class="line">HOMEBRIDGE_OPTS=-U /var/homebridge</div><div class="line"></div><div class="line"># If you uncomment the following line, homebridge will log more</div><div class="line"># You can display this via systemd&apos;s journalctl: journalctl -f -u homebridge</div><div class="line"># DEBUG=*</div></pre></td></tr></table></figure>
<p>Ctrl+X，然后Y，回车，保存退出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /etc/systemd/system</div><div class="line">sudo nano homebridge.service</div></pre></td></tr></table></figure>
<p>将下面的内容复制粘贴进去</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Node.js HomeKit Server</div><div class="line">After=syslog.target network-online.target</div><div class="line">[Service]</div><div class="line">Type=simple</div><div class="line">User=homebridge</div><div class="line">EnvironmentFile=/etc/default/homebridge</div><div class="line">ExecStart=/usr/lib/node_modules/homebridge/bin/homebridge $HOMEBRIDGE_OPTS</div><div class="line">Restart=on-failure</div><div class="line">RestartSec=10</div><div class="line">KillMode=process</div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<p>然后Ctrl+X，然后Y，回车，保存退出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd /</div><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo systemctl enable homebridge</div><div class="line">sudo systemctl start homebridge</div><div class="line">sudo systemctl status homebridge</div><div class="line">sudo reboot      ####重启树莓派####</div></pre></td></tr></table></figure>
<p>如果以上均成功运行，那么恭喜你，一切都大功告成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HomeKit-Siri-初体验-！&quot;&gt;&lt;a href=&quot;#HomeKit-Siri-初体验-！&quot; class=&quot;headerlink&quot; title=&quot;HomeKit Siri 初体验 ！&quot;&gt;&lt;/a&gt;HomeKit Siri 初体验 ！&lt;/h1&gt;&lt;div align = &quot;center&quot;&gt;&lt;br&gt;&lt;iframe height=498 width=510 src=&#39;http://player.youku.com/embed/XMjUwMzIyMjEyMA==&#39; frameborder=0 &#39;allowfullscreen&#39;&gt;&lt;/iframe&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="Raspberry" scheme="http://cuiqingwei.github.io/tags/Raspberry/"/>
    
      <category term="HomeKit" scheme="http://cuiqingwei.github.io/tags/HomeKit/"/>
    
  </entry>
  
  <entry>
    <title>OpenWRT之HomeKit</title>
    <link href="http://cuiqingwei.github.io/2017/02/08/2017-02-08-OpenWRT%E4%B9%8BHomeKit/"/>
    <id>http://cuiqingwei.github.io/2017/02/08/2017-02-08-OpenWRT之HomeKit/</id>
    <published>2017-02-08T08:20:56.000Z</published>
    <updated>2017-02-22T07:47:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-制备openwrt系统镜像"><a href="#1-制备openwrt系统镜像" class="headerlink" title="1.制备openwrt系统镜像"></a>1.制备openwrt系统镜像</h1><p>预编译的openwrt是musl的toolchain，而homebridge需要glibc的toolchain所以需要自己编译系统。</p>
<p>建议安装完成后开启ssh，直接用putty和winscp来传送文件和操作虚拟机更方便。<br>以下所有命令都是通过putty登陆虚拟机或使用虚拟机的terminal来执行的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt update</div></pre></td></tr></table></figure>
<p>安装编译系统需要的软件包:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt update</div></pre></td></tr></table></figure>
<p>下载openwrt最新代码，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/openwrt/openwrt.git</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>将feeds.conf.default改名为feeds.conf</p>
<p>更新feeds部分的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./scripts/feeds update -a</div><div class="line">./scripts/feeds install -a</div></pre></td></tr></table></figure>
<blockquote>
<p>使用feeds文件夹替换掉openwrt，原版代码不带avahi的dev库，需要自己添加支持；<br>另外自带nodejs的版本低于5.0启动homebridge的时候会有个warning，一并更换成最新版。</p>
</blockquote>
<p>openwrt编译配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make menuconfig</div></pre></td></tr></table></figure>
<p>需要的软件包：<br>Advanced configuration options (for developers)  —&gt;<br>      Toolchain Options  —&gt;<br>         C Library implementation (Use musl)  —&gt;<br>            [X] Use (e)glibc<br>Base system  —&gt;<br>   block-mount、ca-certificates<br>Development —&gt;<br>   <m> gcc<br>   <m> make<br>Kernel modules  —&gt;<br>    Filesystems  —&gt;<br>       kmod-fs-exfat、kmod-fs-ext4、kmod-fs-ntfs、kmod-fs-vfat<br>    USB Support  —&gt;<br>       kmod-usb-storage-extras、kmod-usb2、kmod-usb3<br>Languages  —&gt;<br>    Node.js  —&gt;<br>        <m> node<br>    Python  —&gt;<br>        <m> python<br>Libraries  —&gt;<br>   libavahi-compat-libdnssd-dev<br>Network  —&gt;<br>    mosquitto<br>LuCi   —&gt;</m></m></m></m></p>
<pre><code>1. Collections  ---&gt;
   luci
</code></pre><p>保存后开始编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make V=s</div></pre></td></tr></table></figure>
<p>趁着时候没事干把准备好的U盘连入虚拟机，格式化成ext3/ext4格式，插到路由器的USB接口上。</p>
<p>刷入系统不再详述，不会搞的可以百度，这方面的教程遍地。<br>成功后进入路由器管理界面luci，system下将语言改为中文。设置路由器登陆密码，然后使用putty和winscp即可连接到路由器文件系统了。<br>将U盘查到路由器上等一会以后，从路由器管理界面找到如下位置，看到U盘的大小说明成功。</p>
<h1 id="2-openwrt-挂载overlay到U盘"><a href="#2-openwrt-挂载overlay到U盘" class="headerlink" title="2. openwrt 挂载overlay到U盘"></a>2. openwrt 挂载overlay到U盘</h1><ul>
<li>2.1. 添加必要软件</li>
</ul>
<p><strong>block-mount</strong><br><strong>kmod-fs-ext4</strong><br><strong>kmod-usb-ohci</strong><br><strong>kmod-usb-storage</strong><br><strong>fdisk</strong><br><strong>cfdisk</strong><br><strong>e2fsprogs</strong></p>
<p>可以在 <strong>menuconfig</strong> 通过输入 <strong>/</strong> 查找这些组件。</p>
<ul>
<li>2.2. 升级系统</li>
</ul>
<p><strong>sysupgrade -v xxxx-sysupgrade.bin</strong></p>
<ul>
<li>2.3. 分区操作</li>
</ul>
<p><strong>cfdisk</strong></p>
<p>分三个区<br>sda1（512M）为系统盘，相当于Windows系统的C盘；<br>sda2（128M)为交换分区，用于内存交换；<br>sda3(剩余)为存储区，主要放置较大文件</p>
<ul>
<li><p>2.4.格式化各分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkfs.ext4 /dev/sda1 　　#将第一个分区格式化为ext3格式</div><div class="line">mkswap /dev/sda2    　　#将第二个分区格式化为swap交换分区</div><div class="line">mkfs.ext4 /dev/sda3 　　#将第三个分区格式化为ext3格式</div></pre></td></tr></table></figure>
</li>
<li><p>2.5.安装完成以后,挂载u盘.如下命令将默认的系统盘转移到u盘中.</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mount /dev/sda1 /mnt</div><div class="line">mkdir /tmp/root</div><div class="line">mount -o bind / /tmp/root</div><div class="line">cp /tmp/root/* /mnt -a</div><div class="line">umount /tmp/root</div></pre></td></tr></table></figure>
<ul>
<li>2.6.修改 /etc/config/fstab 文件,让系统启动自动挂载,修改成如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">config mount</div><div class="line">        option target   /overlay</div><div class="line">        option device   /dev/sda1</div><div class="line">        option fstype   ext4</div><div class="line">        option options  rw,sync</div><div class="line">        option enabled  1</div><div class="line">        option enabled_fsck 0</div></pre></td></tr></table></figure>
<ul>
<li>2.7.执行如下命令让其生效</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/fstab enable</div></pre></td></tr></table></figure>
<ul>
<li>2.8.重启后，执行df -h后如果发现/overlay挂载在/tmp/overlay-disabled上的解决方案：</li>
</ul>
<p><strong>rm /tmp/overlay-disabled/etc/extroot.md5sum</strong></p>
<p>或者删除/tmp/overlay-disabled目录下的所有系统文件，按照第2.5重新操作重启。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-制备openwrt系统镜像&quot;&gt;&lt;a href=&quot;#1-制备openwrt系统镜像&quot; class=&quot;headerlink&quot; title=&quot;1.制备openwrt系统镜像&quot;&gt;&lt;/a&gt;1.制备openwrt系统镜像&lt;/h1&gt;&lt;p&gt;预编译的openwrt是musl的toolchain，而homebridge需要glibc的toolchain所以需要自己编译系统。&lt;/p&gt;
&lt;p&gt;建议安装完成后开启ssh，直接用putty和winscp来传送文件和操作虚拟机更方便。&lt;br&gt;以下所有命令都是通过putty登陆虚拟机或使用虚拟机的terminal来执行的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt update&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装编译系统需要的软件包:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt update&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下载openwrt最新代码，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git clone git://github.com/openwrt/openwrt.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="OpenWRT" scheme="http://cuiqingwei.github.io/tags/OpenWRT/"/>
    
      <category term="HomeKit" scheme="http://cuiqingwei.github.io/tags/HomeKit/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry安装HAP-NodeJS</title>
    <link href="http://cuiqingwei.github.io/2017/02/08/2017-02-08-Raspberry%E5%AE%89%E8%A3%85HAP-NodeJS/"/>
    <id>http://cuiqingwei.github.io/2017/02/08/2017-02-08-Raspberry安装HAP-NodeJS/</id>
    <published>2017-02-07T16:27:40.000Z</published>
    <updated>2017-02-25T13:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载-Raspbian"><a href="#下载-Raspbian" class="headerlink" title="下载 Raspbian"></a>下载 Raspbian</h1><p><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="external">https://www.raspberrypi.org/downloads/raspbian/</a></p>
<h1 id="制作-TF-card"><a href="#制作-TF-card" class="headerlink" title="制作 TF card"></a>制作 TF card</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">df -h</div><div class="line">diskutil unmount /dev/disk2s1</div><div class="line">diskutil list</div><div class="line">dd bs=4m if=2017-01-11-raspbian-jessie.img of=/dev/rdisk2</div><div class="line">diskutil unmountdisk /dev/disk2</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>note：新的img默认没有打开ssh，在tf卡根目录新建名称为 ssh 的文件夹解决</p>
</blockquote>
<h1 id="登录树莓派"><a href="#登录树莓派" class="headerlink" title="登录树莓派"></a>登录树莓派</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh pi@raspberrypi.local</div></pre></td></tr></table></figure>
<h1 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</div><div class="line">sudo vi /etc/apt/sources.list</div></pre></td></tr></table></figure>
<p>进入编辑界面，用 <strong>#</strong> 注释掉原来的源，添加下方的源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deb http://mirrors.neusoft.edu.cn/raspbian/raspbian jessie main contrib non-free rpi</div></pre></td></tr></table></figure>
<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade -y</div></pre></td></tr></table></figure>
<h1 id="安装解决依赖"><a href="#安装解决依赖" class="headerlink" title="安装解决依赖"></a>安装解决依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install avahi-daemon avahi-discover libnss-mdns libavahi-compat-libdnssd-dev  build-essential -y</div><div class="line">service avahi-daemon start</div></pre></td></tr></table></figure>
<h1 id="增加nodejs源"><a href="#增加nodejs源" class="headerlink" title="增加nodejs源"></a>增加nodejs源</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~</div><div class="line">curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -</div></pre></td></tr></table></figure>
<h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd ~/Downloads</div><div class="line">wget http://nodejs.org/dist/v7.6.0/node-v7.6.0.tar.gz</div><div class="line">tar -xzf node-v7.6.0.tar.gz</div><div class="line">cd node-v7.6.0</div><div class="line">./configure</div><div class="line">make</div><div class="line">sudo make install</div></pre></td></tr></table></figure>
<h1 id="克隆HAP-NodeJS源码"><a href="#克隆HAP-NodeJS源码" class="headerlink" title="克隆HAP-NodeJS源码"></a>克隆HAP-NodeJS源码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/KhaosT/HAP-NodeJS.git</div></pre></td></tr></table></figure>
<h1 id="安装node-gyp"><a href="#安装node-gyp" class="headerlink" title="安装node-gyp"></a>安装node-gyp</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g node-gyp</div></pre></td></tr></table></figure>
<h1 id="切换到HAP-NodeJS文件夹下，运行"><a href="#切换到HAP-NodeJS文件夹下，运行" class="headerlink" title="切换到HAP-NodeJS文件夹下，运行"></a>切换到HAP-NodeJS文件夹下，运行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo npm istall</div><div class="line">node Core.js</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;下载-Raspbian&quot;&gt;&lt;a href=&quot;#下载-Raspbian&quot; class=&quot;headerlink&quot; title=&quot;下载 Raspbian&quot;&gt;&lt;/a&gt;下载 Raspbian&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/downloads/raspbian/&quot;&gt;https://www.raspberrypi.org/downloads/raspbian/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;制作-TF-card&quot;&gt;&lt;a href=&quot;#制作-TF-card&quot; class=&quot;headerlink&quot; title=&quot;制作 TF card&quot;&gt;&lt;/a&gt;制作 TF card&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;df -h&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;diskutil unmount /dev/disk2s1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;diskutil list&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dd bs=4m if=2017-01-11-raspbian-jessie.img of=/dev/rdisk2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;diskutil unmountdisk /dev/disk2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Raspberry" scheme="http://cuiqingwei.github.io/tags/Raspberry/"/>
    
      <category term="HAP-NodeJS" scheme="http://cuiqingwei.github.io/tags/HAP-NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>路亚装逼指南</title>
    <link href="http://cuiqingwei.github.io/2017/01/01/2017-01-01-%E8%B7%AF%E4%BA%9A%E8%A3%85%E9%80%BC%E6%8C%87%E5%8D%97/"/>
    <id>http://cuiqingwei.github.io/2017/01/01/2017-01-01-路亚装逼指南/</id>
    <published>2017-01-01T15:27:40.000Z</published>
    <updated>2017-07-04T07:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>何为<strong>路亚</strong>？你看有人站水边，竿尖挂个假鱼，抛出去，收回来，抛出去，再收，那就是了。</p>
<p><img src="/img/20170101/pjlure.jpg" alt=""></p>
<a id="more"></a>
<p>理论上，它是由<em>假鱼入水后模拟真鱼的泳姿，诱惑食肉鱼捕食到上钩的过程。</em> 其实本人看来，不全是。</p>
<blockquote>
<p>好比大晚上一醉酒哥们在你家楼下高声喧哗，你本是一慈善的人，此刻也恨不得一个啤酒瓶飞下去。</p>
</blockquote>
<p>路亚亦如是，老有个假货在你面前搔首弄姿游来游去，大鱼一看，怒了！给你狗日一口。这也就是为什么鲤鱼非路亚的对象鱼但是也经常上钩。</p>
<p><img src="/img/20170101/lure.jpg" alt=""></p>
<p>这里说如何<strong>装逼</strong>，本身这个运动就带有浓厚的装逼色彩，区别于台钓也就是我们常说的老头钓，<strong>一根杆，一团面，一个地方蹲一天</strong> 不同，路亚是不断的在运动，移动。</p>
<p><img src="/img/20170101/taidiao.jpg" alt=""></p>
<p>你经常看见很多初级爱好者，整个涉水服往水里一站。像模像样的在那搞，有的还弄什么防滑手套，顶个麦加巴斯的帽子防晒，腰间一个皮带，上面看得懂看不懂的工具一堆，上鱼了一定要吼一声:”中鱼！”，管他有没有把鱼吓跑。</p>
<p><img src="/img/20170101/tools.jpg" alt=""><br><img src="/img/20170101/zhuangbi.jpg" alt=""></p>
<p>初级爱好者最在乎的不是鱼，是<strong>距离</strong>。怎么说捏，你们看过<a href="http://baike.baidu.com/item/%E5%A4%A7%E6%B2%B3%E6%81%8B" target="_blank" rel="external">《大河恋》</a>吧，皮特演的那个电影，讲飞蝇钓的，有点类似路亚钓鱼，这个运动最骚的就是把鱼饵抛出去那一瞬间。</p>
<p><img src="/img/20170101/feiying.jpg" alt=""></p>
<p>初学者大部分姿势或者发力不对，不单抛出去没有距离，而且还导致鱼轮上的线缠住，这个他们叫炒线或者炒粉。你经常看见一哥们很帅气的一抛，然后硕大一个物体落水声，这就是炒粉了，然后你就看他焦头烂额的埋头在那理线，一般时间在5分钟，炒粉严重的你就看他拿剪刀在那剪线了。</p>
<p><img src="/img/20170101/chaofen.jpeg" alt=""></p>
<p>很快，熟练了，不炒粉了。想想要开始正儿八经搞了，开始抛投了，设备也换成顶级的了。好么，这下就真正开始关心抛投的距离了，看谁抛的远，这个30米，那个60米，越来越远。最后都可以一竿子打到对岸了，然后回过头一看，依然一天下来什么也没有。郁闷了，为什么捏？</p>
<blockquote>
<p>因为你喝醉了到人楼下去吼，想挨酒瓶子你得先知道这楼里还有没有住户啊，那楼都荒废十来年了，你吼一晚顶多冒个鬼出来吓吓你啊！</p>
</blockquote>
<p><img src="/img/20170101/zhaoyu.jpg" alt=""></p>
<p>然后,哥们明白了，路亚还有个关键，也是最要命的，<strong>找鱼！</strong> 你要知道那地方有没有鱼，有没有食肉鱼，在哪个水层，旁边有没有障碍导致你挂饵。</p>
<p>以上问题从发现到解决，几个月过去了，上论坛看视频找人带终于摸到路子了，碰到砸酒瓶的了。上鱼了！</p>
<p>这个时候你就又发现，初学者们在鱼出水那一瞬间不是用手去逮，一准要拿控鱼器夹着鱼嘴巴拉出水面。</p>
<p><img src="/img/20170101/yuhuo.jpg" alt=""></p>
<p>起来以后也一定是左手控鱼器扯鱼头，右手托着鱼的屁眼部平举，<strong>口含鱼竿</strong> 由同行的人拍照留念。然后把鱼平铺在地上，拿个宽40公分的大号软尺垫鱼下面展示尺寸，若没有尺子一定拿个矿泉水瓶子在旁边对比参照。</p>
<p><img src="/img/20170101/liangyu.jpg" alt=""></p>
<p>最后,末了特写鱼饵挂住鱼的位置，大部分照片都是看那鱼无辜的含着鱼饵上的三本钩，这个专业上叫 <strong>正口</strong>,一定要喊出来。</p>
<p><img src="/img/20170101/zhengkou.jpg" alt=""></p>
<p>其余的估计也不大会有人上图，譬如挂住鱼鳍啊，挂住屁股啊什么乱七八糟的部位，这个他们叫<strong>车祸</strong>。</p>
<p>如果水边干了一天除了丢十来个鱼饵什么也没有干到的，人叫<strong>打龟</strong>或者<strong>空军</strong>。</p>
<p><img src="/img/20170101/kongjun.jpg" alt=""></p>
<p>如果好久都没有钓到,就可以说是空军一号了！</p>
<h3 id="现在来讲讲顶级装逼者一般怎么搞"><a href="#现在来讲讲顶级装逼者一般怎么搞" class="headerlink" title="现在来讲讲顶级装逼者一般怎么搞?!"></a>现在来讲讲<strong>顶级装逼</strong>者一般怎么搞?!</h3><p><img src="/img/20170101/cheshang.jpg" alt=""></p>
<p>先你要明白一句话，<em>菜鸟爱扎堆，高手都独行。</em> 人不屑跟你讲什么，自己闷头搞就是。开个揽胜运动版，来到了水边，下车不着急取设备，先看，还拿望远镜看，看什么呢，看水流，看地形，看鱼的活跃程度；看完了还辨，辨天色，辨时间，辨风力。有的高手看辨，掉头开车就闪了。你问他为什么，答曰：”时候不对!”</p>
<p><img src="/img/20170101/cool.jpg" alt=""></p>
<p>时候对了又怎样捏，到后备箱拿出大号远征竿筒，打开里面顶级竿子轮子十来套，各种各样的线都有，旁边配以工具盒，里面你叫不出名的假饵100多尾，都是来自日本手工制作的，最便宜的也要150元一个。但是人就是放拿放着收藏的，不用，另外拿出个类似钱夹的东西，拉开一看，里面全10元一枚的国产亮片，问他为啥哟，答曰：“咱中国鱼，口糙，就吃这个。”</p>
<p><img src="/img/20170101/liangpian.jpg" alt=""></p>
<p>也不带涉水服，那是初学者跑不远，站水里提升距离的，人高手说了，大鱼经常就在眼皮下面，也不带帽子防晒什么的，傻逼才在水里站一天呢。</p>
<p>到岸边，穿线，上鱼饵，一系列动作一气呵成前后不到三分钟，先看准了位置，一个圈抛下去，也就10米不到，基本肉眼如果不是很好使，都看不见从哪入水的。</p>
<p>往回收线2米，竿尖一个剧烈的抖动，拉成新月状弧线，上鱼了。</p>
<p><img src="/img/20170101/zhongyu.png" alt=""></p>
<p>此刻一定要沉着，面无表情，千万不能暴露出一个月没有上鱼的兴奋，开始调整刹车，听这大鱼在水里攒劲拽线导致刹车发出的刺啦声。</p>
<p>时不时轻松的往回再收几圈，高手说这叫<strong>溜鱼</strong>，是那种一切尽在掌控的驾驭感，要把鱼最后一丝力气耗尽再出水，人玩得是境界。</p>
<p><img src="/img/20170101/liuyu.jpg" alt=""></p>
<p>拉了十分钟，鱼彻底服软了，随你拉吧，这个时候开始正式收线，出水了，人根本不用控鱼器什么的，直接轻松一带，鱼弹到岸边，取钩子。不拍照，尽管有一米来长，打死不拍，为什么呢，人几米的都搞过，一米朝上的根本不入流，跟只虾米一样。</p>
<p><img src="/img/20170101/fangsheng.jpg" alt=""></p>
<p>取完钩子，轻抚鱼背，拍拍头，轻轻放入水里，这叫 <strong>放流</strong>，是路亚倡导的从哪来往哪去，尽管嘴巴都扯的稀烂了，依然重复以上动作。才不像你们呢，10公分的鱼苗也抠里吧嗦的往家拿。</p>
<p><img src="/img/20170101/humian.jpg" alt=""></p>
<p>放完！站定，凝视湖面做沉思状，点一支小熊猫，抽一口，再深切的眺望夕阳，嘴角浮出一丝常人不易察觉的笑意。收竿，打火，走人！！！</p>
<blockquote>
<p>其实，说到路亚装逼。我个人最服的还是他！</p>
</blockquote>
<p><img src="/img/20170101/pj.jpg" alt=""><br><img src="/img/20170101/pj1.jpg" alt=""><br><img src="/img/20170101/pj2.jpg" alt=""></p>
<p><strong><font style="font-weight:bold;" color="red">声明</font>：文字原创非本人，但有稍作调整之处; 配图，为本人用心所为。以上图片均来自于网络！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;何为&lt;strong&gt;路亚&lt;/strong&gt;？你看有人站水边，竿尖挂个假鱼，抛出去，收回来，抛出去，再收，那就是了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/20170101/pjlure.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="路亚" scheme="http://cuiqingwei.github.io/tags/%E8%B7%AF%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>谈谈用ASP.NET开发的大型网站有哪些架构方式</title>
    <link href="http://cuiqingwei.github.io/2016/12/30/2016-12-30-%E7%94%A8ASP-NET%E5%BC%80%E5%8F%91%E7%9A%84%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9C%89%E5%93%AA%E4%BA%9B%E6%9E%B6%E6%9E%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://cuiqingwei.github.io/2016/12/30/2016-12-30-用ASP-NET开发的大型网站有哪些架构方式/</id>
    <published>2016-12-29T16:27:40.000Z</published>
    <updated>2016-12-30T01:19:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://www.cnblogs.com/ms0017/archive/2011/07/26/2117676.html" target="_blank" rel="external">文章</a>里，列举了国内外用ASP.NET开发的大型网站有哪些。最后提到了用.NET开发的大型网站和LAMP/JAVA平台的成本比较。其实在很多时候，收费的不一定就比免费的成本更高。因为开发一个网站要使用哪个平台的技术更合适，需要考虑很多种情况（除了开发技术本身，还要考虑人工，开发效率，时间，后续的支持，维护等等），要综合计算成本才行。微软平台本身虽然是收费的，但总体的成本并非一定比LAMP/JAVA高，上篇文章列举的国内外的那么多基于ASP.NET开发的大型网站就是例证。尤其是在开发效率上，无论是C#开发语言，还是免费的开发工具（Visual Studio Express，或者MonoDevelop/SharpDevelop），.NET明显比其他两个平台更胜一筹。而这一点正是互联网企业所需要的。效率就是生产力。并且，由于有Mono (<a href="http://mono-project.org/" target="_blank" rel="external">http://mono-project.org/</a>) 这个开源平台的存在，.NET技术也可以在linux/BSD等开源服务器上使用。使.NET完全可以实现跨平台应用。据此，我们可以分Windows/Linux两种方式来架构我们的ASP.NET网站：</p>
<a id="more"></a>
<h1 id="一、Windows平台"><a href="#一、Windows平台" class="headerlink" title="一、Windows平台"></a>一、Windows平台</h1><p>在Windows平台下开发大型网站，很多人首先想到的是Microsoft软件高昂的许可费，觉得成本一定很高。其实，这里有个误区。我们开发ASP.NET网站，web服务器完全可以用Windows Werver的WEB版本Windows Web Server 2003/2008，它们并不贵，才3k多RMB。并且注意了，一个系统是一次性买，买了可以用N年，现在还有很多大型网站在用Win2003，想想已经用了多少年？而人员工资则是月付，几年下来成本也并不是很高。贵的地方，应该是SQLServer数据库和支持它的Windows Server企业版。它们确实很贵。但我们开发网站不一定非要用SQLServer啊。数据库可以使用在linux下部署mysql,postgresql等开源数据库，并且也可以考虑用mongodb等开源NOSQL数据库。一般的中大型网站有十几台web服务器就足够了(这里有2013年底的Stack Overflow服务器数据可参考),也就是3w多人民币而已啊！对于Stack Overflow这种规模的网站，这点钱应该也不算什么了吧。当然，如果你真能做到像myspace那种超大型的.NET网站，你应该可以直接找微软要优惠价来批量购买了。呵呵。</p>
<h1 id="二、Linux平台"><a href="#二、Linux平台" class="headerlink" title="二、Linux平台"></a>二、Linux平台</h1><p>如果真的不肯在服务器上花一分钱，就要用完全免费的。我劝你根本不必因此而放弃.NET强大的生产力，而选择其他平台，因为还有Mono。Mono现在已是suse,ubuntu,debian等linux发行版中的默认安装包(apt-get install mono-complete)，并且ubuntu本身就有很多代码是用c#写的。你可以通过类似Linux+Apache/Nginx+Mono的组合（或者用Jexus Web Server）来代替Windows+IIS来架构完全免费的ASP.NET WEB SERVER。目前国内外也有了很多基于mono开发的网站案例,如：<br><a href="http://www.stockren.com/" target="_blank" rel="external">http://www.stockren.com/</a><br><a href="http://www.msannu.cn/" target="_blank" rel="external">http://www.msannu.cn/</a><br>(此外，还有像Unity3D,Xamarin等更多国外知名公司在基于mono开发应用)</p>
<blockquote>
<p>在linux上架设mono的方法有很多，可以参考如下博文：<br>配置linux(apache) + mono 下运行 asp.net<br><a href="http://www.cnblogs.com/hcl0208/archive/2010/10/25/1860173.html" target="_blank" rel="external">http://www.cnblogs.com/hcl0208/archive/2010/10/25/1860173.html</a><br>Ubuntu10.10下Mono2.10+Nginx+fastcgi 部署asp.net网站<br><a href="http://www.cnblogs.com/xiaogangqq123/archive/2011/02/28/1967345.html" target="_blank" rel="external">http://www.cnblogs.com/xiaogangqq123/archive/2011/02/28/1967345.html</a></p>
</blockquote>
<h1 id="三、补充："><a href="#三、补充：" class="headerlink" title="三、补充："></a>三、补充：</h1><p>其实关于大型网站架构的文章网上有太多太多了。如下图，是国内某基于asp.net的大型网站的架构设计图，其实不管是.net还是java/LAMP，不管什么平台，道理都一样。</p>
<p><img src="http://pic002.cnblogs.com/images/2011/318793/2011110710022537.jpg" alt=""></p>
<p>在本架构图中，如果把IIS替换成apache,SqlServer替换成mysql，也一样成立。合理的架构是跟平台无关的。最看不惯的是某些业内所谓的高手，说大型网站用ASP.NET不行，没有JAVA/LAMP好。相信看了这个架构图，再想想 <strong>bing,hotmail,myspace,match,qidian,dangdang,m18,vancl</strong> 等等基于.net开发的大型网站案例，就应该闭上他们的嘴！大型网站的开发，人的能力和合理的架构才是关键所在！(<em>最近一个反例很能说明问题：用java开发的www.12306.cn相信大家都有目共睹。它是架构/人的能力的问题，还是语言/平台的问题？</em>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://www.cnblogs.com/ms0017/archive/2011/07/26/2117676.html&quot;&gt;文章&lt;/a&gt;里，列举了国内外用ASP.NET开发的大型网站有哪些。最后提到了用.NET开发的大型网站和LAMP/JAVA平台的成本比较。其实在很多时候，收费的不一定就比免费的成本更高。因为开发一个网站要使用哪个平台的技术更合适，需要考虑很多种情况（除了开发技术本身，还要考虑人工，开发效率，时间，后续的支持，维护等等），要综合计算成本才行。微软平台本身虽然是收费的，但总体的成本并非一定比LAMP/JAVA高，上篇文章列举的国内外的那么多基于ASP.NET开发的大型网站就是例证。尤其是在开发效率上，无论是C#开发语言，还是免费的开发工具（Visual Studio Express，或者MonoDevelop/SharpDevelop），.NET明显比其他两个平台更胜一筹。而这一点正是互联网企业所需要的。效率就是生产力。并且，由于有Mono (&lt;a href=&quot;http://mono-project.org/&quot;&gt;http://mono-project.org/&lt;/a&gt;) 这个开源平台的存在，.NET技术也可以在linux/BSD等开源服务器上使用。使.NET完全可以实现跨平台应用。据此，我们可以分Windows/Linux两种方式来架构我们的ASP.NET网站：&lt;/p&gt;
    
    </summary>
    
    
      <category term="IIS" scheme="http://cuiqingwei.github.io/tags/IIS/"/>
    
      <category term="ASP.NET" scheme="http://cuiqingwei.github.io/tags/ASP-NET/"/>
    
  </entry>
  
  <entry>
    <title>基于微软平台IIS/ASP.NET开发的大型网站有哪些?</title>
    <link href="http://cuiqingwei.github.io/2016/12/30/2016-12-30-%E5%9F%BA%E4%BA%8E%E5%BE%AE%E8%BD%AF%E5%B9%B3%E5%8F%B0IIS-ASP-NET%E5%BC%80%E5%8F%91%E7%9A%84%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9C%89%E5%93%AA%E4%BA%9B/"/>
    <id>http://cuiqingwei.github.io/2016/12/30/2016-12-30-基于微软平台IIS-ASP-NET开发的大型网站有哪些/</id>
    <published>2016-12-29T16:04:40.000Z</published>
    <updated>2016-12-30T01:09:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先说明一下，本文绝不是要说Microsoft平台多么好，多么强。<br>只是要说明一下除了LAMP/JAVA平台，微软平台不至于像有些人说的，和想象的那么不堪！</p>
<a id="more"></a>
<p>下面一一列举几个:<br><a href="http://www.msn.com/" target="_blank" rel="external">http://www.msn.com/</a><br><a href="http://www.live.com/" target="_blank" rel="external">http://www.live.com/</a> (包括skydrive、hotmail等)<br><a href="http://www.bing.com/" target="_blank" rel="external">http://www.bing.com/</a></p>
<blockquote>
<p>根据comScore今年11月份的统计，微软网站已经超过雅虎、facebook成为仅此于Google的美国第二大网站。如果对这基于windows server/IIS/Asp.net构建的美国第二大网站，你们还说微软技术不能开发大型网站。那不觉得自己是在扯淡么？</p>
</blockquote>
<p><a href="http://www.godaddy.com/" target="_blank" rel="external">http://www.godaddy.com/</a> (全球最大域名注册商)<br><a href="http://www.MySpace.com/" target="_blank" rel="external">http://www.MySpace.com/</a><br><a href="http://www.match.com/" target="_blank" rel="external">http://www.match.com/</a> (世界最大婚恋网站)<br><a href="http://www.monster.com/" target="_blank" rel="external">http://www.monster.com/</a> (世界最大招聘网站,chinahr.com母公司)<br><a href="http://www.careerbuilder.com/" target="_blank" rel="external">http://www.careerbuilder.com/</a><br><a href="http://www.expedia.com/" target="_blank" rel="external">http://www.expedia.com/</a> (世界最大旅游网站,elong,kuxun母公司)<br><a href="http://www.newegg.com/" target="_blank" rel="external">http://www.newegg.com/</a><br><a href="http://www.buy.com/" target="_blank" rel="external">http://www.buy.com/</a><br><a href="http://www.pof.com/" target="_blank" rel="external">http://www.pof.com/</a><br><a href="http://www.ancestry.com/" target="_blank" rel="external">http://www.ancestry.com/</a> (世界最大的家谱网站,拥有全球最复杂的家谱tree)<br><a href="http://espn.go.com/" target="_blank" rel="external">http://espn.go.com/</a><br><a href="http://www.MSNBC.com/" target="_blank" rel="external">http://www.MSNBC.com/</a><br><a href="http://www.stackoverflow.com/" target="_blank" rel="external">http://www.stackoverflow.com/</a> (近两年火起来的技术问答网站,比Quora火的多啊)<br><a href="http://www.AngiesList.com/" target="_blank" rel="external">http://www.AngiesList.com/</a> (最近上市的美国著名点评网站)</p>
<blockquote>
<p>可能有人马上就能举出facebook,yahoo等国外大型网站来反驳我。尤其是对没落的myspace，更是嗤之以鼻。认为是使用微软技术的反面教材。其失败的原因之一就是因为用了微软技术做开发。但我想请问一下：当初myspace如日中天，为全球第一社交网站，facebook还未成气候时，你们当初有谁说它用了微软技术，将来就会失败？有谁说过？！且不说它失败的原因不是微软技术的错，相反，它使用微软技术，能做到上亿的用户，世界最大的社交网站。难道不更能说明微软技术的成功么？现在有多少大型网站能达到当初myspace的规模？屈指可数！并且，我相信如果它做到了现在 facebook的规模，用微软技术也能找到支撑的办法！</p>
</blockquote>
<p><a href="http://www.Dell.com/" target="_blank" rel="external">http://www.Dell.com/</a><br><a href="http://www.CA.com/" target="_blank" rel="external">http://www.CA.com/</a><br><a href="http://www.McAfee.com/" target="_blank" rel="external">http://www.McAfee.com/</a><br><a href="http://www.SAP.com/" target="_blank" rel="external">http://www.SAP.com/</a></p>
<blockquote>
<p>很多人看了肯定会说，这都是一些官网啊。又不是什么大型网站，有什么说服力。请注意了，Dell的官网可是电子商务—卖电脑的。CA, 迈克菲本身是安全领域的公司，SAP是全球顶级ERP提供商。他们为啥要用“安全性最差”的Microsoft技术开发其网站呢？不怕网站被黑了丢人？</p>
</blockquote>
<p><a href="http://www.360buy.com/" target="_blank" rel="external">http://www.360buy.com/</a> (京东商城)<br><a href="http://www.dangdang.com/" target="_blank" rel="external">http://www.dangdang.com/</a> (当当)<br><a href="http://www.vancl.com/" target="_blank" rel="external">http://www.vancl.com/</a> （凡客）<br><a href="http://www.m18.com/" target="_blank" rel="external">http://www.m18.com/</a> （麦考林）<br><a href="http://www.newegg.com.cn/" target="_blank" rel="external">http://www.newegg.com.cn/</a> (新蛋)<br><a href="http://www.yifu.com/" target="_blank" rel="external">http://www.yifu.com/</a><br><a href="http://www.letao.com/" target="_blank" rel="external">http://www.letao.com/</a> (乐淘)<br><a href="http://mall.sina.com.cn/" target="_blank" rel="external">http://mall.sina.com.cn/</a> (新浪商城)<br><a href="http://www.redbaby.com.cn/" target="_blank" rel="external">http://www.redbaby.com.cn/</a><br><a href="http://www.moonbasa.com/" target="_blank" rel="external">http://www.moonbasa.com/</a> (梦芭莎)<br><a href="http://www.no5.com.cn/" target="_blank" rel="external">http://www.no5.com.cn/</a><br><a href="http://www.99read.com/" target="_blank" rel="external">http://www.99read.com/</a><br><a href="http://www.coo8.com/" target="_blank" rel="external">http://www.coo8.com/</a> (库巴，国美旗下)<br><a href="http://www.yintai.com/" target="_blank" rel="external">http://www.yintai.com/</a><br><a href="http://www.5173.com/" target="_blank" rel="external">http://www.5173.com/</a><br><a href="http://www.b2b.cn/" target="_blank" rel="external">http://www.b2b.cn/</a><br><a href="http://www.Ftuan.com/" target="_blank" rel="external">http://www.Ftuan.com/</a><br><a href="http://www.dazhe.cn/" target="_blank" rel="external">http://www.dazhe.cn/</a><br><a href="http://www.tiantian.com/" target="_blank" rel="external">http://www.tiantian.com/</a></p>
<blockquote>
<p>相信很多人都认识到了这一点，国内大部分主流的大型电子商务网站都是用ASP.NET开发的。他们的流量，像360buy等虽然比不上taobao，但千万级的规模是肯定有的，绝对属于大型网站。其安全性，稳定性，性能等等，不比taobao差。</p>
</blockquote>
<p><a href="http://www.ips.com/" target="_blank" rel="external">http://www.ips.com/</a> (环迅支付)<br><a href="http://www.icbc.com.cn/" target="_blank" rel="external">http://www.icbc.com.cn/</a><br><a href="http://www.cmbchina.com/" target="_blank" rel="external">http://www.cmbchina.com/</a><br><a href="https://pbsz.ebank.cmbchina.com/CmbBank_GenShell/UI/GenShellPC/Login/Login.aspx" target="_blank" rel="external">https://pbsz.ebank.cmbchina.com/CmbBank_GenShell/UI/GenShellPC/Login/Login.aspx</a> (招商网银)<br><a href="http://www.95599.cn/" target="_blank" rel="external">http://www.95599.cn/</a><br><a href="https://easyabc.95599.cn/SlfRegPer/netBank/zh_CN/entrance/logon.aspx" target="_blank" rel="external">https://easyabc.95599.cn/SlfRegPer/netBank/zh_CN/entrance/logon.aspx</a> (农行网银)<br><a href="http://www.boc.cn/" target="_blank" rel="external">http://www.boc.cn/</a></p>
<blockquote>
<p>有人说银行的官网不是关键应用，但不知道网银是不是呢？</p>
</blockquote>
<p><a href="http://www.ctrip.com/" target="_blank" rel="external">http://www.ctrip.com/</a> (携程)<br><a href="http://www.elong.com/（艺龙）" target="_blank" rel="external">http://www.elong.com/（艺龙）</a><br><a href="http://www.lotour.com/" target="_blank" rel="external">http://www.lotour.com/</a><br><a href="http://www.17u.cn/" target="_blank" rel="external">http://www.17u.cn/</a><br><a href="http://www.uzai.com/" target="_blank" rel="external">http://www.uzai.com/</a></p>
<blockquote>
<p>主流的在线旅游/票务网站</p>
</blockquote>
<p><a href="http://www.sdo.com/" target="_blank" rel="external">http://www.sdo.com/</a> (盛大在线)<br><a href="http://www.qidian.com/" target="_blank" rel="external">http://www.qidian.com/</a> (起点中文网)<br><a href="http://www.58.com/" target="_blank" rel="external">http://www.58.com/</a> (58同城)<br><a href="http://www.hexun.com/" target="_blank" rel="external">http://www.hexun.com/</a> (和讯)<br><a href="http://www.mtime.com/" target="_blank" rel="external">http://www.mtime.com/</a><br><a href="http://www.yeshj.com/" target="_blank" rel="external">http://www.yeshj.com/</a><br><a href="http://www.eastmoney.com/" target="_blank" rel="external">http://www.eastmoney.com/</a><br><a href="http://www.stockstar.com/" target="_blank" rel="external">http://www.stockstar.com/</a><br><a href="http://feixin.10086.cn/" target="_blank" rel="external">http://feixin.10086.cn/</a> (中国移动飞信<a href="http://www.fetion.com.cn/" target="_blank" rel="external">http://www.fetion.com.cn/</a>)<br><a href="http://mail.10086.cn/" target="_blank" rel="external">http://mail.10086.cn/</a> (中国移动139邮箱)<br><a href="http://passport.189.cn/" target="_blank" rel="external">http://passport.189.cn/</a> （中国电信）<br><a href="http://www.cnblogs.com/" target="_blank" rel="external">http://www.cnblogs.com/</a><br><a href="http://www.csdn.net/" target="_blank" rel="external">http://www.csdn.net/</a><br><a href="http://www.chinahr.com/" target="_blank" rel="external">http://www.chinahr.com/</a><br><a href="http://www.zhaopin.com/" target="_blank" rel="external">http://www.zhaopin.com/</a> (智联招聘)<br><a href="http://www.soufun.com/" target="_blank" rel="external">http://www.soufun.com/</a> (搜房)<br><a href="http://www.dichan.com/" target="_blank" rel="external">http://www.dichan.com/</a> (新浪地产)<br><a href="http://nbadata.sports.qq.com/" target="_blank" rel="external">http://nbadata.sports.qq.com/</a> (腾讯NBA)<br><a href="http://www.autohome.com.cn/" target="_blank" rel="external">http://www.autohome.com.cn/</a> (汽车之家)<br><a href="http://www.bitauto.com/" target="_blank" rel="external">http://www.bitauto.com/</a><br><a href="http://www.39.net/" target="_blank" rel="external">http://www.39.net/</a><br><a href="http://3g.cn/" target="_blank" rel="external">http://3g.cn/</a></p>
<p>总之一句话，拿那些如：性能、安全、稳定、效率等等作为原因来攻击微软平台，是绝对站不住脚的！其实大家都心里清楚，ASP.NET和LAMP/JAVA相比，最大不同只不过是前者是收费的，而后者是开源免费的。仅此而已！</p>
<p>补充：<br>1、关于成本的讨论，可以看一下<a href="http://www.cnblogs.com/ms0017/archive/2011/08/17/Microsoft-NET-Mono-MySQL-MVC-Linux-Large-WebSite.html" target="_blank" rel="external">谈谈用ASP.NET开发的大型网站有哪些架构方式</a>。<br>2、相信很多人（包括我自己）都认为微软Windows在桌面OS上无敌，在服务器上不行，在服务器OS上Linux是老大。可惜事实却是：在服务器操作系统上Windows Server也是老大！这里有IDC对2009，2010两年服务器操作系统的市场份额统计，在最近两年里Windows在全球服务器OS的市场份额已经是第一，并且还在稳步上升中。<br><a href="http://blog.csdn.net/ms_net/article/details/6634295" target="_blank" rel="external">http://blog.csdn.net/ms_net/article/details/6634295</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先说明一下，本文绝不是要说Microsoft平台多么好，多么强。&lt;br&gt;只是要说明一下除了LAMP/JAVA平台，微软平台不至于像有些人说的，和想象的那么不堪！&lt;/p&gt;
    
    </summary>
    
    
      <category term="IIS" scheme="http://cuiqingwei.github.io/tags/IIS/"/>
    
      <category term="ASP.NET" scheme="http://cuiqingwei.github.io/tags/ASP-NET/"/>
    
  </entry>
  
  <entry>
    <title>GoAhead移植到OpenWRT</title>
    <link href="http://cuiqingwei.github.io/2016/11/17/2016-12-15-GoAhead%E7%A7%BB%E6%A4%8D%E5%88%B0OpenWRT/"/>
    <id>http://cuiqingwei.github.io/2016/11/17/2016-12-15-GoAhead移植到OpenWRT/</id>
    <published>2016-11-17T13:04:40.000Z</published>
    <updated>2016-12-15T13:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="make-menuconfig"><a href="#make-menuconfig" class="headerlink" title="make menuconfig"></a>make menuconfig</h1><p><img src="/img/20161215/menuconfig.jpg" alt=""><br><a id="more"></a></p>
<h1 id="ipk"><a href="#ipk" class="headerlink" title="ipk"></a>ipk</h1><p><img src="/img/20161215/goahead-ipk.jpg" alt=""></p>
<h1 id="run"><a href="#run" class="headerlink" title="run"></a>run</h1><p><img src="/img/20161215/openwrt.jpg" alt=""></p>
<h1 id="goahead运行效果"><a href="#goahead运行效果" class="headerlink" title="goahead运行效果"></a>goahead运行效果</h1><p><img src="/img/20161215/goahead2.5.jpg" alt=""></p>
<blockquote>
<p><a href="http://www.right.com.cn/forum/thread-203861-1-1.html" target="_blank" rel="external">http://www.right.com.cn/forum/thread-203861-1-1.html</a><br><a href="http://www.amobbs.com/thread-5665404-1-1.html" target="_blank" rel="external">http://www.amobbs.com/thread-5665404-1-1.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;make-menuconfig&quot;&gt;&lt;a href=&quot;#make-menuconfig&quot; class=&quot;headerlink&quot; title=&quot;make menuconfig&quot;&gt;&lt;/a&gt;make menuconfig&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/20161215/menuconfig.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="OpenWRT" scheme="http://cuiqingwei.github.io/tags/OpenWRT/"/>
    
      <category term="GoAhead" scheme="http://cuiqingwei.github.io/tags/GoAhead/"/>
    
  </entry>
  
  <entry>
    <title>Contiki-CC2538-CoAP</title>
    <link href="http://cuiqingwei.github.io/2016/11/17/2016-11-17-Contiki-CC2538-CoAP/"/>
    <id>http://cuiqingwei.github.io/2016/11/17/2016-11-17-Contiki-CC2538-CoAP/</id>
    <published>2016-11-17T13:04:40.000Z</published>
    <updated>2017-02-22T11:15:35.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><iframe height="498" width="510" src="http://player.youku.com/embed/XMTgyNDA3NDAzNg==" frameborder="0" 'allowfullscreen'=""></iframe><br></div>

<a id="more"></a>
<h1 id="Mote1"><a href="#Mote1" class="headerlink" title="Mote1"></a>Mote1</h1><h3 id="build-rp-border-router"><a href="#build-rp-border-router" class="headerlink" title="build rp-border-router"></a>build rp-border-router</h3><p>cd ~<br>cd contiki/examples/ipv6/rpl-border-router</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/contiki/examples/ipv6/rpl-border-router$ git diff .</div><div class="line">diff --git a/examples/ipv6/rpl-border-router/border-router.c b/examples/ipv6/rpl</div><div class="line">index 90b1fdf..f7d565c 100644</div><div class="line">--- a/examples/ipv6/rpl-border-router/border-router.c</div><div class="line">+++ b/examples/ipv6/rpl-border-router/border-router.c</div><div class="line">@@ -54,7 +54,8 @@</div><div class="line"> #include &lt;string.h&gt;</div><div class="line"> #include &lt;ctype.h&gt;</div><div class="line">-#define DEBUG DEBUG_NONE</div><div class="line">+//#define DEBUG DEBUG_NONE</div><div class="line">+#define DEBUG DEBUG_PRINT</div><div class="line"> #include &quot;net/ip/uip-debug.h&quot;</div><div class="line"> static uip_ipaddr_t prefix;</div><div class="line">diff --git a/examples/ipv6/rpl-border-router/project-conf.h b/examples/ipv6/rpl-</div><div class="line">index ec3eb3f..1f4f8c9 100644</div><div class="line">--- a/examples/ipv6/rpl-border-router/project-conf.h</div><div class="line">+++ b/examples/ipv6/rpl-border-router/project-conf.h</div><div class="line">@@ -64,4 +64,7 @@</div><div class="line"> #define WEBSERVER_CONF_CFS_CONNS 2</div><div class="line"> #endif</div><div class="line">+//#define RF_CORE_CONF_CHANNEL    25</div><div class="line">+#define RF_CORE_CONF_CHANNEL    26</div><div class="line">+</div><div class="line"> #endif /* PROJECT_ROUTER_CONF_H_ */</div></pre></td></tr></table></figure>
<p>make TARGET=cc2538dk all</p>
<h3 id="program-cc2538-select-reset-on-CC2538DK"><a href="#program-cc2538-select-reset-on-CC2538DK" class="headerlink" title="program cc2538,(select + reset on CC2538DK)"></a>program cc2538,(select + reset on CC2538DK)</h3><p>../../../tools/cc2538-bsl/cc2538-bsl.py -v -e -w border-router.bin</p>
<h3 id="push-reset-button-see-console-print"><a href="#push-reset-button-see-console-print" class="headerlink" title="push reset button, see console print"></a>push reset button, see console print</h3><p>../../../tools/sky/serialdump-linux -b115200 /dev/ttyUSB0</p>
<h1 id="Mote2"><a href="#Mote2" class="headerlink" title="Mote2"></a>Mote2</h1><h3 id="build-er-rest-example"><a href="#build-er-rest-example" class="headerlink" title="build er-rest-example"></a>build er-rest-example</h3><p>cd ~<br>cd contiki/examples/er-rest-example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/contiki/examples/er-rest-example$ git diff .</div><div class="line">diff --git a/examples/er-rest-example/project-conf.h b/examples/er-rest-example/project-conf.h</div><div class="line">index adcb75e..facd2fb 100644</div><div class="line">--- a/examples/er-rest-example/project-conf.h</div><div class="line">+++ b/examples/er-rest-example/project-conf.h</div><div class="line">@@ -40,25 +40,26 @@</div><div class="line"> #define __PROJECT_ERBIUM_CONF_H__</div><div class="line"></div><div class="line"> /* Custom channel and PAN ID configuration for your project. */</div><div class="line">-/*</div><div class="line">+</div><div class="line">    #undef RF_CHANNEL</div><div class="line">    #define RF_CHANNEL                     26</div><div class="line"></div><div class="line">    #undef IEEE802154_CONF_PANID</div><div class="line">    #define IEEE802154_CONF_PANID          0xABCD</div><div class="line">- */</div><div class="line">+</div><div class="line"> /* IP buffer size must match all other hops, in particular the border router. */</div><div class="line">-/*</div><div class="line">+</div><div class="line">    #undef UIP_CONF_BUFFER_SIZE</div><div class="line">    #define UIP_CONF_BUFFER_SIZE           256</div><div class="line">- */</div><div class="line">+</div><div class="line"> /* Disabling RDC and CSMA for demo purposes. Core updates often</div><div class="line">    require more memory. */</div><div class="line"> /* For projects, optimize memory and enable RDC and CSMA again. */</div><div class="line"> #undef NETSTACK_CONF_RDC</div><div class="line">-#define NETSTACK_CONF_RDC              nullrdc_driver</div><div class="line">+//#define NETSTACK_CONF_RDC              nullrdc_driver</div><div class="line">+#define NETSTACK_CONF_RDC              contikimac_driver</div><div class="line"> #undef RPL_CONF_MAX_DAG_PER_INSTANCE</div><div class="line"> #define RPL_CONF_MAX_DAG_PER_INSTANCE     1</div><div class="line">@@ -68,7 +69,8 @@</div><div class="line"> #define UIP_CONF_TCP                   0</div><div class="line"> #undef NETSTACK_CONF_MAC</div><div class="line">-#define NETSTACK_CONF_MAC     nullmac_driver</div><div class="line">+//#define NETSTACK_CONF_MAC     nullmac_driver</div><div class="line">+#define NETSTACK_CONF_MAC     csma_driver</div><div class="line"> /* Increase rpl-border-router IP-buffer when using more than 64. */</div><div class="line"> #undef REST_MAX_CHUNK_SIZE</div></pre></td></tr></table></figure></p>
<p>make TARGET=cc2538dk all</p>
<h3 id="program-cc2538-select-reset-on-CC2538DK-1"><a href="#program-cc2538-select-reset-on-CC2538DK-1" class="headerlink" title="program cc2538,(select + reset on CC2538DK)"></a>program cc2538,(select + reset on CC2538DK)</h3><p>../../../tools/cc2538-bsl/cc2538-bsl.py -p /dev/ttyUSB1 -v -e -w er-example-server.bin</p>
<h3 id="push-reset-button-see-console-print-1"><a href="#push-reset-button-see-console-print-1" class="headerlink" title="push reset button, see console print"></a>push reset button, see console print</h3><p>../../../tools/sky/serialdump-linux -b115200 /dev/ttyUSB1</p>
<h1 id="run-tunslip6"><a href="#run-tunslip6" class="headerlink" title="run tunslip6"></a>run tunslip6</h1><p>cd ~<br>cd contiki/examples/ipv6/rpl-border-router</p>
<p>sudo ../../../tools/tunslip6 aaaa::1/64 -s /dev/ttyUSB0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">********SLIP started on ``/dev/ttyUSB0&apos;&apos;</div><div class="line">opened tun device ``/dev/tun0&apos;&apos;</div><div class="line">ifconfig tun0 inet `hostname` mtu 1500 up</div><div class="line">ifconfig tun0 add aaaa::1/64</div><div class="line">ifconfig tun0 add fe80::0:0:0:1/64</div><div class="line">ifconfig tun0</div><div class="line">tun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  </div><div class="line">          inet addr:127.0.1.1  P-t-P:127.0.1.1  Mask:255.255.255.255</div><div class="line">          inet6 addr: fe80::1/64 Scope:Link</div><div class="line">          inet6 addr: aaaa::1/64 Scope:Global</div><div class="line">          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:500</div><div class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</div><div class="line"></div><div class="line">*** Address:aaaa::1 =&gt; aaaa:0000:0000:0000</div><div class="line">Got configuration message of type P</div><div class="line">Setting prefix aaaa::</div><div class="line">created a new RPL dag</div><div class="line">Server IPv6 addresses:</div><div class="line"> aaaa::212:4b00:5af:8444</div><div class="line"> fe80::212:4b00:5af:8444</div></pre></td></tr></table></figure>
<h1 id="ping6"><a href="#ping6" class="headerlink" title="ping6"></a>ping6</h1><p>ping6 aaaa::212:4b00:5af:84e0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PING aaaa::212:4b00:5af:84e0(aaaa::212:4b00:5af:84e0) 56 data bytes</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=1 ttl=63 time=1013 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=2 ttl=63 time=126 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=3 ttl=63 time=126 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=4 ttl=63 time=126 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=5 ttl=63 time=125 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=6 ttl=63 time=120 ms</div></pre></td></tr></table></figure>
<h1 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h1><p><img src="/img/20161117/coap1.png" alt=""><br><img src="/img/20161117/coap2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;div align = &quot;center&quot;&gt;&lt;br&gt;&lt;iframe height=498 width=510 src=&#39;http://player.youku.com/embed/XMTgyNDA3NDAzNg==&#39; frameborder=0 &#39;allowfullscreen&#39;&gt;&lt;/iframe&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="Contiki" scheme="http://cuiqingwei.github.io/tags/Contiki/"/>
    
      <category term="CC2538" scheme="http://cuiqingwei.github.io/tags/CC2538/"/>
    
      <category term="CoAP" scheme="http://cuiqingwei.github.io/tags/CoAP/"/>
    
  </entry>
  
  <entry>
    <title>Contiki-CC2538</title>
    <link href="http://cuiqingwei.github.io/2016/11/09/2016-11-09-Contiki-CC2538/"/>
    <id>http://cuiqingwei.github.io/2016/11/09/2016-11-09-Contiki-CC2538/</id>
    <published>2016-11-09T13:04:40.000Z</published>
    <updated>2016-11-15T05:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="InstantContiki3-0-for-CC2538dk"><a href="#InstantContiki3-0-for-CC2538dk" class="headerlink" title="InstantContiki3.0 for CC2538dk"></a>InstantContiki3.0 for CC2538dk</h1><p>继 <strong>2013</strong> 年<a href="http://www.amobbs.com/thread-5515866-1-1.html" target="_blank" rel="external">InstantContiki2.6 for cc2530dk</a>,再写个关于<strong>cc2538dk</strong>的。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol>
<li>下载安装预装有Contiki的 <em>InstantContiki3.0</em> Ubuntu虚拟机</li>
</ol>
<ul>
<li>可参考 -&gt;<a href="http://www.amobbs.com/thread-5515866-1-1.html" target="_blank" rel="external">InstantContiki2.6 for cc2530dk</a></li>
<li>也可见官网 -&gt; <a href="http://www.contiki-os.org/start.html" target="_blank" rel="external">http://www.contiki-os.org/start.html</a></li>
</ul>
<ol>
<li>安装驱动，一般插上板子后会自动安装（无非cp210x、pl2303、ft232、ch341），可以通过以下命令查看：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lsusb</div></pre></td></tr></table></figure>
</li>
</ol>
<p>一般会得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/contiki$ lsusb</div><div class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</div><div class="line">Bus 002 Device 014: ID 10c4:ea60 Cygnal Integrated Products, Inc. CP210x UART Bridge / myAVR mySmartUSB light</div><div class="line">Bus 002 Device 013: ID 0e0f:0008 VMware, Inc.</div><div class="line">Bus 002 Device 003: ID 0e0f:0002 VMware, Inc. Virtual USB Hub</div><div class="line">Bus 002 Device 002: ID 0e0f:0003 VMware, Inc. Virtual Mouse</div><div class="line">Bus 002 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="cc2538demo"><a href="#cc2538demo" class="headerlink" title="cc2538demo"></a><strong>cc2538demo</strong></h1><p>官方原网址：<br><a href="https://github.com/contiki-os/contiki/blob/master/platform/cc2538dk/README.md" target="_blank" rel="external">https://github.com/contiki-os/contiki/blob/master/platform/cc2538dk/README.md</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/contiki/examples/cc2538dk</div><div class="line">make</div></pre></td></tr></table></figure>
<h1 id="下载烧录-cc2538-demo-bin"><a href="#下载烧录-cc2538-demo-bin" class="headerlink" title="下载烧录 cc2538-demo.bin"></a>下载烧录 cc2538-demo.bin</h1><p><img src="/img/20161109/contiki4.png" alt=""></p>
<p>所用工具</p>
<ul>
<li><a href="http://www.ti.com/tool/flash-programmer" target="_blank" rel="external">SmartRF Flash Programmer 2</a></li>
<li><a href="http://www.ghostyu.com/product/41" target="_blank" rel="external">XDS110-Lite</a></li>
</ul>
<p>可以在window下通过smartRF Flash programmer 2来下载border-router.bin文件到cc2538中</p>
<p><img src="/img/20161109/contiki0.png" alt=""></p>
<p>也可以在Linux下通过串口bootloader安装border-router.elf，其中波特率要设置为115200,8N1。<br>如果想通过串口直接下载，需要手动的设置使能 bootloader，然后使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ makecc2538-demo.upload</div></pre></td></tr></table></figure>
<p>对于官方demo板的方法：按住select键，并复位板子。</p>
<p>另外，通过make cc2538-demo.lst 可以看到编译的信息，有助于调试代码。</p>
<h1 id="串口打印"><a href="#串口打印" class="headerlink" title="串口打印"></a>串口打印</h1><p>由于linux中换行以 <strong>\n</strong> 结尾（用minicom的可忽略）。而windows以 <strong>\r\n</strong> 结尾，在Windows中调试例程需要修改串口调试工具中的设置。</p>
<p>例如 <strong>putty</strong> 中,[ <strong>\n</strong> 转换为 <strong>\r\n</strong> ]修改设置见下图：</p>
<p><img src="/img/20161109/contiki1.png" alt=""></p>
<p>当然，还有最爱 <strong>SecureCRT</strong> 设置如下：</p>
<p><img src="/img/20161109/contiki2.png" alt=""></p>
<h1 id="rpl-border-router-边界路由器"><a href="#rpl-border-router-边界路由器" class="headerlink" title="rpl-border-router 边界路由器"></a><strong>rpl-border-router</strong> 边界路由器</h1><h3 id="1-编译"><a href="#1-编译" class="headerlink" title="1.编译"></a>1.编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/contiki/examples/ipv6/rpl-border-router</div><div class="line">make TARGET=cc2538dk</div></pre></td></tr></table></figure>
<p>##3 2.节点IEEE/RIME/IPv6地址</p>
<p>节点一般会根据它们的IEEE地址（MAC地址）来确定它们的IPV6地址，这个IEEE地址可能直接从cc2538的info页读取到，也可以通过硬编码得到，用户可以在编译的时候定义一个2字节的的值，这个值将用于IEEE地址的两个最低有效位。</p>
<p>设置IEEE地址来源——info页或者硬编码，可以通过定义 <strong>~/contiki/platform/cc2538dk/contiki-conf.h</strong> 中的 <strong>IEEE_ADDR_CONF_HARDCODED</strong> 设定<br><em>如果为0</em> ——从info页中得到；<br><em>如果为1</em> ——从硬编码中得到，即从IEEE_ADDR_CONF_ADDRESS得到。</p>
<p>当然，也可以重新定义IEEE的最低两位地址，通过：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make NODEID=0x8888</div></pre></td></tr></table></figure>
<p>此外，还可以设置使不同的节点具有不同的IEEE地址。<strong>IPv6中MAC地址不可以重复</strong>！</p>
<h3 id="3-测试ipv6-border-router"><a href="#3-测试ipv6-border-router" class="headerlink" title="3.测试ipv6 border router"></a>3.测试ipv6 border router</h3><p>（1）修改border-router.c</p>
<p>将#define DEBUG <em>DEBUG_NONE</em> 改为 #define DEBUG <strong>DEBUG_PRINT</strong></p>
<p>（2）在project-conf.h中定义了UIP的最大缓冲值（UIP_CONF_BUFFER_SIZE），可以将它改为更大或删除这句话，从而允许更多的的值。</p>
<p>（3）编译：<strong>make TARGET=cc2538dk</strong>，<em>因为不是在cc2538的工程中编译，所以需要加上目标平台</em>。</p>
<p>（4）下载烧录，参考上面。</p>
<p>（5）编译<a href="http://blog.csdn.net/gulansheng/article/details/43062191" target="_blank" rel="external">tunslip6</a>,测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd  ~/contiki/tools/</div><div class="line">make tunslip6</div><div class="line">sudo ./tunslip6 aaaa::1/64 -s /dev/ttyUSB0</div></pre></td></tr></table></figure>
<p>执行后，不出意外的话看到router的IPV6地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/contiki/tools$ sudo ./tunslip6 aaaa::1/64 -s /dev/ttyUSB0</div><div class="line">[sudo] password for user:</div><div class="line">********SLIP started on ``/dev/ttyUSB0&apos;&apos;</div><div class="line">opened tun device ``/dev/tun0&apos;&apos;</div><div class="line">ifconfig tun0 inet `hostname` mtu 1500 up</div><div class="line">ifconfig tun0 add aaaa::1/64</div><div class="line">ifconfig tun0 add fe80::0:0:0:1/64</div><div class="line">ifconfig tun0</div><div class="line">tun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  </div><div class="line">          inet addr:127.0.1.1  P-t-P:127.0.1.1  Mask:255.255.255.255</div><div class="line">          inet6 addr: fe80::1/64 Scope:Link</div><div class="line">          inet6 addr: aaaa::1/64 Scope:Global</div><div class="line">          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:500</div><div class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</div><div class="line">*** Address:aaaa::1 =&gt; aaaa:0000:0000:0000</div><div class="line">Got configuration message of type P</div><div class="line">Setting prefix aaaa::</div><div class="line">created a new RPL dag</div><div class="line">Server IPv6 addresses:</div><div class="line"> aaaa::212:4b00:5af:84e0</div><div class="line"> fe80::212:4b00:5af:84e0</div></pre></td></tr></table></figure>
<p>（6）通信测试</p>
<p><strong>Ping6</strong> 测试</p>
<p><em><font color="red">ping6 aaaa::212:4b00:5af:84e0</font></em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/6lbr/examples/cc2538dk$ ping6 aaaa::212:4b00:5af:84e0</div><div class="line">PING aaaa::212:4b00:5af:84e0(aaaa::212:4b00:5af:84e0) 56 data bytes</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=1 ttl=64 time=21.1 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=2 ttl=64 time=21.5 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:84e0: icmp_seq=3 ttl=64 time=21.1 ms</div></pre></td></tr></table></figure>
<p>打开浏览器，地址栏输入 <a href="http://[aaaa::212:4b00:5af:84e0]/" target="_blank" rel="external">http://[aaaa::212:4b00:5af:84e0]/</a> 网页访问测试：</p>
<h3 id="节点联网"><a href="#节点联网" class="headerlink" title="节点联网"></a>节点联网</h3><p>（1）编译，下载烧录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/contiki/examples/webserver-ipv6</div><div class="line">make TARGET=cc2538dk NODEID=&lt;value&gt;</div></pre></td></tr></table></figure>
<p>（2）查看</p>
<p>打开浏览器，地址栏输入 <a href="http://[aaaa::212:4b00:5af:84e0]/" target="_blank" rel="external">http://[aaaa::212:4b00:5af:84e0]/</a> 查看节点：</p>
<p>Neighbors<br>fe80::212:4b00:5af:8444<br>Routes<br><strong>aaaa::212:4b00:5af:8444</strong> /128 (via fe80::212:4b00:5af:8444) 1792s</p>
<p><img src="/img/20161109/contiki5.png" alt=""></p>
<p>（3）ping6测</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/6lbr/examples/cc2538dk$ ping6 aaaa::212:4b00:5af:8444</div><div class="line">PING aaaa::212:4b00:5af:8444(aaaa::212:4b00:5af:8444) 56 data bytes</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=2 ttl=63 time=95.9 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=3 ttl=63 time=340 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=4 ttl=63 time=91.2 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=5 ttl=63 time=90.9 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=6 ttl=63 time=86.7 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=7 ttl=63 time=82.2 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=8 ttl=63 time=82.3 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=9 ttl=63 time=82.0 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=10 ttl=63 time=77.3 ms</div><div class="line">64 bytes from aaaa::212:4b00:5af:8444: icmp_seq=11 ttl=63 time=77.4 ms</div></pre></td></tr></table></figure>
<p>（4）也可 <strong>curl</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/6lbr/examples/cc2538dk$ curl -g http://[aaaa::212:4b00:5af:84e0]/</div><div class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;ContikiRPL&lt;/title&gt;&lt;/head&gt;&lt;body&gt;</div><div class="line">Neighbors&lt;pre&gt;fe80::212:4b00:5af:8444</div><div class="line">&lt;/pre&gt;Routes&lt;pre&gt;</div><div class="line">aaaa::212:4b00:5af:8444/128 (via fe80::212:4b00:5af:8444) 1773s</div></pre></td></tr></table></figure>
<p>（5）<strong>wget</strong> 下载 <em>index.html</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~/6lbr/examples/cc2538dk$ wget http://[aaaa::212:4b00:5af:84e0]/</div><div class="line">--2016-11-09 07:27:24--  http://[aaaa::212:4b00:5af:84e0]/</div><div class="line">Connecting to [aaaa::212:4b00:5af:84e0]:80... connected.</div><div class="line">HTTP request sent, awaiting response... 200 OK</div><div class="line">Length: unspecified [text/html]</div><div class="line">Saving to: ‘index.html’</div><div class="line"></div><div class="line">    [ &lt;=&gt;                                   ] 192         --.-K/s   in 0.1s    </div><div class="line"></div><div class="line">2016-11-09 07:27:24 (1.59 KB/s) - ‘index.html’ saved [192]</div></pre></td></tr></table></figure>
<p> （6）半导体芯片越做越小，性能越强悍；系统协议越精减，越精简优化。webserver跑在单芯片上也就不稀奇了！</p>
<p> <img src="/img/20161109/contiki6.png" alt=""><br> <img src="/img/20161109/contiki7.png" alt=""><br> <img src="/img/20161109/contiki8.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;InstantContiki3-0-for-CC2538dk&quot;&gt;&lt;a href=&quot;#InstantContiki3-0-for-CC2538dk&quot; class=&quot;headerlink&quot; title=&quot;InstantContiki3.0 for CC2538dk&quot;&gt;&lt;/a&gt;InstantContiki3.0 for CC2538dk&lt;/h1&gt;&lt;p&gt;继 &lt;strong&gt;2013&lt;/strong&gt; 年&lt;a href=&quot;http://www.amobbs.com/thread-5515866-1-1.html&quot;&gt;InstantContiki2.6 for cc2530dk&lt;/a&gt;,再写个关于&lt;strong&gt;cc2538dk&lt;/strong&gt;的。&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;下载安装预装有Contiki的 &lt;em&gt;InstantContiki3.0&lt;/em&gt; Ubuntu虚拟机&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;可参考 -&amp;gt;&lt;a href=&quot;http://www.amobbs.com/thread-5515866-1-1.html&quot;&gt;InstantContiki2.6 for cc2530dk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;也可见官网 -&amp;gt; &lt;a href=&quot;http://www.contiki-os.org/start.html&quot;&gt;http://www.contiki-os.org/start.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;安装驱动，一般插上板子后会自动安装（无非cp210x、pl2303、ft232、ch341），可以通过以下命令查看：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ lsusb&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般会得到：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;user@instant-contiki:~/contiki$ lsusb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bus 002 Device 014: ID 10c4:ea60 Cygnal Integrated Products, Inc. CP210x UART Bridge / myAVR mySmartUSB light&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bus 002 Device 013: ID 0e0f:0008 VMware, Inc.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bus 002 Device 003: ID 0e0f:0002 VMware, Inc. Virtual USB Hub&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bus 002 Device 002: ID 0e0f:0003 VMware, Inc. Virtual Mouse&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bus 002 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Contiki" scheme="http://cuiqingwei.github.io/tags/Contiki/"/>
    
      <category term="CC2538" scheme="http://cuiqingwei.github.io/tags/CC2538/"/>
    
  </entry>
  
  <entry>
    <title>基于Contiki-Cooja的6lbr模拟仿真</title>
    <link href="http://cuiqingwei.github.io/2016/10/29/2016-10-29-%E5%9F%BA%E4%BA%8EContiki-Cooja%E7%9A%846lbr%E6%A8%A1%E6%8B%9F%E4%BB%BF%E7%9C%9F/"/>
    <id>http://cuiqingwei.github.io/2016/10/29/2016-10-29-基于Contiki-Cooja的6lbr模拟仿真/</id>
    <published>2016-10-29T13:04:40.000Z</published>
    <updated>2016-12-12T05:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Instant-Contiki-2-7"><a href="#Instant-Contiki-2-7" class="headerlink" title="Instant Contiki 2.7"></a>Instant Contiki 2.7</h1><p>下载、安装… 具体请查看链接-&gt;<a href="http://www.contiki-os.org/start.html" target="_blank" rel="external">http://www.contiki-os.org/start.html</a></p>
<h1 id="Java版本"><a href="#Java版本" class="headerlink" title="Java版本"></a>Java版本</h1><p>打开（<em>Ctrl+Alt+T</em>）超级终端，键入 <strong>java -version</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">user@instant-contiki:~$ java -version</div><div class="line">java version &quot;1.7.0_25&quot;</div><div class="line">OpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1ubuntu0.12.04.2)</div><div class="line">OpenJDK Client VM (build 23.7-b01, mixed mode, sharing)</div></pre></td></tr></table></figure>
<h1 id="安装网桥管理工具-bridge-utils-包"><a href="#安装网桥管理工具-bridge-utils-包" class="headerlink" title="安装网桥管理工具 bridge-utils 包"></a>安装网桥管理工具 <strong>bridge-utils</strong> 包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install bridge-utils</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="获取6lbr代码，初始化子模块"><a href="#获取6lbr代码，初始化子模块" class="headerlink" title="获取6lbr代码，初始化子模块"></a>获取<a href="http://cetic.github.com/6lbr" target="_blank" rel="external">6lbr</a>代码，初始化子模块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone --recursive https://github.com/cetic/6lbr</div><div class="line">cd 6lbr/examples/6lbr</div></pre></td></tr></table></figure>
<h1 id="在6lbr源目录，执行以下命令："><a href="#在6lbr源目录，执行以下命令：" class="headerlink" title="在6lbr源目录，执行以下命令："></a>在6lbr源目录，执行以下命令：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make TARGET=native all</div><div class="line">make tools</div></pre></td></tr></table></figure>
<h1 id="启动一个-1-BR-COOJA-实例"><a href="#启动一个-1-BR-COOJA-实例" class="headerlink" title="启动一个 1-BR COOJA 实例"></a>启动一个 <strong>1-BR COOJA</strong> 实例</h1><p><font style="font-weight:bold;" color="red">警告：</font> 默认Instant Contiki 2.7环境中没有添加serial2pty插件，添加方法是：</p>
<ul>
<li>运行cooja</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/6lbr/tools/cooja</div><div class="line">ant run</div></pre></td></tr></table></figure>
<p>Settings -&gt; External tools paths… 添加<br><strong>;[CONTIKI_DIR]/tools/cooja/apps/serial2pty</strong></p>
<p><img src="/img/20161029/6lbr1.png" alt=""></p>
<p>设置完成后，关闭。运行下面命令，启动实例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd examples/6lbr/test</div><div class="line">make cooja-small</div></pre></td></tr></table></figure></p>
<p><img src="/img/20161029/6lbr2.png" alt=""></p>
<p>运行成功，console会输出如下结尾的信息，详见下图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">INFO [main] (Serial2Pty.java:116) - serialpty;open;9;/dev/pts/11</div><div class="line">INFO [main] (Serial2Pty.java:116) - serialpty;open;10;/dev/pts/12</div><div class="line">INFO [main] (Serial2Pty.java:116) - serialpty;open;11;/dev/pts/13</div><div class="line">INFO [main] (Serial2Pty.java:116) - serialpty;open;12;/dev/pts/14</div></pre></td></tr></table></figure>
<p><img src="/img/20161029/6lbr3.png" alt=""></p>
<p>通过鼠标右击节点，也可打开其他节点的串口监控，如下图所示：</p>
<p><img src="/img/20161029/6lbr4.png" alt=""></p>
<h1 id="运行一个6lbr实例"><a href="#运行一个6lbr实例" class="headerlink" title="运行一个6lbr实例"></a>运行一个6lbr实例</h1><p>Cooja <em>Simulation control</em> 点击 <strong>Start</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd examples/6lbr/test</div><div class="line">sudo make launch-6lbr-router-1-cooja</div></pre></td></tr></table></figure>
<p>运行后，终端键入 <strong>ifconfig</strong> 会发现多了 <a href="/2015/07/06/2015-07-06-OpenWRT下ifconfig各接口说明">br0网桥接口</a></p>
<p><img src="/img/20161029/6lbr5.png" alt=""></p>
<p><strong>如果要避免重复输出</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Fetching MAC address</div><div class="line">Fetching MAC address</div></pre></td></tr></table></figure>
<p>可以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/6lbr/examples/6lbr/test/conf-templates</div><div class="line">vi cooja-1-router.conf</div></pre></td></tr></table></figure>
<p>最后两行，指定日志写入 <strong>/var/log/6lbr.log</strong>，如下图所示：</p>
<p><img src="/img/20161029/6lbr6.png" alt=""></p>
<h1 id="访问6lbr-webserver-界面"><a href="#访问6lbr-webserver-界面" class="headerlink" title="访问6lbr webserver 界面"></a>访问6lbr <strong>webserver</strong> 界面</h1><p>打开浏览器，地址栏输入 <strong>[bbbb::100]</strong> 回车，看到如下界面就算成功了！</p>
<p><img src="/img/20161029/6lbr7.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Instant-Contiki-2-7&quot;&gt;&lt;a href=&quot;#Instant-Contiki-2-7&quot; class=&quot;headerlink&quot; title=&quot;Instant Contiki 2.7&quot;&gt;&lt;/a&gt;Instant Contiki 2.7&lt;/h1&gt;&lt;p&gt;下载、安装… 具体请查看链接-&amp;gt;&lt;a href=&quot;http://www.contiki-os.org/start.html&quot;&gt;http://www.contiki-os.org/start.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Java版本&quot;&gt;&lt;a href=&quot;#Java版本&quot; class=&quot;headerlink&quot; title=&quot;Java版本&quot;&gt;&lt;/a&gt;Java版本&lt;/h1&gt;&lt;p&gt;打开（&lt;em&gt;Ctrl+Alt+T&lt;/em&gt;）超级终端，键入 &lt;strong&gt;java -version&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;user@instant-contiki:~$ java -version&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;java version &amp;quot;1.7.0_25&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1ubuntu0.12.04.2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OpenJDK Client VM (build 23.7-b01, mixed mode, sharing)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;安装网桥管理工具-bridge-utils-包&quot;&gt;&lt;a href=&quot;#安装网桥管理工具-bridge-utils-包&quot; class=&quot;headerlink&quot; title=&quot;安装网桥管理工具 bridge-utils 包&quot;&gt;&lt;/a&gt;安装网桥管理工具 &lt;strong&gt;bridge-utils&lt;/strong&gt; 包&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install bridge-utils&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Contiki" scheme="http://cuiqingwei.github.io/tags/Contiki/"/>
    
      <category term="Cooja" scheme="http://cuiqingwei.github.io/tags/Cooja/"/>
    
      <category term="6lbr" scheme="http://cuiqingwei.github.io/tags/6lbr/"/>
    
  </entry>
  
  <entry>
    <title>利用Travis CI、MkDocs自動部署Blog至GitHub Pages</title>
    <link href="http://cuiqingwei.github.io/2016/10/27/2016-10-27-%E5%88%A9%E7%94%A8Travis-CI%E3%80%81MkDocs%E8%87%AA%E5%8B%95%E9%83%A8%E7%BD%B2Blog%E8%87%B3GitHub-Pages/"/>
    <id>http://cuiqingwei.github.io/2016/10/27/2016-10-27-利用Travis-CI、MkDocs自動部署Blog至GitHub-Pages/</id>
    <published>2016-10-27T03:01:40.000Z</published>
    <updated>2016-10-27T05:38:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h1><h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>免费的静态站点，三个特点：免费托管、自带主题、支持自制页面和Jekyll。</p>
<h3 id="MkDocs"><a href="#MkDocs" class="headerlink" title="MkDocs"></a>MkDocs</h3><p><a href="http://markdown-docs-zh.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">MkDocs</a>是一个用于创建项目文档的 快速, 简单 , 完美华丽 的静态站点生成器. 文档源码使用 Markdown 来撰写, 用一个 YAML 文件作为配置文档.</p>
<h3 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h3><p><a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a>，是一个专门为开源项目打造的持续集成环境。<br>如果你有一个放在github上的开源项目，Travis CI简直就是一个完美的CI选择。<br><a id="more"></a></p>
<h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>源码存放处 <a href="https://github.com/cuiqingwei/iotknowledges" target="_blank" rel="external">https://github.com/cuiqingwei/iotknowledges</a><br>页面存放处 <a href="https://github.com/iotknowledges/iotknowledges.github.io" target="_blank" rel="external">https://github.com/iotknowledges/iotknowledges.github.io</a></p>
<font color="red">通过 <strong>Travis CI</strong> 部署的 <strong>MkDocs</strong> 环境将 <strong>iotknowledges</strong> 源码编译成静态页面并发布到 <strong>iotknowledges.github.io</strong></font>

<h3 id="1-创建一个GitHub-Pages"><a href="#1-创建一个GitHub-Pages" class="headerlink" title="1.创建一个GitHub Pages"></a>1.创建一个GitHub Pages</h3><p>  1.1 安装git工具<br>    <a href="http://windows.github.com/" target="_blank" rel="external">http://windows.github.com/</a><br>    <a href="http://mac.github.com/" target="_blank" rel="external">http://mac.github.com/</a></p>
<p>  1.2 两种pages模式</p>
<pre><code>① User/Organization Pages 个人或公司站点
  - 1) 使用自己的用户名，每个用户名下面只能建立一个；
  - 2) 资源命名必须符合这样的规则username/username.github.com；
  - 3) 主干上内容被用来构建和发布页面.
② Project Pages 项目站点
  - 1) gh-pages 分支用于构建和发布；
  - 2) 如果user/org pages使用了独立域名，那么托管在账户下的所有project pages将
       使用相同的域名进行重定向，除非project pages使用了自己的独立域名；
  - 3) 如果没有使用独立域名，project pages将通过子路径的形式提供服务username.github.com/projectname；
  - 4) 自定义404页面只能在独立域名下使用，否则会使用User Pages 404；
  - 5) 创建项目站点步骤：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/USERNAME/PROJECT.git PROJECT</div><div class="line">$ git checkout --orphan gh-pages</div><div class="line">$ git rm -rf .</div><div class="line">$ git add .</div><div class="line">$ git commit -a -m &quot;First pages commit&quot;</div><div class="line">$ git push origin gh-pages</div></pre></td></tr></table></figure>
</code></pre><p>  1.3. 可以通过User/Organization Pages建立主站，而通过Project Pages挂载二级应用页面。</p>
  <font color="blue">由于我是按照Organization名字命名的Pages，Repository名字是 <em>iotknowledges.github.io</em></font>

<p>  <img src="/img/20161027/github1.png" alt=""><br>  <img src="/img/20161027/github2.png" alt=""></p>
  <font color="blue"><strong>至此，Project Pages建立完成，用来存放MkDocs生成的静态页面！</strong></font>  

<h3 id="2-建立存放源码的Repository并关联Travis-CI"><a href="#2-建立存放源码的Repository并关联Travis-CI" class="headerlink" title="2. 建立存放源码的Repository并关联Travis CI"></a>2. 建立存放源码的Repository并关联Travis CI</h3><p>  2.1 创建iotknowledges</p>
<p>  登录GitHub，点击 <strong>New repository</strong> 新建即可，具体方法步骤多说！</p>
<p>  2.2 生成Token</p>
<p>  在GitHub账户的Settings里生成</p>
<p>  <img src="/img/20161027/github3.png" alt=""><br>  <img src="/img/20161027/github4.png" alt=""></p>
<h3 id="3-Travis-CI工程的Settings-添加环境变量"><a href="#3-Travis-CI工程的Settings-添加环境变量" class="headerlink" title="3. Travis CI工程的Settings,添加环境变量"></a>3. Travis CI工程的Settings,添加环境变量</h3><p>  登录 <a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a> 点击 <font color="green"> <strong>Sign in with GitHub</strong> </font> 用存放源码的github账号登录</p>
<p>  添加一个环境变量(Environment Variable)，命名为 <strong>GITHUB_API_KEY</strong> ，之后将刚刚生成的Token复制进去，这在之后会用到。接下来你还需要创建两个环境变量作为Push的身份，一个是你的名字，还有一个是你的邮箱，当然如果对邮箱和名字没什么隐私那不设置也可以。这两个变量可以分别命名为 <strong>GITHUB_EMAIL</strong> 和 <strong>GITHUB_NAME</strong>。GITHUB_NAME请务必注意设置成你Profile链接里的那个名字，即<a href="https://github.com/[user_name]这里这个值。设置完之后，注意要把下面那个“*Display" target="_blank" rel="external">https://github.com/[user_name]这里这个值。设置完之后，注意要把下面那个“*Display</a> value in build log<em>”关掉，否则这一安全措施就没用了。还有一点，记得把“</em>Build pull requests*”关掉，否则在有Pull Request的时候不论其是否合格都会自动将Pages更新。</p>
<p>  <img src="/img/20161027/github5.png" alt=""></p>
<h3 id="4-配置-travis-yml"><a href="#4-配置-travis-yml" class="headerlink" title="4. 配置.travis.yml"></a>4. 配置.travis.yml</h3><p>  由于MkDocs使用的是Python，所以先在文件开头加上：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">language: python</div><div class="line">python:</div><div class="line">-  3.5</div></pre></td></tr></table></figure>
<p>  这里我使用的是Python 3.5，如果有插件不兼容的话可以切换成2.7。之后是初始化设置：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">install:</div><div class="line">  - pip install mkdocs</div></pre></td></tr></table></figure>
<p>  接下来是构建：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">script:</div><div class="line">  - mkdocs build --clean</div></pre></td></tr></table></figure>
<p>  生成的最终网站会在site目录内，–clean参数保证构建的时候site文件夹内没有多余文件，否则可能会导致各种奇怪的问题。</p>
<p>  接下来就是最重要的部署环节了，脚本需要放在after_success阶段内：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">after_success:  |</div><div class="line">  if [ -n &quot;$GITHUB_API_KEY&quot; ]; then</div><div class="line">    cd &quot;$TRAVIS_BUILD_DIR&quot;</div><div class="line">    cd site</div><div class="line">    git init</div><div class="line">    git add .</div><div class="line">    git -c user.name=$GITHUB_NAME -c user.email=$GITHUB_EMAIL commit -m &quot;Auto Deployment&quot;</div><div class="line">    git push -f -q https://$GITHUB_NAME:$GITHUB_API_KEY@github.com/[user_name]/[repo_name] [branch]</div><div class="line">    cd &quot;$TRAVIS_BUILD_DIR&quot;</div><div class="line">  fi</div></pre></td></tr></table></figure>
<p>  首先上来先要保证 <strong>GITHUB_API_KEY</strong> 这个环境变量存在，之后进入到构建目录，再用相对位置进入构建好的site网站目录。接着就直接在本地创建一个repo，然后commit，push到需要的repo。注意[user_name]是repo所在的用户名，[repo_name]是GitHub Pages所在的repo。[branch]这里如果是用户或者Organization的GitHub Pages的话就填 master，如果是工程的GitHub Pages的话就填gh-pages。最后返回构建目录。</p>
<p>  由于push的时候有<font color="red"><strong>-f</strong></font>参数，GitHub上的历史都将被复写，并且因为我们是本地新创建的一个repo，所有历史都是空的，所以构建完成之后每次在GitHub上都只能看到一个commit ，如果成功的话，应该每次更新源码工程之后等一两分钟都能看到你自己在GitHub Pages所在的工程或者分支自动发送的commit，如果失败的话可以看一下下面完整的 <strong>.travis.yml</strong> 文件：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">language: python</div><div class="line">python:</div><div class="line">  -  3.5</div><div class="line">install:</div><div class="line">  - pip install mkdocs</div><div class="line">script:</div><div class="line">  - mkdocs build --clean</div><div class="line">after_success:  |</div><div class="line">  if [ -n &quot;$GITHUB_API_KEY&quot; ]; then</div><div class="line">    cd &quot;$TRAVIS_BUILD_DIR&quot;</div><div class="line">    cd site</div><div class="line">    git init</div><div class="line">    git add .</div><div class="line">    git -c user.name=$GITHUB_NAME -c user.email=$GITHUB_EMAIL commit -m &quot;Auto Deployment&quot;</div><div class="line">    git push -f -q https://$GITHUB_NAME:$GITHUB_API_KEY@github.com/iotknowledges/iotknowledges.github.io master</div><div class="line">    cd &quot;$TRAVIS_BUILD_DIR&quot;</div><div class="line">  fi</div></pre></td></tr></table></figure>
<ol>
<li><p>build 状态，提交代码后可以到 <a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a> 查看进度情况</p>
<p><img src="/img/20161027/github6.png" alt=""></p>
<p><a href="https://iotknowledges.github.io/" target="_blank" rel="external">https://iotknowledges.github.io/</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;技术要点&quot;&gt;&lt;a href=&quot;#技术要点&quot; class=&quot;headerlink&quot; title=&quot;技术要点&quot;&gt;&lt;/a&gt;技术要点&lt;/h1&gt;&lt;h3 id=&quot;GitHub-Pages&quot;&gt;&lt;a href=&quot;#GitHub-Pages&quot; class=&quot;headerlink&quot; title=&quot;GitHub Pages&quot;&gt;&lt;/a&gt;GitHub Pages&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;免费的静态站点，三个特点：免费托管、自带主题、支持自制页面和Jekyll。&lt;/p&gt;
&lt;h3 id=&quot;MkDocs&quot;&gt;&lt;a href=&quot;#MkDocs&quot; class=&quot;headerlink&quot; title=&quot;MkDocs&quot;&gt;&lt;/a&gt;MkDocs&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://markdown-docs-zh.readthedocs.io/zh_CN/latest/&quot;&gt;MkDocs&lt;/a&gt;是一个用于创建项目文档的 快速, 简单 , 完美华丽 的静态站点生成器. 文档源码使用 Markdown 来撰写, 用一个 YAML 文件作为配置文档.&lt;/p&gt;
&lt;h3 id=&quot;Travis-CI&quot;&gt;&lt;a href=&quot;#Travis-CI&quot; class=&quot;headerlink&quot; title=&quot;Travis CI&quot;&gt;&lt;/a&gt;Travis CI&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;，是一个专门为开源项目打造的持续集成环境。&lt;br&gt;如果你有一个放在github上的开源项目，Travis CI简直就是一个完美的CI选择。&lt;br&gt;
    
    </summary>
    
    
      <category term="GitHub Pages" scheme="http://cuiqingwei.github.io/tags/GitHub-Pages/"/>
    
      <category term="Travis CI" scheme="http://cuiqingwei.github.io/tags/Travis-CI/"/>
    
      <category term="MkDocs" scheme="http://cuiqingwei.github.io/tags/MkDocs/"/>
    
  </entry>
  
  <entry>
    <title>linkit-smart-7688-build</title>
    <link href="http://cuiqingwei.github.io/2016/10/16/2016-10-16-linkit-smart-7688-build/"/>
    <id>http://cuiqingwei.github.io/2016/10/16/2016-10-16-linkit-smart-7688-build/</id>
    <published>2016-10-15T16:37:40.000Z</published>
    <updated>2016-10-15T17:05:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linkit-smart-feed"><a href="#linkit-smart-feed" class="headerlink" title="linkit-smart-feed"></a>linkit-smart-feed</h1><p>This feeds holds the SDK wifi driver and the config/meta package for the LinkIt Smart 7688 (Duo)</p>
<h1 id="Build-the-firmware-from-sources"><a href="#Build-the-firmware-from-sources" class="headerlink" title="Build the firmware from sources"></a>Build the firmware from sources</h1><p>This section describes how to build the firmware for LinkIt Smart 7688 and LinkIt Smart 7688 Duo from source codes.<br><a id="more"></a></p>
<h3 id="Host-environment"><a href="#Host-environment" class="headerlink" title="Host environment"></a>Host environment</h3><p>The following operations are performed under a Ubuntu LTS 14.04.3 environment. For a Windows or a Mac OS X host computer, you can install a VM for having the same environment:</p>
<ul>
<li>Download Ubuntu 14.04.3 LTS image from <a href="http://www.ubuntu.com" target="_blank" rel="external">http://www.ubuntu.com</a></li>
<li>Install this image with VirtualBox (<a href="http://virtualbox.org" target="_blank" rel="external">http://virtualbox.org</a>) on the host machine. 50GB disk space reserved for the VM is recommanded</li>
</ul>
<h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><p>In the Ubuntu system, open the <em>Terminal</em> application and type the following commands:</p>
<ol>
<li><p>Install prerequisite packages for building the firmware:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git g++ make libncurses5-dev subversion libssl-dev gawk libxml-parser-perl unzip wget python xz-utils</div></pre></td></tr></table></figure>
</li>
<li><p>Download OpenWrt CC source codes:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git://git.openwrt.org/15.05/openwrt.git</div></pre></td></tr></table></figure>
</li>
<li><p>Prepare the default configuration file for feeds:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd openwrt</div><div class="line">$ cp feeds.conf.default feeds.conf</div></pre></td></tr></table></figure>
</li>
<li><p>Add the LinkIt Smart 7688 feed:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo src-git linkit https://github.com/MediaTek-Labs/linkit-smart-7688-feed.git &gt;&gt; feeds.conf</div></pre></td></tr></table></figure>
</li>
<li><p>Update the feed information of all available packages for building the firmware:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./scripts/feeds update</div></pre></td></tr></table></figure>
</li>
<li><p>Install all packages:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./scripts/feeds install -a</div></pre></td></tr></table></figure>
</li>
<li><p>Prepare the kernel configuration to inform OpenWrt that we want to build an firmware for LinkIt Smart 7688:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make menuconfig</div></pre></td></tr></table></figure>
<p> <strong> Select the options as below: </strong></p>
<pre><code>- Target System: `Ralink RT288x/RT3xxx`
- Subtarget: `MT7688 based boards`
- Target Profile: `LinkIt7688`
</code></pre><p> <img src="/img/20161016/1.png" alt=""></p>
<p> Save and exit (<strong><font color="red">use the deafult config file name without changing it</font></strong>)</p>
</li>
</ol>
<ol>
<li><p>Start the compilation process:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make V=99</div></pre></td></tr></table></figure>
</li>
<li><p>After the build process completes, the resulted firmware file will be under <code>bin/ramips/openwrt-ramips-mt7688-LinkIt7688-squashfs-sysupgrade.bin</code>. Depending on the H/W resources of the host environment, the build process may <strong>take more than 2 hours</strong>.</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linkit-smart-feed&quot;&gt;&lt;a href=&quot;#linkit-smart-feed&quot; class=&quot;headerlink&quot; title=&quot;linkit-smart-feed&quot;&gt;&lt;/a&gt;linkit-smart-feed&lt;/h1&gt;&lt;p&gt;This feeds holds the SDK wifi driver and the config/meta package for the LinkIt Smart 7688 (Duo)&lt;/p&gt;
&lt;h1 id=&quot;Build-the-firmware-from-sources&quot;&gt;&lt;a href=&quot;#Build-the-firmware-from-sources&quot; class=&quot;headerlink&quot; title=&quot;Build the firmware from sources&quot;&gt;&lt;/a&gt;Build the firmware from sources&lt;/h1&gt;&lt;p&gt;This section describes how to build the firmware for LinkIt Smart 7688 and LinkIt Smart 7688 Duo from source codes.&lt;br&gt;
    
    </summary>
    
    
      <category term="linkit-smart-7688" scheme="http://cuiqingwei.github.io/tags/linkit-smart-7688/"/>
    
  </entry>
  
  <entry>
    <title>路亚竿的硬度与调性你是否混淆</title>
    <link href="http://cuiqingwei.github.io/2016/10/12/2016-10-12-%E8%B7%AF%E4%BA%9A%E7%AB%BF%E7%9A%84%E7%A1%AC%E5%BA%A6%E4%B8%8E%E8%B0%83%E6%80%A7%E4%BD%A0%E6%98%AF%E5%90%A6%E6%B7%B7%E6%B7%86/"/>
    <id>http://cuiqingwei.github.io/2016/10/12/2016-10-12-路亚竿的硬度与调性你是否混淆/</id>
    <published>2016-10-12T02:27:40.000Z</published>
    <updated>2017-02-22T11:17:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路亚竿的硬度"><a href="#路亚竿的硬度" class="headerlink" title="路亚竿的硬度"></a>路亚竿的硬度</h2><p>选择路亚竿的时候大部分钓友会关注：长度、调性、外观做工质量、品牌与价格。其中“调性”普遍会被大家想到“M、ML、MH”等英文缩写，也经常有卖家或者钓友这样称呼：“这支竿是M调的，那支竿是MH调的”等等，实际上这些英文缩写说的不是路亚竿的调性而是硬度，英文称“<font color="red"><strong>Power</strong> <em>（最大负荷）</em></font>” 。</p>
<p>路亚竿的 <font color="red"><strong>硬度</strong> <em>（最大负荷）</em></font>就是我们通常说的ML、M、MH等“调性”，是指的路亚竿的最大负荷值以及适合抛投饵重的范围。路亚竿的硬度由软到硬大概分为几个等：<em>UUL-UL-L-ML-M-MH-H-XH-XXH</em>。其中“<strong>M</strong>”为分界线，以上为软，以下为硬。</p>
<p>路亚竿的硬度分类如下：<br>    UUL——Ultra Ultra light极软<br>    UL——Ultra light超软<br>    L——Light 软<br>    ML——Medium light 中软<br>    M——Medium 中等<br>    MH——Medium heavy 中硬<br>    H——Heavy 硬<br>    XH——Extra heavy 超硬<br>    XXH——Extra extra heavy 超超硬</p>
<h2 id="路亚竿的调性"><a href="#路亚竿的调性" class="headerlink" title="路亚竿的调性"></a>路亚竿的调性</h2><p>上面说了路亚竿的调性区别于硬度，但什么是路亚竿的调性呢？国内钓友对台钓竿相对比较了解，常说的台钓竿的调性如46、37、28、19调等，是表示钓竿中鱼受力时，竿身的弯曲点越来越靠近前稍。路亚竿的调性也可以这样理解，有类似的数值表示这样的参数，只是因为路亚钓法源于欧美，欧美关于调性的叫法不同而已。</p>
<p>路亚竿 <font color="red"><strong>调性</strong></font>，以英文单词“<font color="red"><strong>Action</strong></font>”表示，<font color="blue"><em>钓竿中鱼受力竿身的弯曲点越来越靠近前稍，称调性越快，反之调性越慢，以中调作为快慢调的分界线</em></font>，</p>
<p>详细介绍如下：<br>    S——Slow 慢速调<br>    MR——Medium Regular 中慢调<br>    R——Regular 中调<br>    MF——Medium Fsst 中快调<br>    F——Fast 快调<br>    F+——Fast+ 快调+<br>    XF——Extra Fast 超快调  </p>
<blockquote>
<p>路亚竿的硬度和调性，是根据不同钓场和需求设定的，不同的厂家有不同的设计理念，现在普遍流行的是快调路亚竿，竿稍纤细而灵敏，利于感知水下鱼的就饵动作，但有些厂家把竿稍越做越细？调性快就真的好么？其实不然，针对不同钓场和对象鱼，应该有不同的配置方式。比如重草区雷强钓法，此时应该选用慢调硬竿；而使用软虫钓组时，为了感知水下轻微动作则应该选择中软的快调竿等等。    </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;路亚竿的硬度&quot;&gt;&lt;a href=&quot;#路亚竿的硬度&quot; class=&quot;headerlink&quot; title=&quot;路亚竿的硬度&quot;&gt;&lt;/a&gt;路亚竿的硬度&lt;/h2&gt;&lt;p&gt;选择路亚竿的时候大部分钓友会关注：长度、调性、外观做工质量、品牌与价格。其中“调性”普遍会被大家想到“M、M
    
    </summary>
    
    
      <category term="路亚" scheme="http://cuiqingwei.github.io/tags/%E8%B7%AF%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>活鱼放血</title>
    <link href="http://cuiqingwei.github.io/2016/10/11/2016-10-11-%E6%B4%BB%E9%B1%BC%E6%94%BE%E8%A1%80/"/>
    <id>http://cuiqingwei.github.io/2016/10/11/2016-10-11-活鱼放血/</id>
    <published>2016-10-11T02:27:40.000Z</published>
    <updated>2016-12-30T01:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>鱼的鳃部是血管较集中的位置，在这里下刀比其它部位较好些。<br>用刀往两边的鳃盖下部边缘处也就是靠鱼腹部的方向用力往下切上一刀，此时流出血后放到清水中让其游动，这样能使鱼体内的血液加速流出体外，使鱼体内的血达到最少量，这样的排放后血的鱼较少鱼的腥味，在吃食上味道鲜美。<strong>其次放血后的鱼易于保鲜不易变质变坏。</strong></p>
<a id="more"></a>
<p><img src="/img/20161011/fish.jpg" alt=""></p>
<p><em>大多数人杀鱼时不懂得放血，其实杀鱼一定要记得放血，这样杀好的鱼才会鲜嫩不腥。因为鱼肉或其它肉类食材之所以会有腥味，归根到底还是血里有腥味，如果把血放掉一些腥味就会减轻许多了。</em></p>
<blockquote>
<embed src="http://player.youku.com/player.php/sid/XMTQ1Mzg4NjAwMA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鱼的鳃部是血管较集中的位置，在这里下刀比其它部位较好些。&lt;br&gt;用刀往两边的鳃盖下部边缘处也就是靠鱼腹部的方向用力往下切上一刀，此时流出血后放到清水中让其游动，这样能使鱼体内的血液加速流出体外，使鱼体内的血达到最少量，这样的排放后血的鱼较少鱼的腥味，在吃食上味道鲜美。&lt;strong&gt;其次放血后的鱼易于保鲜不易变质变坏。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="路亚" scheme="http://cuiqingwei.github.io/tags/%E8%B7%AF%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>路亚装备</title>
    <link href="http://cuiqingwei.github.io/2016/10/10/2016-10-10-%E8%B7%AF%E4%BA%9A%E8%A3%85%E5%A4%87/"/>
    <id>http://cuiqingwei.github.io/2016/10/10/2016-10-10-路亚装备/</id>
    <published>2016-10-10T02:27:40.000Z</published>
    <updated>2017-09-22T03:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路亚竿"><a href="#路亚竿" class="headerlink" title="路亚竿"></a>路亚竿</h1><p><strong><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.Jvl32R&amp;id=520196909891&amp;_u=c154cj1987f" target="_blank" rel="external">LRT702MHC</a></strong>  <em>领峰 2015款 魂系列  订制版一体式软木柄</em></p>
<blockquote>
<p>真正意义上的软饵以及岸钓远投竿，拥有超敏锐的快调竿尖和强有力的竿身不单只是精确抛投，<br>更是拥有良好感知水底结构的能力和从咬口开始一气呵成将鱼从水底拔出来的迸发力。<br>并且拥有20克亮片80+直线距离的远投能力。</p>
</blockquote>
<a id="more"></a>
<p><img src="/img/20161010/LRT702MHC.jpg" alt=""></p>
<p> <strong><a href="https://item.taobao.com/item.htm?spm=a1z0k.6846577.0.0.lvKUtC&amp;id=38551093007&amp;_u=t2dmg8j26111" target="_blank" rel="external">CWS702MH</a></strong> <em>Berkley /美国贝克力</em></p>
<p> <img src="/img/20161010/CWS702MH.jpg" alt=""></p>
<p><strong><a href="https://detail.tmall.com/item.htm?id=36807472493&amp;spm=a1z09.2.0.0.uapaU2&amp;_u=c154cj1d09c" target="_blank" rel="external">LMS001-662M</a></strong> <em>鱼猎人征途系列</em></p>
<p><img src="/img/20161010/LMS001-662M.jpg" alt=""></p>
<p><strong><a href="https://item.taobao.com/item.htm?spm=a1z0d.6639537.1997196601.113.Q7PwbK&amp;id=522011254955" target="_blank" rel="external">LYNN FISHING LURE/小林路亚 2.03米枪柄</a></strong></p>
<p><img src="/img/20161010/LYNN-L.jpg" alt=""></p>
<p><strong><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.HzLi42&amp;id=534294970180&amp;_u=s154cj11be9" target="_blank" rel="external">Major SKR-B862ML</a></strong> <em>马牌</em></p>
<p>钓竿长度：2米58 节数：2节 饵重：10-30克 线重：8-14磅 PE:0.8-2号 调性：中调</p>
<p><img src="/img/20161010/SKR-B862ML.png" alt=""></p>
<p><strong><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.HzLi42&amp;id=17264821075&amp;_u=s154cj10d82" target="_blank" rel="external">LRC664M</a></strong> <em>贝克力四节便携竿</em></p>
<p>全长：1.98m节数：4收缩长度：52.5cm饵重：7-21g适合线重：8-20LB含碳量：95% 自重：136g</p>
<p><img src="/img/20161010/LRC664M.jpg" alt=""></p>
<h1 id="渔线轮"><a href="#渔线轮" class="headerlink" title="渔线轮"></a>渔线轮</h1><p><strong><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.uapaU2&amp;id=525599654852&amp;_u=c154cj1c6bf" target="_blank" rel="external">TATULA CT TYPE R 100HS</a></strong>  <em>DAIWA大蜘蛛美版水滴轮</em></p>
<p><img src="/img/20161010/TATULA-CT-100HS.jpg" alt=""></p>
<p><strong><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.uapaU2&amp;id=14816583709&amp;_u=c154cj143ab" target="_blank" rel="external">SIENNA 2500FD</a></strong> <em>禧玛诺4轴纺车渔轮 马来西亚产</em></p>
<p><img src="/img/20161010/SN2500FD.jpg" alt=""></p>
<p><strong><a href="https://item.taobao.com/item.htm?spm=a1z0d.6639537.1997196601.42.Q7PwbK&amp;id=7704001910" target="_blank" rel="external">RYOGA 1016</a></strong> <em>DAIWA达瓦顶级鼓轮</em></p>
<blockquote>
<p>可选替换部件：</p>
<ol>
<li>Daiwa (达亿瓦) RCSB线杯 鼓式轮适用</li>
<li>Daiwa (达亿瓦) RCSB 单柄摇柄 鼓式轮适用</li>
<li>Daiwa (达亿瓦) RCSB 双柄摇柄 鼓式轮适用</li>
</ol>
</blockquote>
<p><img src="/img/20161010/RYOGA.png" alt=""></p>
<p><strong><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.HzLi42&amp;id=520734861061&amp;_u=s154cj10930" target="_blank" rel="external">Mentaniu DC HG</a></strong> <em>禧玛诺蒙塔尼DC 2015</em></p>
<p><img src="/img/20161010/MetaniumDC.png" alt=""><br><img src="/img/20161010/MetaniumDC1.png" alt=""></p>
<p><strong><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.6c818473iizZfR&amp;id=545441440003&amp;_u=m154cj14da2" target="_blank" rel="external">SHIMANO New EXSENCE DC XG</a></strong> <em>禧玛诺海水DC 2017</em></p>
<p><img src="/img/20161010/EXSENCE DC.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;路亚竿&quot;&gt;&lt;a href=&quot;#路亚竿&quot; class=&quot;headerlink&quot; title=&quot;路亚竿&quot;&gt;&lt;/a&gt;路亚竿&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://item.taobao.com/item.htm?spm=a1z09.2.0.0.Jvl32R&amp;amp;id=520196909891&amp;amp;_u=c154cj1987f&quot;&gt;LRT702MHC&lt;/a&gt;&lt;/strong&gt;  &lt;em&gt;领峰 2015款 魂系列  订制版一体式软木柄&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真正意义上的软饵以及岸钓远投竿，拥有超敏锐的快调竿尖和强有力的竿身不单只是精确抛投，&lt;br&gt;更是拥有良好感知水底结构的能力和从咬口开始一气呵成将鱼从水底拔出来的迸发力。&lt;br&gt;并且拥有20克亮片80+直线距离的远投能力。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路亚" scheme="http://cuiqingwei.github.io/tags/%E8%B7%AF%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>Kali Linux Live USB on MAC</title>
    <link href="http://cuiqingwei.github.io/2016/10/10/2016-10-10-Kali-Linux-Live-USB-on-MAC/"/>
    <id>http://cuiqingwei.github.io/2016/10/10/2016-10-10-Kali-Linux-Live-USB-on-MAC/</id>
    <published>2016-10-09T18:27:40.000Z</published>
    <updated>2016-10-15T12:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>download Kali Linux iso images from <a href="http://www.kali.org/downloads/" target="_blank" rel="external">http://www.kali.org/downloads/</a></li>
<li>Format the usb stick in disk utility as msdos</li>
<li>Open Terminal Window and run the following</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">➜  ~ diskutil list</div><div class="line">/dev/disk0 (internal, physical):</div><div class="line">   <span class="comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span></div><div class="line">   0:      GUID_partition_scheme                        *128.0 GB   disk0</div><div class="line">   1:                        EFI EFI                     209.7 MB   disk0s1</div><div class="line">   2:                  Apple_HFS OS X                    127.2 GB   disk0s2</div><div class="line">   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3</div><div class="line">/dev/disk1 (internal, physical):</div><div class="line">   <span class="comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span></div><div class="line">   0:      GUID_partition_scheme                        *500.1 GB   disk1</div><div class="line">   1:                        EFI EFI                     209.7 MB   disk1s1</div><div class="line">   2:                  Apple_HFS WORK                    400.0 GB   disk1s2</div><div class="line">   3:                  Apple_HFS DATA                    99.6 GB    disk1s3</div><div class="line">/dev/disk2 (external, physical):</div><div class="line">   <span class="comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span></div><div class="line">   0:     FDisk_partition_scheme                        *8.0 GB     disk2</div><div class="line">   1:                 DOS_FAT_32 KALI                    8.0 GB     disk2s1</div></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li>my USB device is /dev/disk2, Then unmount disk by diskutil command</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~ diskutil umountDisk /dev/disk2</div><div class="line">Unmount of all volumes on disk2 was successful</div></pre></td></tr></table></figure>
<ol>
<li>You may have to run this as sudo</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo dd <span class="keyword">if</span>=kali-linux-2016.2-amd64.iso of=/dev/disk2 bs=512 conv=noerror,sync</div><div class="line">6009312+0 records <span class="keyword">in</span></div><div class="line">6009312+0 records out</div><div class="line">3076767744 bytes transferred <span class="keyword">in</span> 2227.332489 secs (1381369 bytes/sec)</div></pre></td></tr></table></figure>
<p>Waiting for complete<br>When It success</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;download Kali Linux iso images from &lt;a href=&quot;http://www.kali.org/downloads/&quot;&gt;http://www.kali.org/downloads/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Format the usb stick in disk utility as msdos&lt;/li&gt;
&lt;li&gt;Open Terminal Window and run the following&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;➜  ~ diskutil list&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/disk0 (internal, physical):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   0:      GUID_partition_scheme                        *128.0 GB   disk0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   1:                        EFI EFI                     209.7 MB   disk0s1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   2:                  Apple_HFS OS X                    127.2 GB   disk0s2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/disk1 (internal, physical):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   0:      GUID_partition_scheme                        *500.1 GB   disk1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   1:                        EFI EFI                     209.7 MB   disk1s1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   2:                  Apple_HFS WORK                    400.0 GB   disk1s2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   3:                  Apple_HFS DATA                    99.6 GB    disk1s3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/disk2 (external, physical):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   0:     FDisk_partition_scheme                        *8.0 GB     disk2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   1:                 DOS_FAT_32 KALI                    8.0 GB     disk2s1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="kali-linux" scheme="http://cuiqingwei.github.io/tags/kali-linux/"/>
    
  </entry>
  
  <entry>
    <title>路亚绑法</title>
    <link href="http://cuiqingwei.github.io/2016/10/09/2016-10-09-%E8%B7%AF%E4%BA%9A%E7%BB%91%E6%B3%95/"/>
    <id>http://cuiqingwei.github.io/2016/10/09/2016-10-09-路亚绑法/</id>
    <published>2016-10-09T02:27:40.000Z</published>
    <updated>2016-12-29T15:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渔轮绑法"><a href="#渔轮绑法" class="headerlink" title="渔轮绑法"></a>渔轮绑法</h1><p><img src="/img/20161009/渔轮上线绑法.jpg" alt=""></p>
<a id="more"></a>
<p><img src="/img/20161009/渔轮上线绑法1.jpg" alt=""></p>
<h1 id="路亚饵绑法"><a href="#路亚饵绑法" class="headerlink" title="路亚饵绑法"></a>路亚饵绑法</h1><ol>
<li>帕罗玛扣（Palomar Knot）</li>
</ol>
<p><img src="/img/20161009/帕罗玛扣.jpg" alt=""><br><img src="/img/20161009/帕罗玛扣8字环.jpg" alt=""></p>
<ol>
<li>圣地亚哥果酱扣（San Diego Jam Knot）</li>
</ol>
<p><img src="/img/20161009/圣地亚哥果酱扣.jpg" alt=""></p>
<blockquote>
<p>参考视频（28分处开始看）<br><a href="http://player.youku.com/player.php/Type/Folder/Fid//Ob//sid/XODYzMjE2ODAw/v.swf" target="_blank" rel="external">http://player.youku.com/player.php/Type/Folder/Fid//Ob//sid/XODYzMjE2ODAw/v.swf</a></p>
</blockquote>
<h1 id="前导线绑法"><a href="#前导线绑法" class="headerlink" title="前导线绑法"></a>前导线绑法</h1><p><img src="/img/20161009/前导线绑法.gif" alt=""><br><img src="/img/20161009/前导线绑法.jpg" alt=""></p>
<h1 id="曲柄钩绑法"><a href="#曲柄钩绑法" class="headerlink" title="曲柄钩绑法"></a>曲柄钩绑法</h1><p><img src="/img/20161009/曲柄钩绑法.jpg" alt=""></p>
<blockquote>
<p><strong>参考链接</strong><br>什么是曲柄钩 <a href="http://www.aidiao.com/baike/3171.html" target="_blank" rel="external">http://www.aidiao.com/baike/3171.html</a><br>曲柄钩绑法 <a href="http://www.diaoyu123.com/luyarumen/87864.html" target="_blank" rel="external">http://www.diaoyu123.com/luyarumen/87864.html</a><br>德州钓组 <a href="http://www.rensheng2.com/150000/141260.shtml" target="_blank" rel="external">http://www.rensheng2.com/150000/141260.shtml</a><br>最容易的倒钓组绑法 <a href="http://www.lure123.com/news/0/550-1.shtml" target="_blank" rel="external">http://www.lure123.com/news/0/550-1.shtml</a><br>视屏演示 <a href="http://v.ku6.com/show/K91_Gmh5Vi-0TKEgDnCvSg...html?from=my" target="_blank" rel="external">http://v.ku6.com/show/K91_Gmh5Vi-0TKEgDnCvSg...html?from=my</a></p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><strong>Fishing Knots</strong> <em><a href="http://www.netknots.com/fishing_knots" target="_blank" rel="external">http://www.netknots.com/fishing_knots</a></em><br><strong>路亚鱼线的绑法</strong> <em><a href="http://www.diaoyur.com/a/2013/1140.html" target="_blank" rel="external">http://www.diaoyur.com/a/2013/1140.html</a></em><br><strong>小汐打GT节</strong>  <em><a href="http://v.youku.com/v_show/id_XODg5MzExMzQw.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XODg5MzExMzQw.html</a></em><br><strong>简单快速的前导线结AK结</strong> <em><a href="http://v.youku.com/v_show/id_XNzMwNjU1NDYw.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XNzMwNjU1NDYw.html</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;渔轮绑法&quot;&gt;&lt;a href=&quot;#渔轮绑法&quot; class=&quot;headerlink&quot; title=&quot;渔轮绑法&quot;&gt;&lt;/a&gt;渔轮绑法&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/20161009/渔轮上线绑法.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="路亚" scheme="http://cuiqingwei.github.io/tags/%E8%B7%AF%E4%BA%9A/"/>
    
  </entry>
  
</feed>
