<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iZheteng</title>
    <description>活着，就要去折腾！
</description>
    <link>http://cuiqingwei.github.com/</link>
    <atom:link href="http://cuiqingwei.github.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 29 Aug 2016 18:22:34 +0800</pubDate>
    <lastBuildDate>Mon, 29 Aug 2016 18:22:34 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>网站设计的最简主义</title>
        <description>&lt;p&gt;之前在阮一峰的网络日志看到《网站设计的最简主义》，文中写到：&lt;/p&gt;

&lt;p&gt;昨天，我看到了一个网站 (&lt;a href=&quot;http://www.plaintxt.org&quot;&gt;&lt;u&gt;http://www.plaintxt.org&lt;/u&gt;&lt;/a&gt;)，提倡最简主义（&lt;strong&gt;Minimalism&lt;/strong&gt;）的设计，这也正是我的想法。我因此感到十分惊喜。所谓”最简主义”设计，就是说网页上没有不相关的内容与装饰，美工基本就是白底黑字，尽量少用图片和复杂的排版，给人一种非常简单朴素的感觉。
&lt;strong&gt;Plaintxt.org&lt;/strong&gt;的站长&lt;strong&gt;Scott&lt;/strong&gt;说，他信奉”最简主义”设计，因为&lt;strong&gt;2000&lt;/strong&gt;年下半年他去尼泊尔当志愿者。在那里，他只能用&lt;strong&gt;24.4K&lt;/strong&gt;的&lt;strong&gt;Modem&lt;/strong&gt;上网，这意味着一幅&lt;strong&gt;120K&lt;/strong&gt;的图片，都要花将近1分钟才能看到。他在尼泊尔待了3年，再回到美国以后，彻底改变了对网站设计的看法，从此走上了宣传”最简主义”的道路。
至于我为什么喜欢”最简主义”，除了因为我喜欢简洁的东西以外，还因为我觉得将页面最简化，可以使访问者集中注意力，关注主要的内容。（顺便说一句，在读书上，我也喜欢”最简主义”的文字，就是说没有不相关的废话。）我认为，”最简主义”有利于节省访问者的时间，体现了对访问者的尊重，最终也有利于网站的成功。Google就是”最简主义”的一个典型，首页上就是只有一个长长的搜索框。
另外，在Plaintxt.org的首页上，Scott还说了一句很棒的话。他说：&lt;strong&gt;“我不是程序员，也不是设计师，我只是碰巧有一些想法和一台电脑。”（I am not a designer nor a coder. I’m just a guy with a point-of-view and a computer.）&lt;/strong&gt;我很喜欢这句话，它也是我的心声。&lt;/p&gt;

&lt;p&gt;赞同&lt;em&gt;最简主义&lt;/em&gt;，因此，本人主页追求简洁朴素！&lt;/p&gt;
</description>
        <pubDate>Fri, 13 May 2016 01:23:37 +0800</pubDate>
        <link>http://cuiqingwei.github.com/learn/2016/05/13/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%9C%80%E7%AE%80%E4%B8%BB%E4%B9%89.html</link>
        <guid isPermaLink="true">http://cuiqingwei.github.com/learn/2016/05/13/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%9C%80%E7%AE%80%E4%B8%BB%E4%B9%89.html</guid>
        
        
        <category>learn</category>
        
      </item>
    
      <item>
        <title>GitHub建立个人站点</title>
        <description>&lt;p&gt;Jekyll-简单的博客、静态网站工具&lt;a href=&quot;http://jekyll.bootcss.om/&quot;&gt;http://jekyll.bootcss.com/&lt;/a&gt;;&lt;/p&gt;

&lt;h3 id=&quot;git&quot;&gt;1.Git简介&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。&lt;/li&gt;
  &lt;li&gt;GitHub可以托管各种git库的站点。&lt;/li&gt;
  &lt;li&gt;GitHub Pages免费的静态站点，三个特点：免费托管、自带主题、支持自制页面和Jekyll。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;github-pages&quot;&gt;2.为什么使用Github Pages&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;搭建简单而且免费；&lt;/li&gt;
  &lt;li&gt;支持静态脚本；&lt;/li&gt;
  &lt;li&gt;可以绑定你的域名；&lt;/li&gt;
  &lt;li&gt;DIY自由发挥，动手实践一些有意思的东西git,markdown,bootstrap,jekyll；&lt;/li&gt;
  &lt;li&gt;理想写博环境，git+github+markdown+jekyll；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;github-pages-1&quot;&gt;3 创建Github Pages&lt;/h3&gt;

&lt;h4 id=&quot;git-1&quot;&gt;3.1 安装git工具&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Windows &lt;a href=&quot;http://windows.github.com/&quot;&gt;http://windows.github.com/&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Mac OS X &lt;a href=&quot;http://mac.github.com/&amp;amp;gt&quot;&gt;http://mac.github.com/&amp;amp;gt&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pages&quot;&gt;3.2 两种pages模式&lt;/h4&gt;

&lt;h5 id=&quot;userorganization-pages-&quot;&gt;1) User/Organization Pages 个人或公司站点&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;使用自己的用户名，每个用户名下面只能建立一个；&lt;/li&gt;
  &lt;li&gt;资源命名必须符合这样的规则username/username.github.com；&lt;/li&gt;
  &lt;li&gt;主干上内容被用来构建和发布页面&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;project-pages-&quot;&gt;2) Project Pages 项目站点&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;gh-pages分支用于构建和发布；&lt;/li&gt;
  &lt;li&gt;如果user/org pages使用了独立域名，那么托管在账户下的所有project pages将使用相同的域名进行重定向，除非project pages使用了自己的独立域名；&lt;/li&gt;
  &lt;li&gt;如果没有使用独立域名，project pages将通过子路径的形式提供服务username.github.com/projectname；&lt;/li&gt;
  &lt;li&gt;自定义404页面只能在独立域名下使用，否则会使用User Pages 404；&lt;/li&gt;
  &lt;li&gt;创建项目站点步骤：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ git clone https://github.com/USERNAME/PROJECT.git PROJECT
$ git checkout --orphan gh-pages
$ git rm -rf .
$ git add .
$ git commit -a -m &amp;quot;First pages commit&amp;quot;
$ git push origin gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;可以通过User/OrganizationPages建立主站，而通过ProjectPages挂载二级应用页面。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;4 使用Jekyll搭建博客&lt;/h3&gt;

&lt;h4 id=&quot;jekyll-1&quot;&gt;4.1 什么是jekyll&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Jekyll是一种简单的、适用于博客的、静态网站生成引擎。它使用一个模板目录作为网站布局的基础框架，支持Markdown、Textile等标记语言的解析，提供了模板、变量、插件等功能，最终生成一个完整的静态Web站点。说白了就是，只要安装Jekyll的规范和结构，不用写html，就可以生成网站。[jekyll介绍][jekyll on github][jekyllbootstrap]。&lt;/li&gt;
  &lt;li&gt;Jekyll使用Liquid模板语言，GitHub建立个人站点表示文章标题，表示文章内容。我们可以用两种Liquid标记语言：输出标记（output markup）和标签标记 (tag markup)。输出标记会输出文本（如果被引用的变量存在），而标签标记不会。输出标记是用双花括号分隔，而标签标记是用花括号-百分号对分隔。[Liquid模板语言] [Liquid模板变量参考]。&lt;/li&gt;
  &lt;li&gt;jekyll与github的关系：GitHub Pages一个由 GitHub 提供的用于托管项目主页或博客的服务，jekyll是后台所运行的引擎。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;jekyll-2&quot;&gt;4.2 jekyll本地环境搭建&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;下载最新的RubyInstaller并安装(我下载的是rubyinstaller-1.9.3-p194.exe)，设置环境变量，path中配置C:\Ruby193\bin目录，然后在命令行终端下输入gem update –system来升级gem；&lt;/li&gt;
  &lt;li&gt;下载最新的DevKit，DevKit是windows平台下编译和使用本地C/C++扩展包的工具。它就是用来模拟Linux平台下的make,gcc,sh来进行编译。但是这个方法目前仅支持通过RubyInstaller安装的Ruby，并双击运行解压到C:\DevKit。然后打开终端cmd，输入下列命令进行安装：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd C:\DevKit
ruby dk.rb init
ruby dk.rb install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;完成上面的准备就可以安装Jekyll了,因为Jekyll是用Ruby编写的,最好的安装方式是通过RubyGems(gem):&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem install Jekyll&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;并使用命令检验是否安装成功&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll --version&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;安装Rdiscount，这个用来解析Markdown标记的包，使用如下命令：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem install rdiscount&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;运行本地工程：
cd 到工程目录，启动服务：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll --server&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;jekyll-3&quot;&gt;4.3 jekyll目录结构**&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;strong&gt;_posts：&lt;/strong&gt;&lt;/dt&gt;
      &lt;dd&gt;_posts中的数据文档，通过注入_layouts定义的模板，通过jekyll –server最终生成的静态页面在_sites目录。目录是用来存放你的文章的，一般以日期的形式书写标题。&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;strong&gt;_layouts：&lt;/strong&gt;&lt;/dt&gt;
      &lt;dd&gt;_layouts中的模板一般指向了_includes/themes中的模板。目录是用来存放模板的，在这里你可以定义页面中不同的头部和底部。&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;strong&gt;_includes：&lt;/strong&gt;&lt;/dt&gt;
      &lt;dd&gt;_includes/JB中有一些常用的工具，用于列表显示、评论等；&lt;/dd&gt;
      &lt;dd&gt;_includes/themes中可参看主题的相关html文档。&lt;/dd&gt;
      &lt;dd&gt;_includes/themes中的主题一般包含default.html、post.html和page.html三个文档。default.html定义了网站的最上层框架（模板），post.html和page.html是其子框架（模板）。&lt;/dd&gt;
      &lt;dd&gt;生成好的html子页面通过default.html的变量调用，生成整个页面。&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;/dt&gt;
      &lt;dd&gt;渲染页面的CSS和JS文档在assets/themes中&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;/dt&gt;
      &lt;dd&gt;站点生成需要用到_config.yml配置文件，站点的全局变量在_config.yml中定义，用site.访问；页面的变量在YAML Front Matter中定义，用page.访问，更多的模板变量可参考模板数据。&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt; 是你的页面首页。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;jekyll-bootstrap&quot;&gt;4.4 Jekyll-Bootstrap创建博客&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;创建个人站点，即创建一个新资源，格式为username.github.com；&lt;/li&gt;
  &lt;li&gt;安装Jekyll-Bootstrap：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.com
$ cd USERNAME.github.com
$ git remote set-url origin git@github.com:USERNAME/USERNAME.github.com.git
$ git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;访问创建好的个人站点：username.github.com&lt;/li&gt;
  &lt;li&gt;在本地测试查看效果：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd USERNAME.github.com
jekyll --server&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;jekyll-&quot;&gt;4.5 Jekyll 写博过程&lt;/h4&gt;

&lt;h5 id=&quot;configyml&quot;&gt;1) 配置_config.yml&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;修改标题：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;title : My Blog =)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;修改个人信息：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;author :
name : Name Lastname
email : blah@email.test
github : username
twitter : username
feedburner : feedname&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;section&quot;&gt;2) 写文章&lt;/h5&gt;
&lt;p&gt;按照_config.yml的格式permalink: /:categories/:year/:month/:day/:title，可以修改格式，创建markdown格式文件，就可以发布了。&lt;/p&gt;

&lt;h5 id=&quot;section-1&quot;&gt;3) 发布&lt;/h5&gt;
&lt;p&gt;本地预览修改：运行jekyll –server，预览http:127.0.0.1:4000。
发布到github上：通过命令提交或者客户端提交。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;4.6 个性化博客&lt;/h4&gt;
&lt;p&gt;Github Page完成了博客的主要功能，写作、发布、修改，这些都是相对静态的东西，就是你自己可以控制的事情，还有一些动态的东西Github Pages无法支持，比如说文章浏览次数、文章的评论等，还有一些个性化的东西，像个性化页头页尾、代码高亮可以把博客整的更漂亮一点，其实这写都可以通过第三方应用来实现，个性化自己的博客。
加上Disqus云评论:
注册http://disqus.com
修改_config.yml:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;comments :
provider : disqus
disqus :
short_name : tiansj&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;markdown&quot;&gt;5 使用Markdown&lt;/h3&gt;

&lt;h4 id=&quot;section-3&quot;&gt;5.1 简介&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Markdown 的宗旨是实现「易读易写」。可读性，无论如何，都是最重要的。&lt;/li&gt;
  &lt;li&gt;Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。格式撰写的文件可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。&lt;/li&gt;
  &lt;li&gt;资料：&lt;a href=&quot;http://www.cnblogs.com/purediy/archive/2013/01/10/2855397.html&quot;&gt;搭建环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-4&quot;&gt;5.2 基本语法&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;使用一个或多个空行分隔内容段来生成段落 &amp;lt;p&amp;gt;。&lt;/li&gt;
  &lt;li&gt;标题（h1~h6）格式为使用相应个数的“#”作前缀，比如表示h3用 ### this is a level-3 header ###&lt;/li&gt;
  &lt;li&gt;使用“&amp;gt;”作为段落前缀来标识引用文字段落。这其实是 email 中标记引用文字的标准方式；&lt;/li&gt;
  &lt;li&gt;使用&lt;strong&gt;*&lt;/strong&gt;或&lt;strong&gt;+&lt;/strong&gt;或&lt;strong&gt;-&lt;/strong&gt;来表示无序列表；使用数字加“.”表示有序列表。如：
    &lt;ol&gt;
      &lt;li&gt;I am ordered list item 1…&lt;/li&gt;
      &lt;li&gt;So I should be item 2&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;使用4个以上&lt;strong&gt;空格&lt;/strong&gt;或1个以上的&lt;strong&gt;tab&lt;/strong&gt;来标记代码段落，它们将被&lt;strong&gt;&amp;lt;pre&amp;gt;&lt;/strong&gt;和&lt;strong&gt;&amp;lt;code&amp;gt;&lt;/strong&gt;包裹，这意味着代码段内的字体会是monospace家族的，并且特殊符号不会被转义。&lt;/li&gt;
  &lt;li&gt;使用[test](http://example.net “optional title”)来标记普通链接。&lt;/li&gt;
  &lt;li&gt;使用![img](http://example.net/img.png “optional title”)&amp;gt;来标记图片。引号内的title文字是可选的，链接也可以使用相对路径。&lt;/li&gt;
  &lt;li&gt;使用* 或 _ 包裹文本产生 strong 效果：&lt;em&gt;语气很重的文本&lt;/em&gt; 以及 &lt;strong&gt;语气更重的文本&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;参考资料&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;GitHub Pages 建立个人主页 &lt;a href=&quot;https://pages.github.com/&quot;&gt;https://pages.github.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;jekyll &lt;a href=&quot;http://jekyll.bootcss.com/&quot;&gt;http://jekyll.bootcss.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GitHub Pages和Jekyll入门 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&quot;&gt;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;通过GitHub Pages建立个人站点 &lt;a href=&quot;http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html&quot;&gt;http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;基于jekyll-bootstrap的GitHub Pages搭建过程 &lt;a href=&quot;http://www.cnblogs.com/Leo_wl/p/3402935.html&quot;&gt;http://www.cnblogs.com/Leo_wl/p/3402935.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;jekyll-bootstrap模板 &lt;a href=&quot;http://layouts-the.me.s3-website-us-east-1.amazonaws.com/index.html&quot;&gt;http://layouts-the.me.s3-website-us-east-1.amazonaws.com/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Markdown 语法说明 &lt;a href=&quot;http://wowubuntu.com/markdown/index.html&quot;&gt;http://wowubuntu.com/markdown/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;highlight.js &lt;a href=&quot;https://highlightjs.org/&quot;&gt;https://highlightjs.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 12 May 2016 19:38:38 +0800</pubDate>
        <link>http://cuiqingwei.github.com/learn/2016/05/12/GitHub%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9.html</link>
        <guid isPermaLink="true">http://cuiqingwei.github.com/learn/2016/05/12/GitHub%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9.html</guid>
        
        
        <category>learn</category>
        
      </item>
    
      <item>
        <title>eMaker.Space</title>
        <description>&lt;h1 id=&quot;wiki&quot;&gt;wiki&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.seeedstudio.com/wiki/Main_Page&quot;&gt;http://www.seeedstudio.com/wiki/Main_Page&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wiki.microduino.cc/index.php&quot;&gt;https://wiki.microduino.cc/index.php&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://wiki.dfrobot.com.cn/index.php&quot;&gt;http://wiki.dfrobot.com.cn/index.php&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.alsrobot.cn/wiki/&quot;&gt;http://www.alsrobot.cn/wiki/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://duinopeak.com/wiki/index.php&quot;&gt;http://duinopeak.com/wiki/index.php&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;open-source-hardware&quot;&gt;Open Source Hardware&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.oshwa.org/open-source-hardware-logo/&quot;&gt;http://www.oshwa.org/open-source-hardware-logo/&lt;/a&gt;
&lt;a href=&quot;http://kb.open.eefocus.com/index.php&quot;&gt;http://kb.open.eefocus.com/index.php&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;duino&quot;&gt;Duino&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.arduino.cc/&quot;&gt;https://www.arduino.cc/&lt;/a&gt;
&lt;a href=&quot;http://www.drduino.com/&quot;&gt;http://www.drduino.com/&lt;/a&gt;
&lt;a href=&quot;https://www.microduino.cn/&quot;&gt;https://www.microduino.cn/&lt;/a&gt;
&lt;a href=&quot;http://www.duino-robotics.com/&quot;&gt;http://www.duino-robotics.com/&lt;/a&gt;
&lt;a href=&quot;http://www.86duino.com/&quot;&gt;http://www.86duino.com/&lt;/a&gt;
&lt;a href=&quot;http://www.rfduino.com/&quot;&gt;http://www.rfduino.com/&lt;/a&gt;
&lt;a href=&quot;http://www.netduino.com/&quot;&gt;http://www.netduino.com/&lt;/a&gt;
&lt;a href=&quot;http://wtfduino.calumk.com/&quot;&gt;http://wtfduino.calumk.com/&lt;/a&gt;
&lt;a href=&quot;https://easyeda.com/seeedstudio/Xadow_Duino-M5d71jdvp&quot;&gt;https://easyeda.com/seeedstudio/Xadow_Duino-M5d71jdvp&lt;/a&gt;
&lt;a href=&quot;http://rasp.io/&quot;&gt;http://rasp.io/&lt;/a&gt;
&lt;a href=&quot;http://www.motoduino.com/&quot;&gt;http://www.motoduino.com/&lt;/a&gt;
&lt;a href=&quot;http://cubieboard.org/&quot;&gt;http://cubieboard.org/&lt;/a&gt;
&lt;a href=&quot;http://www.techbang.com/posts/42412-maker&quot;&gt;http://www.techbang.com/posts/42412-maker&lt;/a&gt;
&lt;a href=&quot;http://wiki.iteadstudio.com/Product&quot;&gt;http://wiki.iteadstudio.com/Product&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;raspberry&quot;&gt;Raspberry&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cooking-hacks.com/documentation/tutorials/raspberry-pi-to-arduino-shields-connection-bridge/&quot;&gt;https://www.cooking-hacks.com/documentation/tutorials/raspberry-pi-to-arduino-shields-connection-bridge/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;sparkfun&quot;&gt;Sparkfun&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sparkfun.com/products/13111&quot;&gt;https://www.sparkfun.com/products/13111&lt;/a&gt;
&lt;a href=&quot;https://www.sparkfun.com/products/11511&quot;&gt;https://www.sparkfun.com/products/11511&lt;/a&gt;
&lt;a href=&quot;https://www.sparkfun.com/products/11683&quot;&gt;https://www.sparkfun.com/products/11683&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;blockly&quot;&gt;blockly&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/blockly/&quot;&gt;https://developers.google.com/blockly/&lt;/a&gt;
&lt;a href=&quot;https://blockly-demo.appspot.com/static/demos/index.html&quot;&gt;https://blockly-demo.appspot.com/static/demos/index.html&lt;/a&gt;
&lt;a href=&quot;https://blockly-games.appspot.com/?lang=zh-hans&quot;&gt;https://blockly-games.appspot.com/?lang=zh-hans&lt;/a&gt;
&lt;a href=&quot;https://studio.code.org/&quot;&gt;https://studio.code.org/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;ardublock&quot;&gt;Ardublock&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://sourceforge.net/projects/ardublock/&quot;&gt;https://sourceforge.net/projects/ardublock/&lt;/a&gt;
&lt;a href=&quot;http://blog.ardublock.com/zh/category/tutorial/&quot;&gt;http://blog.ardublock.com/zh/category/tutorial/&lt;/a&gt;
&lt;a href=&quot;https://learn.sparkfun.com/resources/59&quot;&gt;https://learn.sparkfun.com/resources/59&lt;/a&gt;
&lt;a href=&quot;https://learn.sparkfun.com/tutorials/alternative-arduino-interfaces/ardublock&quot;&gt;https://learn.sparkfun.com/tutorials/alternative-arduino-interfaces/ardublock&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;mixly&quot;&gt;Mixly米思齐&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://mixly.cn/&quot;&gt;http://mixly.cn/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;mit-app-inventor-2&quot;&gt;MIT App Inventor 2&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://app.gzjkw.net/&quot;&gt;http://app.gzjkw.net/&lt;/a&gt;
&lt;a href=&quot;http://blog.cavedu.com/programming-language/appinventor/appinventorandarduinowithbluetooth/&quot;&gt;http://blog.cavedu.com/programming-language/appinventor/appinventorandarduinowithbluetooth/&lt;/a&gt;
&lt;a href=&quot;http://appinventor.pevest.com/?page_id=10&quot;&gt;http://appinventor.pevest.com/?page_id=10&lt;/a&gt;
&lt;a href=&quot;https://sites.google.com/site/jingprogram/app&quot;&gt;https://sites.google.com/site/jingprogram/app&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;软件&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sketchup.com/&quot;&gt;http://www.sketchup.com/&lt;/a&gt;
&lt;a href=&quot;http://www.123dapp.com/design&quot;&gt;http://www.123dapp.com/design&lt;/a&gt;
&lt;a href=&quot;https://scratch.mit.edu/&quot;&gt;https://scratch.mit.edu/&lt;/a&gt;
&lt;a href=&quot;http://s4a.cat/&quot;&gt;http://s4a.cat/&lt;/a&gt;
&lt;a href=&quot;http://www.arduino.cc/&quot;&gt;http://www.arduino.cc/&lt;/a&gt;
&lt;a href=&quot;http://www.arduino.org.cn/&quot;&gt;http://www.arduino.org.cn/&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Arduino&quot;&gt;https://en.wikipedia.org/wiki/Arduino&lt;/a&gt;
&lt;a href=&quot;http://i.youku.com/u/UNDYwMzEyOTk2&quot;&gt;http://i.youku.com/u/UNDYwMzEyOTk2&lt;/a&gt;
&lt;a href=&quot;http://www.makerlab.tw/resources/&quot;&gt;http://www.makerlab.tw/resources/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;d-modeling-and-printing-3d&quot;&gt;3D Modeling and Printing ：3D建模和打印&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://the3doodler.com/&quot;&gt;http://the3doodler.com/&lt;/a&gt;
&lt;a href=&quot;https://www.ultimaker.com/&quot;&gt;https://www.ultimaker.com/&lt;/a&gt;
&lt;a href=&quot;http://www.makerbot.com/&quot;&gt;http://www.makerbot.com/&lt;/a&gt;
&lt;a href=&quot;http://www.sketchup.com/&quot;&gt;http://www.sketchup.com/&lt;/a&gt;
&lt;a href=&quot;https://www.tinkercad.com/&quot;&gt;https://www.tinkercad.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;circuits&quot;&gt;Circuits：电路&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://snapcircuits.net.tw/&quot;&gt;http://snapcircuits.net.tw/&lt;/a&gt;
&lt;a href=&quot;http://courseweb.stthomas.edu/apthomas/SquishyCircuits/buildingCircuits.htm&quot;&gt;http://courseweb.stthomas.edu/apthomas/SquishyCircuits/buildingCircuits.htm&lt;/a&gt;
&lt;a href=&quot;http://littlebits.cc/&quot;&gt;http://littlebits.cc/&lt;/a&gt;
&lt;a href=&quot;http://wiki.funmetas.com/index.php?title=%E9%A6%96%E9%A1%B5&quot;&gt;http://wiki.funmetas.com/index.php?title=%E9%A6%96%E9%A1%B5&lt;/a&gt;
&lt;a href=&quot;http://www.makeymakey.com/&quot;&gt;http://www.makeymakey.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;programmingcoding&quot;&gt;Programming/Coding：程序设计/编程&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://blockly-games.appspot.com/&quot;&gt;https://blockly-games.appspot.com/&lt;/a&gt;
&lt;a href=&quot;https://scratch.mit.edu/&quot;&gt;https://scratch.mit.edu/&lt;/a&gt;
&lt;a href=&quot;http://www.arduino.cc/&quot;&gt;http://www.arduino.cc/&lt;/a&gt;
&lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;https://www.raspberrypi.org/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;robotics&quot;&gt;Robotics：机器人&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lego.com/zh-cn/mindstorms/?domainredir=mindstorms.lego.com&quot;&gt;http://www.lego.com/zh-cn/mindstorms/?domainredir=mindstorms.lego.com&lt;/a&gt;
&lt;a href=&quot;http://www.firstinspires.org/robotics/frc&quot;&gt;http://www.firstinspires.org/robotics/frc&lt;/a&gt;
&lt;a href=&quot;http://www.arduino.org.cn/products/kits/6-arduino-kits/arduino-starter-kit&quot;&gt;http://www.arduino.org.cn/products/kits/6-arduino-kits/arduino-starter-kit&lt;/a&gt;
&lt;a href=&quot;http://mobilerobotkit.com/robot-kits.html&quot;&gt;http://mobilerobotkit.com/robot-kits.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;tools--materials--&quot;&gt;Tools &amp;amp; Materials : 工具及耗材&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Woodworking：木工&lt;/li&gt;
  &lt;li&gt;Metalworking：金工&lt;/li&gt;
  &lt;li&gt;Laser Cutting：激光切割&lt;/li&gt;
  &lt;li&gt;CNC Cutting： 数控切割&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;makerspae&quot;&gt;MakerSpae&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.makezine.com.tw/makerspace.html&quot;&gt;http://www.makezine.com.tw/makerspace.html&lt;/a&gt;
&lt;a href=&quot;http://www.fablabtaiwan.org.tw/&quot;&gt;http://www.fablabtaiwan.org.tw/&lt;/a&gt;
&lt;a href=&quot;http://www.fablabtaipei.org/2510520497303403537320633.html&quot;&gt;http://www.fablabtaipei.org/2510520497303403537320633.html&lt;/a&gt;
&lt;a href=&quot;http://www.weschool.tw/26377217382012335373206332403720855.html&quot;&gt;http://www.weschool.tw/26377217382012335373206332403720855.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;国内创客空间&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.chaihuo.org/products/list&quot;&gt;http://www.chaihuo.org/products/list&lt;/a&gt;
&lt;a href=&quot;http://xinchejian.com/?lang=zh&quot;&gt;http://xinchejian.com/?lang=zh&lt;/a&gt;
&lt;a href=&quot;http://www.bjmakerspace.com/&quot;&gt;http://www.bjmakerspace.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;digital-sandbox&quot;&gt;Digital Sandbox&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sparkfun.com/products/12651&quot;&gt;https://www.sparkfun.com/products/12651&lt;/a&gt;
&lt;a href=&quot;http://b2b.hc360.com/supplyself/348068096.html&quot;&gt;http://b2b.hc360.com/supplyself/348068096.html&lt;/a&gt;
&lt;a href=&quot;https://learn.sparkfun.com/tutorials/digital-sandbox-experiment-guide/setting-up-arduino-and-ardublock&quot;&gt;https://learn.sparkfun.com/tutorials/digital-sandbox-experiment-guide/setting-up-arduino-and-ardublock&lt;/a&gt;
&lt;a href=&quot;http://classes.engr.oregonstate.edu/eecs/fall2015/cs160-501/labs/lab_01.pdf&quot;&gt;http://classes.engr.oregonstate.edu/eecs/fall2015/cs160-501/labs/lab_01.pdf&lt;/a&gt;
&lt;a href=&quot;https://learn.sparkfun.com/tutorials/alternative-arduino-interfaces/codebender&quot;&gt;https://learn.sparkfun.com/tutorials/alternative-arduino-interfaces/codebender&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;创客空间里面都有那些设备&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zhishihao.com/xue/show/155996&quot;&gt;http://www.zhishihao.com/xue/show/155996&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;趣味电子&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Back in Time木质时光倒流时钟&lt;/strong&gt;
&lt;a href=&quot;https://item.taobao.com/item.htm?spm=a1z10.5-c.w4002-11172345288.31.fQeFq4&amp;amp;id=45557720848&quot;&gt;https://item.taobao.com/item.htm?spm=a1z10.5-c.w4002-11172345288.31.fQeFq4&amp;amp;id=45557720848&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;基于Arduino设计的简易宠物喂食机&lt;/strong&gt;
&lt;a href=&quot;http://bbs.intorobot.com/thread-683-1-1.html&quot;&gt;http://bbs.intorobot.com/thread-683-1-1.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;3D打印全自动宠物喂食器&lt;/strong&gt;
&lt;a href=&quot;http://bbs.intorobot.com/thread-684-1-1.html&quot;&gt;http://bbs.intorobot.com/thread-684-1-1.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Plotclock小贱钟&lt;/strong&gt;
&lt;a href=&quot;http://www.arduino.cn/thread-6049-1-1.html&quot;&gt;http://www.arduino.cn/thread-6049-1-1.html&lt;/a&gt;
&lt;a href=&quot;http://jjrobots.com/projects-2/&quot;&gt;http://jjrobots.com/projects-2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-4&quot;&gt;课程&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://robert.cireddu.free.fr/&quot;&gt;http://robert.cireddu.free.fr/&lt;/a&gt;
&lt;a href=&quot;http://pedagogie.ac-toulouse.fr/lp-baylet-valence-agen/&quot;&gt;http://pedagogie.ac-toulouse.fr/lp-baylet-valence-agen/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;stem&quot;&gt;STEM&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.creativelearningsystems.com/&quot;&gt;http://www.creativelearningsystems.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;d&quot;&gt;走进3D&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://k12.leiphone.com/article/201601/Nnf0kNrFwit3zZBV.html&quot;&gt;http://k12.leiphone.com/article/201601/Nnf0kNrFwit3zZBV.html&lt;/a&gt;
&lt;a href=&quot;http://www.e-works.net.cn/report/2015stratasys3d/2015stratasys3d.html&quot;&gt;http://www.e-works.net.cn/report/2015stratasys3d/2015stratasys3d.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-5&quot;&gt;配套&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;洞洞板&lt;/strong&gt;
&lt;a href=&quot;https://item.taobao.com/item.htm?spm=2013.1.20141001.1.QOwtaJ&amp;amp;id=35618674019&amp;amp;;scm=1007.10115.22552.100200300000000&amp;amp;pvid=3a6eaed6-f152-4ad3-a716-ed9d05874607&quot;&gt;https://item.taobao.com/item.htm?spm=2013.1.20141001.1.QOwtaJ&amp;amp;id=35618674019&amp;amp;;scm=1007.10115.22552.100200300000000&amp;amp;pvid=3a6eaed6-f152-4ad3-a716-ed9d05874607&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-6&quot;&gt;想做创客？这些关于开源硬件的知识你不得不知&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.csdn.net/article/2014-06-30/2820457/2&quot;&gt;http://www.csdn.net/article/2014-06-30/2820457/2&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;diy&quot;&gt;DIY示波器&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://item.taobao.com/item.htm?spm=a230r.1.14.16.HxgqLG&amp;amp;id=43507787334&amp;amp;ns=1&amp;amp;abbucket=20#detail&quot;&gt;https://item.taobao.com/item.htm?spm=a230r.1.14.16.HxgqLG&amp;amp;id=43507787334&amp;amp;ns=1&amp;amp;abbucket=20#detail&lt;/a&gt;
&lt;a href=&quot;http://www.jyetech.com/index.php&quot;&gt;http://www.jyetech.com/index.php&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Mar 2016 05:34:00 +0800</pubDate>
        <link>http://cuiqingwei.github.com/favorites/2016/03/09/eMaker.Space.html</link>
        <guid isPermaLink="true">http://cuiqingwei.github.com/favorites/2016/03/09/eMaker.Space.html</guid>
        
        
        <category>favorites</category>
        
      </item>
    
      <item>
        <title>Linux</title>
        <description>&lt;p&gt;&lt;strong&gt;通过8个技巧让你成为一个超强的Linux终端用户&lt;/strong&gt; &lt;a href=&quot;http://www.geekfan.net/7112/&quot;&gt;http://www.geekfan.net/7112/&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Tab键自动补全
管道符命令　ls | grep really
通配符　rm really*name
输出重定向　ls &amp;gt; file1
命令行历史　hirstory
波浪符”~”代表当前用户的主目录。所以，你可以使用”cd ~”切换到你的主目录，而不用输入”cd /home/name”。
这对相对路径同样使用，比如”cd ~/Desktop”会切换到当前用户的桌面目录。 
与之类似的是，”.”代表当前目录，”..”代表父级目录。所有，”cd ..”会跳到父级目录。
后台命令　firefox &amp;amp;
条件执行　sleep 5 &amp;amp;&amp;amp; gnome-screenshot 停5秒然后运行gnome的截屏工具&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;在Linux上安装ack&lt;/strong&gt; &lt;a href=&quot;http://www.geekfan.net/6881/&quot;&gt;http://www.geekfan.net/6881/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;linux 文本查找 grep, ack&lt;/strong&gt; &lt;a href=&quot;http://ju.outofmemory.cn/entry/26149&quot;&gt;http://ju.outofmemory.cn/entry/26149&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ wget http://beyondgrep.com/ack-2.12-single-file
$ sudo mv ack-2.12-single-file /usr/local/bin/ack
$ sudo chmod 0755 /usr/local/bin/ack&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;怎样从Linux终端管理进程：10个你必须知道的命令&lt;/strong&gt; &lt;a href=&quot;http://www.geekfan.net/7112/&quot;&gt;http://www.geekfan.net/7112/&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;top、htop、ps、pstree、kill、killall、xkill、pgrep&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;如何用Linux命令行管理网络：11个你必须知道的命令&lt;/strong&gt;	&lt;a href=&quot;http://www.geekfan.net/7192/&quot;&gt;http://www.geekfan.net/7192/&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ping -c 4 baidu.com
tracepath baidu.com
tracerouter baidu.com
mtr baidu.com
whois baidu.com
ifconfig eth0
sudo ifdown eth0
sudo ifup eth0
sudo dhclient -r
netstat -s&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;使用Linux命令行测试网速&lt;/strong&gt;	&lt;a href=&quot;http://www.geekfan.net/5521/&quot;&gt;http://www.geekfan.net/5521/&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ wget https://raw.github.com/sivel/speedtest-cli/master/speedtest_cli.py
$ chmod a+rx speedtest_cli.py
$ sudo mv speedtest_cli.py /usr/local/bin/speedtest-cli
$ sudo chown root:root /usr/local/bin/speedtest-cli
$ speedtest-cli&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;三张图看遍Linux 性能监控、测试、优化工具&lt;/strong&gt; &lt;a href=&quot;http://www.geekfan.net/13481/&quot;&gt;http://www.geekfan.net/13481/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Aug 2015 22:50:00 +0800</pubDate>
        <link>http://cuiqingwei.github.com/favorites/2015/08/18/Linux.html</link>
        <guid isPermaLink="true">http://cuiqingwei.github.com/favorites/2015/08/18/Linux.html</guid>
        
        
        <category>favorites</category>
        
      </item>
    
      <item>
        <title>OpenWRT折腾日记</title>
        <description>&lt;h1 id=&quot;openwrt-yun&quot;&gt;2016-04-23 Openwrt Yun&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!/bin/bash -ex

# FEEDS
./scripts/feeds uninstall -a
rm -rf feeds
./scripts/feeds update -a
./scripts/feeds install -a
./scripts/feeds uninstall erlang freeswitch remotefs libzstream shflags opensips pulseaudio xmlrpc-c rtorrent sox umurmur-polarssl freecwmp-zstream osirisd logtrigger libplist libimobiledevice cmus mxml boost wt etherpuppet php4 aprx n2n pdnsd crtmpserver kissdx openconnect telepathy-python alljoyn

# CONFIG
rm -f .config
git checkout .config

sed &amp;#39;s/=m$/=n/&amp;#39; &amp;lt; .config &amp;gt; .baseonlyconfig
mv .config .origconfig
mv .baseonlyconfig .config

make oldconfig

# BUILDING
nice -n 10 make -j 2 V=s


/etc/config/wireless
config wifi-iface
	option network &amp;#39;wwan&amp;#39;
	option ssid &amp;#39;MiWiFi&amp;#39;
	option encryption &amp;#39;psk2&amp;#39;
	option device &amp;#39;radio0&amp;#39;
	option mode &amp;#39;sta&amp;#39;
	option bssid &amp;#39;8C:BE:BE:29:FE:56&amp;#39;
	option key &amp;#39;1981021400&amp;#39;

wireless.@wifi-iface[0]=wifi-iface                                              
wireless.@wifi-iface[0].network=wwan                                            
wireless.@wifi-iface[0].ssid=MiWiFi                                             
wireless.@wifi-iface[0].encryption=psk2                                         
wireless.@wifi-iface[0].device=radio0                                           
wireless.@wifi-iface[0].mode=sta                                                
wireless.@wifi-iface[0].bssid=8C:BE:BE:29:FE:56                                 
wireless.@wifi-iface[0].key=1981021400&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;draginoyun-shield&quot;&gt;2016-04-11 DraginoYun Shield&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;echo src-svn packages https://github.com/arduino/openwrt-packages-yun/trunk &amp;gt;&amp;gt; feed.conf.default

＃更新package
./scripts/feeds update -a
＃安装package
./scripts/feeds install yun-conf
./scripts/feeds install yun-scripts
./scripts/feeds install luci-app-arduino-webpanel

＃单独编译package
make package/yun-conf/compile 
make package/yun-scripts/compile 
make package/luci-app-arduino-webpanel/compile 
make package/yun-conf/install
make package/yun-scripts/install
make package/luci-app-arduino-webpanel/install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;draginoyun-shield-1&quot;&gt;2016-04-08 DraginoYun Shield&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;svn checkout https://github.com/dragino/openwrt-yun.git dragino-yun
cd dragino-yun/trunk
./build_image.sh
cd openwrt

vi feeds.config.default
#断开packages,链接本地dragino-packages
#src-git dragino https://github.com/dragino/dragino-packages.git
src-link dragino ../../dragino-packages

＃卸载package
./scripts/feeds uninstall luci-app-iot-webpanel
./scripts/feeds uninstall luci-app-sensor
＃更新package
./scripts/feeds update luci-app-iot-webpanel
＃安装package
./scripts/feeds install luci-app-iot-webpanel
＃单独编译package
make package/luci-app-iot-webpanel/compile 
make package/luci-app-iot-webpanel/install
＃安装package
scp bin/ar71xx/packages/[packagename].ipk roo@ip:/tmp
opkg install /tmp/[packagename].ipk

http://www.doodle3d.com/help/wiki/installing-updating-packages
https://wiki.openwrt.org/doc/howto/build&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2016-04-05 ArduinoYun Shield&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;http://www.znck007.com/forum.php?mod=viewthread&amp;amp;tid=22687

# 源
https://downloads.openwrt.org/attitude_adjustment/12.09/ar71xx/generic/packages/
http://downloads.arduino.cc/openwrtyun/1/packages/

vi /etc/opkg.conf
src/gz attitude_adjustment https://downloads.openwrt.org/attitude_adjustment/12.09/ar71xx/generic/packages/

# 使用putty登陆openwrt输入
opkg update
opkg install kmod-usb-storage block-mount block-hotplug kmod-fs-ext4
mkfs.ext4 /dev/sda1# 格式化TF卡，第一次使用须格式化
mkdir -p /mnt/sda1# 新建一个TF卡目录
mount /dev/sda1 /mnt/sda1# 将TF卡挂载到/mnt/sda1目录

# 自动挂载（这样就不需要每次都执行上面的命令挂载SD卡了）
vi /etc/config/fstab
# 移到最下面，按i键（编辑模式）然后复制下面，右击到putty就自动粘贴上去了！
config &amp;#39;mount&amp;#39;
        option &amp;#39;device&amp;#39; &amp;#39;/dev/sda1&amp;#39;
        option &amp;#39;options&amp;#39; &amp;#39;rw,sync&amp;#39;
        option &amp;#39;enabled_fsck&amp;#39; &amp;#39;0&amp;#39;
        option &amp;#39;enabled&amp;#39; &amp;#39;1&amp;#39;
        option &amp;#39;target&amp;#39; &amp;#39;/mnt/sda1&amp;#39;

mkdir -p /mnt/sda1/php# 新建软件包目录
echo dest phpdisk /mnt/sda1/php/ &amp;gt;&amp;gt; /etc/opkg.conf
opkg --dest phpdisk install php5-fastcgi php5-mod-gd php5-mod-xml php5-mod-ctype php5-mod-session php5-mod-sockets php5-mod-tokenizer php5-mod-mcrypt php5-mod-mbstring php5-mod-pdo php5-mod-curl php5-mod-mysql

# 安装一个时区信息软件包，否则系统无法识别时区。
opkg install zoneinfo-asia

# 建立软连接，不然会找不到对应的库和配置文件：
ln -s /mnt/sda1/php/etc/php.ini /etc/php.ini
ln -s /mnt/sda1/php/etc/php5 /etc/php5
ln -s /mnt/sda1/php/usr/lib/libpcre.so.0.0.1 /usr/lib/libpcre.so.0
ln -s /mnt/sda1/php/usr/lib/libpcreposix.so.0.0.0 /usr/lib/libpcreposix.so.0
ln -s /mnt/sda1/php/usr/lib/libsqlite.so.0.8.6 /usr/lib/libsqlite.so.0
ln -s /mnt/sda1/php/usr/lib/libsqlite3.so.0.8.6 /usr/lib/libsqlite3.so.0
ln -s /mnt/sda1/php/usr/lib/libxml2.so.2.7.8 /usr/lib/libxml2.so.2
ln -s /mnt/sda1/php/usr/lib/libz.so.1.2.3 /usr/lib/libz.so
ln -s /mnt/sda1/php/usr/lib/libuClibc++-0.2.4.so /usr/lib/libuClibc++.so.0
ln -s /mnt/sda1/php/usr/lib/libmysqlclient.so.16 /usr/lib/libmysqlclient.so.16
ln -s /mnt/sda1/php/usr/lib/php /usr/lib/php
ln -s /mnt/sda1/php/usr/bin/php-cgi /usr/bin/php-cgi

# 安装到内存
opkg install php5-fastcgi php5-mod-gd php5-mod-xml php5-mod-ctype php5-mod-session php5-mod-sockets php5-mod-tokenizer php5-mod-mcrypt php5-mod-mbstring php5-mod-pdo php5-mod-curl php5-mod-mysql

# 编辑php.ini，方法如下。

# 找到下面的字段修改为如下，如果有用&amp;quot;;&amp;quot;注析的就删掉：
short_open_tag = On

error_log = /var/log/php_errors.log
doc_root = &amp;quot;/mnt/sda1/www&amp;quot;  修改成sd卡的路径。

extension=ctype.so
extension=curl.so
extension=dom.so
extension=exif.so
extension=ftp.so
extension=gd.so
extension=gmp.so
extension=hash.so
extension=iconv.so
extension=json.so
extension=ldap.so
extension=mbstring.so
extension=mcrypt.so
extension=mysql.so
extension=openssl.so
extension=pcre.so
extension=pdo.so
extension=pdo-mysql.so
extension=pdo-pgsql.so
extension=pdo_sqlite.so
extension=pgsql.so
extension=session.so
extension=soap.so
extension=sockets.so
extension=sqlite.so
extension=sqlite3.so
extension=tokenizer.so
extension=xml.so
extension=xmlreader.so
extension=xmlwriter.so 

date.timezone = Asia/Shanghai
mysql.default_socket = /var/run/mysqld.sock
session.auto_start = 1

# 和上面一样，打开/etc/config/uhttpd
option home &amp;#39;/mnt/sda1/www&amp;#39;                 #把/www修改成/mnt/sda1/www为放置网页的目录。
option index_page index.php               #添加到后面
list interpreter &amp;quot;.php=/usr/bin/php-cgi&amp;quot;   #添加到后面

# 然后重启uhttpd（在putty里输入命令回车）：
/etc/init.d/uhttpd restart

# 使用putty安装mysql。
opkg update
opkg install mysql-server

# 创建数据库目录
mkdir -p /mnt/sda1/mysql/data/mysql
mkdir -p /mnt/sda1/mysql/data/tmp

# 查找到以下内容并修改如下：
datadir = /mnt/sda1/mysql/data/mysql/
tmpdir  = /mnt/sda1/mysql/data/tmp/
# bind-address = 192.168.1.1

# 初始化建库
mysql_install_db --force
# 以关闭授权的方式启动mysql
mysqld --skip-grant &amp;amp;
# 进入mysql,修改账号连接权限
mysql -u root mysql
# 进入mysql以后出现mysql&amp;gt;提示符，再修改账号连接权限：
update user set host=&amp;#39;%&amp;#39; where user=&amp;#39;root&amp;#39; and host=&amp;#39;localhost&amp;#39;;
# 修改数据库密码为edutech
update user set password=PASSWORD(&amp;#39;edutech&amp;#39;) where user=&amp;#39;root&amp;#39;;
# 刷新数据库
flush privileges;
# 上面ok了以后，退出mysql
exit;

# 重启mysql，以授权验证方式启动（为了系统安全）
killall mysqld
# 设定开机运行 
/etc/init.d/mysqld enable 
# 启动MySQL服务
/etc/init.d/mysqld start 

# 用Navicat新建数据库
znckapi
# 新建查询
CREATE TABLE IF NOT EXISTS `api_worklist` (
`id` int(16) unsigned NOT NULL AUTO_INCREMENT,
`type` int(2) NOT NULL COMMENT &amp;#39;1网设2上传3定时&amp;#39;,
`uid` int(8) NOT NULL,
`sid` varchar(3) NOT NULL,
`nid` varchar(3) NOT NULL,
`data` varchar(32) NOT NULL,
`note` varchar(64) NOT NULL,
`status` int(2) NOT NULL COMMENT &amp;#39;1成功2失败3超过次数4超15分&amp;#39;,
`time` datetime NOT NULL,
`ip` varchar(16) NOT NULL,
`num` int(2) NOT NULL,
PRIMARY KEY(`id`),
KEY `uid` (`uid`),
KEY `time` (`time`)
)ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;

# 安装python
mkdir -p /mnt/sda1/python
echo dest pythondisk /mnt/sda1/python/ &amp;gt;&amp;gt; /etc/opkg.conf
opkg --dest pythondisk install python
ln -s /mnt/sda1/python/usr/bin/python /usr/bin/python
opkg --dest pythondisk install pyserial# 安装串口通讯类
opkg --dest pythondisk install python-mysql# 安装mysql操作类

# http://see.sl088.com/wiki/Opkg
cd /mnt/sda1
wget http://downloads.openwrt.org/attitude_adjustment/12.09/ar71xx/generic/packages/pyserial_2.4-1_ar71xx.ipk
wget http://downloads.openwrt.org/attitude_adjustment/12.09/ar71xx/generic/packages/python-mysql_1.2.2-1_ar71xx.ipk

2016-03-03 DRAGINO Yun Shield
ssh root@192.168.199.159
dragino

root@dragino-7676e6:~# cd /tmp/
root@dragino-7676e6:/tmp# 
root@dragino-7676e6:/tmp# wget http://downloads.openwrt.org/attitude_adjustment/12.09/ar71xx/generic/packages/luci-i18n-chine
se_0.11.1-1_ar71xx.ipk
root@dragino-7676e6:/tmp# opkg install luci-i18n-chinese_0.11.1-1_ar71xx.ipk&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;luci&quot;&gt;2016-03-03 luci&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/luopeng/p/4678704.html&quot;&gt;http://www.cnblogs.com/luopeng/p/4678704.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;webmjpg-streamer&quot;&gt;2016-01-22 web摄像头、mjpg-streamer&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget https://downloads.openwrt.org/attitude_adjustment/12.09/ar71xx/generic/openwrt-ar71xx-generic-tl-wr2543-v1-squashfs-factory.bin
scp bin/ar71xx/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin root@192.168.199.193:/tmp/
mtd -r write openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin firmware

uci show network.lan
uci set network.lan.proto=dhcp
uci commit
/etc/init.d/networtk restart

&amp;gt;&amp;gt; opkg install kmod-video-uvc。
&amp;gt;&amp;gt; ls /dev，如果有vedio的话，说明驱动安装成功（前提是要把摄像头插上）
&amp;gt;&amp;gt; opkg install mjpg-streamer
&amp;gt;&amp;gt; mjpg_streamer -b -i &amp;quot;input_uvc.so /dev/video0 -r 640x480 -yuv&amp;quot; -o &amp;quot;output_http.so -p 8080 -w /web&amp;quot;

http://192.168.199.193:8080/?action=stream（动态视频）
http://192.168.199.193:8080/?action=snapshot（静态图像）&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;mtk-openwrt-sdk&quot;&gt;2015-08-25 mtk openwrt-sdk&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#　for mtksdk-openwrt-3.10.14-20141127-30965ec3.tar.bz2

ack -w MediaTek --html

openwrt-3.10.14_2014/package/ralink/ui/luci-mtk/patches/001-logo.patch
改logo MediaTek-&amp;gt;Edutech

openwrt-3.10.14_2014/package/ralink/ui/luci-mtk/src/modules/base/root/etc/config
luci 改language

openwrt-3.10.14_2014/package/ralink/drivers/mt76x2e/files
mt7612e.sh 改SSID

# for mtksdk-openwrt-3.10.14-20150311-d021c937.tar.bz2

openwrt-3.10.14_2014/package/ramips/ui/luci-mtk/patches/001-logo.patch
改logo MediaTek-&amp;gt;Edutech

openwrt-3.10.14_2014/package/ramips/ui/luci-mtk/src/modules/base/root/etc/config
luci 改language

openwrt-3.10.14_2014/package/ramips/drivers/mt7620/files
mt7620.sh 改SSID
openwrt-3.10.14_2014/package/ramips/drivers/mt76x2e/files
mt7612e.sh 改SSID

# 更新opkg.config源
/openwrt-3.10.14/package/base-files/image-config.in　文件中 173　行
http://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/packages

# 版本号
/openwrt-3.10.14/package/ramips/ui/luci-mtk/src/build/mkversion.sh
更改　luciname 和 luciversion为
luciname    = &amp;quot;Edutech LuCI &amp;quot;
luciversion = &amp;quot;0.12&amp;quot;

# banner
figlet edutech -f speed.flf -c -w 52
         _________      _____           ______  
    ___________  /___  ___  /______________  /_ 
    _  _ \  __  /_  / / /  __/  _ \  ___/_  __ \
    /  __/ /_/ / / /_/ // /_ /  __/ /__ _  / / /
    \___/\__,_/  \__,_/ \__/ \___/\___/ /_/ /_/ 
                                               
 -----------------------------------------------------
             Shanghai Edutech Co.,Ltd
 -----------------------------------------------------
 
# profiles 和　固件名
openwrt-3.10.14/target/linux/ramips/mt7620/profiles
MT7620a_MT7612e.mk

openwrt-3.10.14/target/linux/ramips/image/Makefile
# add by cuiqingwei at 20150828
Image/Build/Profile/MT7620a_MT7612e=$(call BuildFirmware/Default8M/$(1),$(1),mt7612e,MT7620a_MT7612e)
                                                
# 去除有问题的iw
./scripts/feeds uninstall iw
删除openwrt-3.10.14/package/network/utils目录下的iw目录&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;openwrt-yun-1&quot;&gt;2015-08-13 openwrt-yun&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;目录openwrt-yun/feeds/packages下arduino文件夹复制
到/openwrt/branches/barrier_breaker/package目录下
对应源码在openwrt/branches/barrier_breaker/build_dir/target-mips_34kc_uClibc-0.9.33.2/目录下

make menuconfig

Base System ---&amp;gt; 
&amp;lt;*&amp;gt; yun-conf...................................... Custom Yún configurations            
 &amp;lt;*&amp;gt; yun-scripts.......................................... Custom Yún scripts

LuCI ---&amp;gt;
3. Applications ---&amp;gt; 
&amp;lt;*&amp;gt; luci-app-arduino-webpanel............ simplified wifi configuration panel  

echo &amp;quot;src/gz barrier_breaker http://download.linino.org/dogstick/all-in-one/latest/packages/&amp;quot; &amp;gt;&amp;gt; /etc/opkg.conf

opkg install rng-tools --force-depends
opkg install gnupg

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
“Not enough random bytes available. Please do some other work to give
　the OS a chance to collect more entropy! (Need 284 more bytes)”

First make sure you have the following available and have the rights to it:

ls -l /dev/urandom 

then execute rngd against it:

rngd -r /dev/urandom
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

/etc/init.d/generate_new_gpg_key start

http://192.168.199.192/cgi-bin/luci/webpanel/homepage

成功！&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;arduino-yun&quot;&gt;2015-08-12 arduino-yun&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;https://www.snip2code.com/Snippet/38230/Install-Arduino-Yun-%28Linino%29-software-on

opkg install luci-lib-json luci rng-tools

# If rng-tools is not installable, then install it by hand from e.g., http://download.linino.org/linino_distro/linino_dev/latest/packages/rng-tools_3-2_ar71xx.ipk

# Edit your /etc/opkg.conf, add
src/gz barrier_breaker http://download.linino.org/dogstick/all-in-one/latest/packages/
# Comment out your earlier src/gz

opkg update
opkg list|grep bridge
opkg list|grep yun

opkg install -force-overwrite cpu-mcu-bridge yun-conf yun-scripts luci-app-arduino-webpanel avrdude gnupg temboo spacebrew uSDaemon 

/etc/init.d/avahi-daemon start

# Need to edit in order to change to correct LED
/usr/bin/blink-start
/usr/bin/blink-stop

rm /tmp/luci-indexcache

# In /etc/avahi/avahi-daemon.conf edit
[server]
enable-dbus=no

/etc/init.d/avahi-daemon enable
/etc/init.d/avahi-daemon start

SHOULD SHOW 
http://192.168.199.192/cgi-bin/luci/webpanel/homepage

# NEED TO GENERATE A GPG KEY -- WHY??? 

/etc/init.d/generate_new_gpg_key start

# Works only if rngd is there, generates

/etc/arduino/arduino_gpg.asc
/etc/arduino/arduino_gpg.pub
/etc/arduino/arduino_gpg.sec

# Apparently Yun uses avrdude linuxgpio, this is suggested by /etc/linino/test_avrdude.sh

# run-avrdude wants to edit sys/class/gpio/gpio21/value which does not exist here

# Also see http://www.tonylianlong.com/?p=135
# It has modified files for the Arduino IDE and it has the GPG key and gpg binary

# They have also a modified /usr/bin/run-avrdude script which is pure genius, it changes linuxgpio to serial programming and if that is all that is required to change makes it trivial to hook up different boards via USB as well:

#!/bin/sh

#echo 1 &amp;gt; /sys/class/gpio/gpio21/value
#avrdude -c linuxgpio -C /etc/avrdude.conf -p m32u4 -U lfuse:w:0xFF:m -U hfuse:w:0xD8:m -U efuse:w:0xFB:m -Uflash:w:$1:i $2
#echo 0 &amp;gt; /sys/class/gpio/gpio21/value
#echo &amp;quot;$2&amp;quot; &amp;gt; /s2
echo &amp;quot;&amp;quot; &amp;gt; /dev/ttyACM0
lsusb|grep 0043
if [ &amp;quot;$?&amp;quot;x == &amp;quot;0&amp;quot;x ];then
echo UNO
avrdude -V -p m328p -c arduino -b 115200 -P /dev/ttyACM0 -C /etc/avrdude.conf -U flash:w:$1 $2
fi
lsusb|grep 0042
if [ &amp;quot;$?&amp;quot;x == &amp;quot;0&amp;quot;x ];then
echo MEGA
avrdude -V -C/etc/avrdude.conf -patmega2560 -cstk500v2 -P/dev/ttyACM0 -b115200 -D -Uflash:w:$1 $2      
fi

echo &amp;quot;&amp;quot; &amp;gt; /dev/ttyACM0

====

# kmod-fs-hfsplus and kmod-nls-utf8 sufficient to mount Mac devices?

====

For my own reference, these are the packages that come with the YUN according to http://download.linino.org/linino_distro/linino_dev/latest/openwrt-ar71xx-generic-rootfs.tar.gz:
luci-lib-sys kmod-usb-storage terminfo libuci-lua libc opkg triggerhappy kmod-usb-core libpthread ubus iw kmod-crypto-manager luci-mod-admin-core busybox libubus-lua python-json kmod-crypto-hash libiwinfo-lua swconfig kmod-fs-reiserfs libiwinfo libdbus libcurl libdw kmod-lib-crc-ccitt libgpgme luci-theme-openwrt luci-theme-bootstrap kmod-pppoe kmod-video-core libavahi-client kmod-pppox kmod-ipt-conntrack kmod-lib-crc16 base-files kmod-fs-hfsplus netifd uboot-envtools kmod-usb-ohci dnsmasq usbutils luci-sgi-cgi libblkid ubusd libelf1 kmod-spi-gpio python kmod-i2c-core libgpg-error block-mount kmod-fs-vfat kmod-usb2 firewall luci-app-firewall kmod-fs-hfs temboo luci-lib-ipkg libuci liblua libip4tc avahi-dnsconfd libcyassl libdaemon kmod-ath9k libavahi uci lua kmod-fs-ext4 wpad-mini dbus dropbear kmod-ledtrig-timer curl kmod-nls-utf8 kmod-crypto-aes mtd libstdcpp kmod-crypto-core luci-theme-base libjson-c libgcc libreadline libip6tc luci-proto-ppp libffi libuuid luci-mod-admin-full ppp libubox kmod-leds-gpio libusb-1.0 kmod-gpio-button-hotplug gnupg libjson cpu-mcu-bridge luci-lib-web spacebrew librt libassuan kmod-mac80211 libjson-script swap-utils libblobmsg-json iptables hotplug2 kmod-ipt-nathelper kmod-fs-ntfs kmod-fuse jshn libncurses kmod-ipt-core luci-webpanel-linino kmod-ledtrig-default-on rng-tools libpolarssl kmod-ppp kmod-spi-bitbang avahi-daemon uhttpd-mod-lua python-mini kmod-wdt-ath79 avahi-utils libubus uhttpd libxtables avrdude zlib luci-lib-nixio luci-lib-json luci kmod-spi-tty-ds kmod-ath libexpat kernel libnl-tiny libbz2 blkid libusb luci-proto-core px5g kmod-nls-base luci-i18n-english libgdbm yun-scripts libusb-compat uhttpd-mod-ubus uSDaemon wireless-tools kmod-ath9k-common kmod-crypto-arc4 libopenssl kmod-scsi-core kmod-cfg80211 libavahi-dbus-support luci-lib-core ppp-mod-pppoe kmod-spi-dev kmod-ipt-nat kmod-ledtrig-netdev 

====

opkg install avrdude --force-depends
opkg install rng-tools --force-depends

＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋

opkg update
opkg list|grep bridge
opkg list|grep yun

opkg install luci
opkg install -force-overwrite cpu-mcu-bridge yun-conf yun-scripts luci-app-arduino-webpanel gnupg uSDaemon 

opkg install rng-tools avrdude --force-depends

rm /tmp/luci-indexcache

/etc/init.d/generate_new_gpg_key start

http://192.168.199.192/cgi-bin/luci/webpanel/homepage&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2015-07-24 YunWebUI&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;将feeds.conf中
src-git luci https://github.com/openwrt/luci.git
替换为
src-git luci https://github.com/openwrt/luci.git;luci-0.11


Development: the easy way

The easiest way to hack the web panel is to copy on your Yún the files you find in this repo, maintaining the folders structure.

For example, file usr/lib/lua/luci/controller/arduino/index.lua will go to /usr/lib/lua/luci/controller/arduino/index.lua on your Yún.

Then access the webpanel at http://arduino.local/ (where &amp;quot;arduino&amp;quot; is the name of your Yún), properly edit file index.lua and refresh the page to see the changes.

Once done, copy the files back to your pc and submit us a pull request, so that everyone can take advantage of the improvements you made.
Development: the fast, local but hard way

You need a GNU/Linux box and the following tools: subversion, gnupg, lua, make, gcc, wget. On Debian based distros, these are packages subversion, gnupg, lua5.1, liblua5.1-0-dev, build-essential, wget.


参考
https://github.com/arduino/YunWebUI

ubuntu系统设置
sudo mkdir /etc/arduino
cd /etc/arduino
sudo wget https://raw.githubusercontent.com/arduino/openwrt-packages-yun/master/arduino/yun-conf/files/etc/arduino/gpg_gen_key_batch
sudo gpg --batch --gen-key /etc/arduino/gpg_gen_key_batch
sudo rm -f /etc/arduino/arduino_gpg.asc
sudo gpg --no-default-keyring --secret-keyring /etc/arduino/arduino_gpg.sec --keyring /etc/arduino/arduino_gpg.pub --export --armor --output /etc/arduino/arduino_gpg.asc
sudo chmod 644 /etc/arduino/arduino_gpg.*

svn co http://svn.luci.subsignal.org/luci/branches/luci-0.11 luci

cd /home/router-dev/iot-gateway
svn co https://github.com/arduino/YunWebUI/trunk yunWebUI

进入openwrt目录
cd /home/router-dev/openwrt/branches/attitude_adjustment/feeds

cd luci
mkdir applications/arduino
cp applications/myapplication/Makefile applications/arduino
ln -s /home/router-dev/iot-gateway/yunWebUI/usr/lib/lua/luci applications/arduino/luasrc
ln -s /home/router-dev/iot-gateway/yunWebUI/www applications/arduino/htdocs

回到openwrt目录/home/router-dev/openwrt/branches/attitude_adjustment/feeds/luci
make runuhttpd

http://localhost:8080/cgi-bin/luci/webpanel/
passwd：admin

## luci-app-arduino-webpanel-1.5.6
#  http://arduino.cc/download.php?f=/luci-app-arduino-webpanel-1.5.6.tar.bz2

cd /home/router-dev/openwrt/branches/attitude_adjustment/package
mkdir arduino
touch Makefile

复制以下内容

#
# Copyright (c) 2014 Arduino LLC. All right reserved.
#
# This is free software, licensed under the GNU General Public License v2.
# See /LICENSE for more information.
#

include $(TOPDIR)/rules.mk

PKG_NAME:=luci-app-arduino-webpanel
PKG_VERSION:=1.5.6
PKG_RELEASE:=1

PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.bz2
PKG_SOURCE_URL:=http://arduino.cc/download.php?f=/
PKG_MD5SUM:=fbcadb0b846db24302cd4e027bf3927e

include $(INCLUDE_DIR)/package.mk

define Package/luci-app-arduino-webpanel
  SECTION:=luci
  CATEGORY:=LuCI
  SUBMENU:=3. Applications
  TITLE:= simplified wifi configuration panel
  DEPENDS:=+luci +luci-lib-json +uhttpd-mod-lua +yun-scripts
endef

define Package/luci-app-arduino-webpanel/description
simplified wifi configuration panel
endef

define Build/Compile
# NOOP
endef

define Package/luci-app-arduino-webpanel/install
$(INSTALL_DIR) $(1)/usr/lib/lua/luci/controller/arduino
$(INSTALL_DIR) $(1)/usr/lib/lua/luci/view/arduino
$(INSTALL_DIR) $(1)/www/luci-static/resources/arduino

find $(PKG_BUILD_DIR)/usr/ -name &amp;#39;*.lua&amp;#39; -exec luac -s -o {} {} \;
$(CP) $(PKG_BUILD_DIR)/usr/* $(1)/usr/
$(CP) $(PKG_BUILD_DIR)/www/* $(1)/www/
endef

$(eval $(call BuildPackage,luci-app-arduino-webpanel))

make menuconfig

git clone https://github.com/arduino/openwrt-yun.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;zigbeegw-luci&quot;&gt;2015-07-22 zigbeegw-luci&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# zigbeegw-luci 

cd /home/router-dev/openwrt/branches/attitude_adjustment/package
svn co https://github.com/paradislover/zigbeegw-luci/trunk zigbeegw

make menuconfig
LuCI ---&amp;gt; 
    3.Applications ---&amp;gt;
&amp;lt;*&amp;gt; luci-app-zigbeegw ................ LuCI Support for zigbeegw
Kernel modules ---&amp;gt; 
    USB Support ---&amp;gt;
&amp;lt;*&amp;gt; kmod-usb-acm
&amp;lt;*&amp;gt; kmod-usb-serial
&amp;lt;*&amp;gt;   kmod-usb-cp210x
&amp;lt;*&amp;gt;   kmod-usb-pl2303

make package/zigbee/clean
make package/zigbee/compile
make package/zibgee/install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;openwrt&quot;&gt;2015-07-10,13,16,21 OpenWRT下远程调试&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# OpenWRT下远程调试 attitude_adjustment WR703N

svn co svn://svn.openwrt.org/openwrt/branches/attitude_adjustment

# http://blog.csdn.net/piggy1924/article/details/8557350
# http://wenku.baidu.com/link?url=evvS3AjpZeFeKQYHPw7_80UctmoG0uVmNqKpZO-PDRwRw8jOydDBVkFeOpCpukEhyKwcVPpoVFR-byD1VeNfzpSYpIsn_thKC_mudbA5xzO

配置编译OpenWRT

复制 feeds.conf.default 为 feeds.conf
~$ cp feeds.conf.default feeds.conf
将feeds.conf中
src-svn xwrt http://x-wrt.googlecode.com/svn/trunk/package
src-svn luci http://svn.luci.subsignal.org/luci/branches/luci-0.11/contrib/package
注释为
#src-svn xwrt http://x-wrt.googlecode.com/svn/trunk/package
#src-svn luci http://svn.luci.subsignal.org/luci/branches/luci-0.11/contrib/package
并增加
src-git luci https://github.com/openwrt/luci.git;luci-0.11
诸如此类源码,你得定期更新Feeds。 通过如上相同的命令:
~$ ./scripts/feeds update -a
~$ ./scripts/feeds install -a
~$ make menuconfig

选择
?6?1 [*] Build the OpenWrt SDK
?6?1 [*] Build the OpenWrt based Toolchain
?6?1 [*] Advanced configuration options (fordevelopers)
      -&amp;gt; [*] Toolchain Options
   -&amp;gt; [*]Build/install c++ compiler and libstdc++” (if C++ is required)
-&amp;gt; [*]Build gdb


Base System –&amp;gt; &amp;lt;*&amp;gt; dropbear        
           　–&amp;gt; &amp;lt;*&amp;gt; libstdcpp

Network –&amp;gt; file trasfer
        &amp;lt;*&amp;gt; vsftpd
–&amp;gt; SSH
        &amp;lt;*&amp;gt; openssh-sftp-server

Utilities –&amp;gt; // 这两个选项会导致wr703n固件编译不出
&amp;lt;*&amp;gt; gdb
&amp;lt;*&amp;gt; gdbserver

# https://dev.openwrt.org/ticket/18331

$ tar -xjf OpenWrt-ImageBuilder-ar71xx_generic-for-linux-i686.tar.bz2
$ cd OpenWrt-ImageBuilder-ar71xx_generic-for-linux-i686/
$ make info | grep 703
TLWR703:
TP-LINK TL-WR703N
$ make image PROFILE=TLWR703
[...]
$ ls -l bin/ar71xx/

make image PROFILE=TLWR703 PACKAGES=&amp;quot;luci luci-i18n-chinese libstdcpp vsftpd openssh-sftp-server gdb gdbserver&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;openwrt-1&quot;&gt;2015-07-09 OpenWRT下远程调试&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# OpenWRT下远程调试 attitude_adjustment WR703N

svn co svn://svn.openwrt.org/openwrt/branches/attitude_adjustment

# http://blog.csdn.net/piggy1924/article/details/8557350
# http://wenku.baidu.com/link?url=evvS3AjpZeFeKQYHPw7_80UctmoG0uVmNqKpZO-PDRwRw8jOydDBVkFeOpCpukEhyKwcVPpoVFR-byD1VeNfzpSYpIsn_thKC_mudbA5xzO

配置编译OpenWRT

复制 feeds.conf.default 为 feeds.conf
~$ cp feeds.conf.default feeds.conf
将feeds.conf中
src-svn xwrt http://x-wrt.googlecode.com/svn/trunk/package
注释为
#src-svn xwrt http://x-wrt.googlecode.com/svn/trunk/package
并增加
src-git luci https://github.com/openwrt/luci.git;luci-0.11
诸如此类源码,你得定期更新Feeds。 通过如上相同的命令:
~$ ./scripts/feeds update -a
~$ ./scripts/feeds install -a
~$ make defconfig
~$ make menuconfig

选择
?6?1 [*] Build the OpenWrt SDK
?6?1 [*] Build the OpenWrt based Toolchain
?6?1 [*] Advanced configuration options (fordevelopers)
      -&amp;gt; [*] Toolchain Options
   -&amp;gt; [*]Build/install c++ compiler and libstdc++” (if C++ is required)
-&amp;gt; [*]Build with debug information
-&amp;gt; [*]Build gdb

Base System –&amp;gt; &amp;lt;*&amp;gt; dropbear        
           　–&amp;gt; &amp;lt;*&amp;gt; libstdcpp

Network –&amp;gt; file trasfer
        &amp;lt;*&amp;gt; vsftpd
–&amp;gt; SSH
        &amp;lt;*&amp;gt; openssh-sftp-server

Utilities –&amp;gt; &amp;lt;*&amp;gt; gdbserver
 
结论：　未完全成功！！！&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;openwrt-7620n&quot;&gt;2015-07-08 OpenWRT下远程调试 7620n&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# OpenWRT下远程调试 barrier_breaker 7620n
svn co svn://svn.openwrt.org/openwrt/branches/barrier_breaker

# http://blog.csdn.net/piggy1924/article/details/8557350
# http://wenku.baidu.com/link?url=evvS3AjpZeFeKQYHPw7_80UctmoG0uVmNqKpZO-PDRwRw8jOydDBVkFeOpCpukEhyKwcVPpoVFR-byD1VeNfzpSYpIsn_thKC_mudbA5xzO

配置编译OpenWRT

复制 feeds.conf.default 为 feeds.conf
~$ cp feeds.conf.default feeds.conf
将feeds.conf中
src-svn xwrt http://x-wrt.googlecode.com/svn/trunk/package
注释为
#src-svn xwrt http://x-wrt.googlecode.com/svn/trunk/package
诸如此类源码,你得定期更新Feeds。 通过如上相同的命令:
~$ ./scripts/feeds update -a
~$ ./scripts/feeds install -a
~$ make defconfig
~$ make menuconfig

选择
?6?1 [*] Build the OpenWrt SDK
?6?1 [*] Build the OpenWrt based Toolchain
?6?1 [*] Advanced configuration options (fordevelopers)
   -&amp;gt; [*] Toolchain Options
       -&amp;gt; [*]Build/install fortran compiler
   //  -&amp;gt; [*]Build with debug information
       -&amp;gt; [*]Build gdb

   //→ “gdb”
   //→ “Build/install c++ compiler and libstdc++” (if C++ is required)

启动以下五项

// Global build setting –&amp;gt; Preferred standard C++ library -&amp;gt; libstdc++

Base System –&amp;gt; &amp;lt;*&amp;gt; dropbear
            –&amp;gt; &amp;lt;*&amp;gt; libstdcpp

Development –&amp;gt; &amp;lt;*&amp;gt; gdb
               &amp;lt;*&amp;gt; gdbserver

network –&amp;gt; file trasfer
        &amp;lt;*&amp;gt; vsftpd
–&amp;gt; SSH
        &amp;lt;*&amp;gt; openssh-sftp-server

~$ make V=s

结论：　未完全成功！！！&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;helloworld&quot;&gt;2015-07-07 helloworld&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#　内置　helloworld

a).在package目录下创建helloworld目录
~$ cd package
~$ mkdir helloworld
~$ cd helloworld

b).建立Makefile
~$ touch Makefile
~$ vim Makefile

Makefile文件模板内容如下：
##############################################
# OpenWrt Makefile for helloworld program
#
#
# Most of the variables used here are defined in
# the include directives below. We just need to
# specify a basic description of the package,
# where to build our program, where to find
# the source files, and where to install the
# compiled program on the router.
#
# Be very careful of spacing in this file.
# Indents should be tabs, not spaces, and
# there should be no trailing whitespace in
# lines that are not commented.
#
##############################################

include $(TOPDIR)/rules.mk

# Name and release number of this package
PKG_NAME:=helloworld.qq.com/
PKG_RELEASE:=1


# This specifies the directory where we&amp;#39;re going to build the program. 
# The root build directory, $(BUILD_DIR), is by default the build_mipsel
# directory in your OpenWrt SDK directory
PKG_BUILD_DIR := $(BUILD_DIR)/$(PKG_NAME)


include $(INCLUDE_DIR)/package.mk

 

# Specify package information for this program.
# The variables defined here should be self explanatory.
# If you are running Kamikaze, delete the DESCRIPTION
# variable below and uncomment the Kamikaze define
# directive for the description below
define Package/helloworld
SECTION:=utils
CATEGORY:=Utilities
TITLE:=Helloworld -- prints a test message
endef


# Uncomment portion below for Kamikaze and delete DESCRIPTION variable above
define Package/helloworld/description
        If you can&amp;#39;t figure out what this program does, you&amp;#39;re probably
        brain-dead and need immediate medical attention.
endef

 

# Specify what needs to be done to prepare for building the package.
# In our case, we need to copy the source files to the build directory.
# This is NOT the default.  The default uses the PKG_SOURCE_URL and the
# PKG_SOURCE which is not defined here to download the source from the web.
# In order to just build a simple program that we have just written, it is
# much easier to do it this way.
define Build/Prepare
mkdir -p $(PKG_BUILD_DIR)
$(CP) ./src/* $(PKG_BUILD_DIR)/
endef


# We do not need to define Build/Configure or Build/Compile directives
# The defaults are appropriate for compiling a simple program such as this one


# Specify where and how to install the program. Since we only have one file,
# the helloworld executable, install it by copying it to the /bin directory on
# the router. The $(1) variable represents the root directory on the router running
# OpenWrt. The $(INSTALL_DIR) variable contains a command to prepare the install
# directory if it does not already exist.  Likewise $(INSTALL_BIN) contains the
# command to copy the binary file from its current location (in our case the build
# directory) to the install directory.
define Package/helloworld/install
$(INSTALL_DIR) $(1)/bin
$(INSTALL_BIN) $(PKG_BUILD_DIR)/helloworld $(1)/bin/
endef


# This line executes the necessary commands to compile our program.
# The above define directives specify all the information needed, but this
# line calls BuildPackage which in turn actually uses this information to
# build a package.
$(eval $(call BuildPackage,helloworld))

c).创建src目录，并编写helloworld程序
~$ mkdir src
~$ cd src

/**************** 
* Helloworld.c 
*****************/

#include &amp;lt;stdio.h&amp;gt; 
#include &amp;lt;unistd.h&amp;gt; 

int main(void) 
{ 
printf(&amp;quot;hello world! \n\n&amp;quot;); 
return 0; 
}


编写Makefile文件

# build helloworld executable when user executes &amp;quot;make&amp;quot;

helloworld: helloworld.o
$(CC) $(LDFLAGS) helloworld.o -o helloworld

helloworld.o: helloworld.c
$(CC) $(CFLAGS) -c helloworld.c

# remove object files and executable when user executes &amp;quot;make clean&amp;quot;
clean:
rm *.o helloworld

在这两个文件的目录下，执行make 应该可以生成helloworld的可执行文件。执行helloworld后，能够打印出“hello world!”。 这一步，主要保证我们的源程序是可以正常编译的。

d).编译
~$ make menuconfig 

?6?1 Utilities -&amp;gt; Toolchain Options
→ (*) helloworld

~$ make V=s&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;openwrt-build&quot;&gt;2015-07-06 OpenWRT Build&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#　1.下载OpenWRT源码包：
  
~$ svn checkout svn://svn.openwrt.org/openwrt/trunk 
进入源码文件夹：  
~$ cd trunk 

复制 feeds.conf.default 为 feeds.conf
~$ cp feeds.conf.default feeds.conf

将feeds.conf中
src-git luci https://github.com/openwrt/luci.git
替换为
src-git luci https://github.com/openwrt/luci.git;luci-0.12

诸如此类源码,你得定期更新Feeds。 通过如上相同的命令:
~$ ./scripts/feeds update -a
~$ ./scripts/feeds install -a

下一步是检查编译环境，若可进行编译则生成默认配置：
~$ make defconfig

menuconfig是一个基于文本的工具，它处理选择的目标（需要还是不需要）、编译生成软件包（openwrt下是IPKG格式）以及内核选项（编译成模块还是内核）等等 
~$ make menuconfig


# 2. 增加profile

$ 在../target/linux/ramips/mt7620/profiles 目录增加 wrtnode.mk

#
# Copyright (C) 2015 OpenWrt.org
#
# This is free software, licensed under the GNU General Public License v2.
# See /LICENSE for more information.
# add by : cuiqingwei
#

define Profile/WRTNODE
 NAME:=Wrtnode
 PACKAGES:=\
kmod-usb-core kmod-usb-dwc2 kmod-usb2 kmod-usb-ohci \
kmod-mt76
endef

define Profile/WRTNODE/Description
 Support for WRTnode Board
endef
$(eval $(call Profile,WRTNODE))

特别提醒：
a).profile文件的格式一定要书写正确。特别是 “\”反斜杠后面，千万不能有空格，否则会导致mt7620a整个subtarget都消失不见。
b).注意package之间的依赖关系，如kmod-ac97 kmod-sound-soc-core kmod-sound-mt7620都依赖于kmod-sound-core，那么就应该按照先后顺序依次写出，同样的道理：kmod-ac97 kmod-sound-soc-core应该出现在kmod-sound-mt7620前面。
c).必须删除tmp目录，才能让添加的profile生效。
最后，就可以在make menuconfig中看到你想要的东西啦。

# 3.更改kernel console打印波特率
在..target/linux/ramips/dts/WRTNODE.dts中添加

chosen {
bootargs = &amp;quot;console=ttyS0,115200&amp;quot;;
};&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;
&lt;p&gt;# 常用命令&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;### 常用命令
make clean[清楚bin 目录]
make dirclean[make clean]+[清除交叉编译工具及工具链目录]
make distclean[清除所有相关的东西，包括下载的软件包，配置文件，feed内容等]

### 装 Luci web UI :
./scripts/feeds update packages luci
./scripts/feeds install -a -p luci

### tftp更新固件
tftp 0x80000000 wr703n-f.bin
tftp 0x80000000 openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin
erase 0x9f020000 +0x3c0000
cp.b 0x80000000 0x9f020000 0x3c0000
bootm 0x9f020000

### scp至路由器更新固件
scp bin/ar71xx/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin root@192.168.199.175:/tmp/
mtd -r write openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin firmware

scp zbGateway.bin root@192.168.199.175:/tmp/

### Network-testing with iperf

ping -c 5 192.168.199.175

netcat -u -l -p 2000 &amp;gt; /dev/null
nc -u -l -p 2000 &amp;gt; /dev/null
dd if=/dev/zero bs=1M count=100 | pv -brt | netcat -u 192.168.199.175 2000

# TCP
iperf -s
iperf -c 192.168.199.175
# UDP
iperf -s -u
iperf -c 192.168.199.175 -u

scp root@192.168.199.175:/etc/opkg.conf /home/router-dev/
scp /home/router-dev/opkg.conf root@192.168.199.175:/etc/
scp openwrt-helloworld root@192.168.199.175:/usr/
root@OpenWrt:/# gdbserver 192.168.199.175:10000 /usr/openwrt-helloworld

### eclipse调试[没有成功]
/home/router-dev/openwrt/branches/attitude_adjustment/staging_dir
mips-openwrt-linux-
/home/router-dev/openwrt/branches/attitude_adjustment/staging_dir/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/bin
/home/router-dev/openwrt/branches/attitude_adjustment/build_dir/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/gdb-linaro-7.2-2011.03-0/gdb/gdb

/home/router-dev/openwrt/branches/barrier_breaker/staging_dir
mipsel-openwrt-linux-
/home/router-dev/openwrt/branches/barrier_breaker/staging_dir/toolchain-mipsel_24kec+dsp_gcc-4.8-linaro_uClibc-0.9.33.2/bin
/home/router-dev/openwrt/branches/barrier_breaker/build_dir/toolchain-mipsel_24kec+dsp_gcc-4.8-linaro_uClibc-0.9.33.2/gdb-linaro-7.6-2013.05/gdb/gdb

############################################################
??? 问题
mipsel-openwrt-linux-g++: warning: environment variable &amp;#39;STAGING_DIR&amp;#39; not defined
!!! 解决
eclipse菜单Window-&amp;gt;Preferences-&amp;gt;C/C++-&amp;gt;Environmentz增加
STAGING_DIR　
/home/router-dev/openwrt/trunk-dev/staging_dir

http://downloads.openwrt.org/attitude_adjustment/12.09/ar71xx/generic/packages/


//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////

将vsftpd编译进openwrt的固件中去
# http://chaochaoblog.com/archives/1007
首先进去我们已经下载好了源码的目录，如backfire或者其它分支的。然后利用feeds来下载安装vsftpd
~$ ./scripts/feeds update
~$ ./scripts/feeds install -d m vsftpd
之后你可以到目录/feeds/package/net/下看了，就会发现我们的vsftpd这个源码包都下载下来了。
之后回根目录，输入
~$ make menuconfig
在network –&amp;gt; file trasfer下就可以找到vsftpd了，果断按下y选择编译进固件，当然你也可以选择m那么就只会编译出ipk文件来了。
~$ make V=s 编译出bin的固件镜像文件来，刷入flash，然后ssh之后ps查看进程
OpenWrt开启sftp，方便传输文件。修改opkg.conf文件
# http://see.sl088.com/wiki/Openwrt_opkg%E6%BA%90%E8%AE%BE%E7%BD%AE
root@OpenWrt:~# vi /etc/opkg.conf
为
option overlay_root /overlay
# src/gz chaos_calmer_base http://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/packages/base
# src/gz chaos_calmer_luci http://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/packages/luci
src/gz chaos_calmer_packages http://downloads.openwrt.org/chaos_calmer/15.05-rc2/ramips/mt7620/packages/packages
# option check_signature 1
主要去掉签名check,增加
src/gz chaos_calmer_packages http://downloads.openwrt.org/chaos_calmer/15.05-rc2/ramips/mt7620/packages/packages
root@OpenWrt:~# opkg update
root@OpenWrt:~# opkg install vsftpd openssh-sftp-server
root@OpenWrt:~# /etc/init.d/vsftpd enable
root@OpenWrt:~# /etc/init.d/vsftpd start

.....................

# http://www.cnblogs.com/peteryj/archive/2011/08/23/2151216.html
a).建立调试环境
配置编译OpenWRT
make menuconfig
启动以下两项
Advanced configuration options (for developers) –&amp;gt; Toolchain options –&amp;gt; Build gdb
Development –&amp;gt; gdbserver
b).编译
make V=99，如果已经编译过，则make toolchain/install 编译下gdb即可
c).编译待调试程序
make menuconfig
启动Advanced configuration options (for developers) –&amp;gt; Build options –&amp;gt; Enable debugging
编译程序
以snmpd为例 ，使用make package/net-snmp/compile去编译程序，生成带调试信息的snmpd，作为宿主机调试使用。
以上就是准备工作。下面简单介绍一下调试过程。
d).调试程序
启动目标机上的待调试程序
首先加载并启动编译好的OpenWRT系统，然后
gdbserver &amp;lt;local_IP&amp;gt;:&amp;lt;port&amp;gt; &amp;lt;program&amp;gt; &amp;lt;args&amp;gt;
启动宿主机gdb
(这里要修复一个bug，方法是：cd &amp;lt;openwrtdir&amp;gt;/staging_dir/&amp;lt;targetarch&amp;gt;; rmdir lib; ln -s ../toolchain-&amp;lt;targetarch&amp;gt;_&amp;lt;gccver&amp;gt;/lib lib)。
cd &amp;lt;openwrtdir&amp;gt;/build_dir/toolchain-&amp;lt;targetarch&amp;gt;_&amp;lt;gccver&amp;gt;/gdb-6.3/gdb
./gdb-- 启动
设置gdb，并启动调试程序
set solib-absolute-prefix &amp;lt;openwrtdir&amp;gt;/staging_dir/&amp;lt;targetarch&amp;gt;
file &amp;lt;openwrtdir&amp;gt;/build_dir/&amp;lt;targetarch&amp;gt;/&amp;lt;path&amp;gt;/&amp;lt;executable&amp;gt;
连接目标机：target remote &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;
连接成功之后，就可以按正常的gdb调试流程进行调试了。&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Thu, 09 Jul 2015 02:00:00 +0800</pubDate>
        <link>http://cuiqingwei.github.com/projects/2015/07/09/OpenWRT%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://cuiqingwei.github.com/projects/2015/07/09/OpenWRT%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0.html</guid>
        
        
        <category>projects</category>
        
      </item>
    
      <item>
        <title>Ubuntu</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;1.常用指令&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt; 版本查看：
       cat /etc/issue
       sudo lsb_release -a
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2.环境设置&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;zsh
     sudo apt-get install zsh
     https://github.com/robbyrussell/oh-my-zsh
fortune
      sudo apt-get install fortune
      https://github.com/ruanyf/fortunes
 
 右键添加终端打开
      sudo apt-get install nautilus-open-terminal
      sudo reboot

chrome
      apt-get install chromium chromium-l10n
      cd /tmp
      wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      sudo apt-get install libxss1
      sudo dpkg -i google-chrome-stable_current_amd64.deb
  
svn&amp;amp;git
      sudo apt-get install subversion
      sudo apt-get install git

sublime text       
      wget https://download.sublimetext.com/sublime-text_build-3114_amd64.deb
      sudo dpkg -i sublime-text_build-3114_amd64.deb
      key http://www.52pojie.cn/thread-499175-1-1.html
      &quot;update_check&quot;:false
      https://packagecontrol.io/installation          
meld
     sudo apt-get install meld

eclipse
     sudo apt-get install eclipse eclipse-cdt
 
arduino
     sudo apt-get install arduino

eagle
     wget http://web.cadsoft.de/ftp/eagle/program/7.6/eagle-lin64-7.6.0.run
     sh eagle-lin64-7.6.0.run

hosts
     https://github.com/racaljk/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Cannot Set LC_ALL to default locale: No such file or directory&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;http://linoxide.com/linux-how-to/fix-error-locale-cannot-set-lc_all-to-default-locale-no-such-file-or-directory/&quot;&gt;http://linoxide.com/linux-how-to/fix-error-locale-cannot-set-lc_all-to-default-locale-no-such-file-or-directory/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;sEx只是调用相关程序，本身并无压缩、解压功能，请注意！
sEx请到： http://sourceforge.net/projects/sex下载！
解压后请将sEx拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）：
[root@www2 tmp]# cp sEx /usr/bin/&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Jan 2015 05:28:00 +0800</pubDate>
        <link>http://cuiqingwei.github.com/favorites/2015/01/14/Ubuntu.html</link>
        <guid isPermaLink="true">http://cuiqingwei.github.com/favorites/2015/01/14/Ubuntu.html</guid>
        
        
        <category>favorites</category>
        
      </item>
    
      <item>
        <title>MacOS</title>
        <description>&lt;h3 id=&quot;mac&quot;&gt;Mac入门&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/TankXiao/archive/2013/01/05/2845413.html&quot;&gt;http://www.cnblogs.com/TankXiao/archive/2013/01/05/2845413.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;appstore&quot;&gt;1. AppStore&lt;/h3&gt;

&lt;p&gt;工作：Evernote、Alfred、Go2Shell、The Unarchiver、CheatSheet、Xcode、SourceTree(Git/Hg)
系统：QQ、CleanMyDrive 3&lt;/p&gt;

&lt;h3 id=&quot;dmg&quot;&gt;2. dmg&lt;/h3&gt;

&lt;p&gt;Chrome、VMwareFusion、RDC、QQInput、RTX、cornerstone
Sublime Text&lt;/p&gt;

&lt;h3 id=&quot;brew&quot;&gt;3. brew&lt;/h3&gt;
&lt;p&gt;ruby -e “$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)”
&lt;a href=&quot;http://brew.sh/&quot;&gt;http://brew.sh/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;升级更新 brew update
cd /usr/local
git reset –hard
git checkout .
sudo chown -R cuiqingwei /usr/local
brew update
http://www.xitongzhijia.net/xtjc/20141204/31879.html&lt;/p&gt;

&lt;h3 id=&quot;macports&quot;&gt;4. MacPorts&lt;/h3&gt;
&lt;p&gt;https://www.macports.org/install.php
http://guide.macports.org/#installing.macports&lt;/p&gt;

&lt;h3 id=&quot;wget&quot;&gt;5. wget&lt;/h3&gt;
&lt;p&gt;sudo port install wget&lt;/p&gt;

&lt;h3 id=&quot;zsh&quot;&gt;6. zsh&lt;/h3&gt;
&lt;p&gt;wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh
&lt;a href=&quot;http://leeiio.me/bash-to-zsh-for-mac/&quot;&gt;http://leeiio.me/bash-to-zsh-for-mac/&lt;/a&gt;
&lt;a href=&quot;http://www.sketchup.com/download/all&quot;&gt;http://www.sketchup.com/download/all&lt;/a&gt;
打开 “终端” 输入： chflags nohidden ~/library/ 即可显示被隐藏的 Library（资源库）!&lt;/p&gt;

&lt;h3 id=&quot;mac-say-&quot;&gt;7. mac say 唱歌&lt;/h3&gt;
&lt;p&gt;应用程序&amp;gt;实用工具&amp;gt;Terminal 复制和黏贴以下内容，然后回车：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;spotlight搜索框中输入”终端”或者”terminal”, 找到并打开”终端”这个程序。&lt;/li&gt;
  &lt;li&gt;在下面引用框里单击三下，cmd+c复制歌词，cmd+v粘贴到终端窗口，回车。&lt;/li&gt;
  &lt;li&gt;开始听歌了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;保﻿修服﻿务和支﻿持期﻿限（序﻿列﻿号）查﻿询﻿工﻿具&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://checkcoverage.apple.com/cn/zh/&quot;&gt;https://checkcoverage.apple.com/cn/zh/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Jan 2015 05:28:00 +0800</pubDate>
        <link>http://cuiqingwei.github.com/favorites/2015/01/14/MacOS.html</link>
        <guid isPermaLink="true">http://cuiqingwei.github.com/favorites/2015/01/14/MacOS.html</guid>
        
        
        <category>favorites</category>
        
      </item>
    
      <item>
        <title>Marketplace Client</title>
        <description>&lt;p&gt;Eclipse Marketplace是个插件应用商店，很实用的一个功能。&lt;/p&gt;

&lt;p&gt;打开 eclipse，help–Eclipse Marketplace Client就能找到&lt;/p&gt;

&lt;p&gt;有的eclipse中没有这个功能就需手动添加Eclipse Marketplace Client。&lt;/p&gt;

&lt;p&gt;help–install new software–add&lt;/p&gt;

&lt;p&gt;添加name: Eclipse Marketplace Client  (随意起名)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   Location:http://download.eclipse.org/mpc/indigo/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加完成后，work with 选择Eclipse Marketplace Client&lt;/p&gt;

&lt;p&gt;就可以下载了。下载完成后，重启eclipse，help–Eclipse Marketplace Client&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jul 2013 00:54:27 +0800</pubDate>
        <link>http://cuiqingwei.github.com/favorites/2013/07/06/Marketplace-Client.html</link>
        <guid isPermaLink="true">http://cuiqingwei.github.com/favorites/2013/07/06/Marketplace-Client.html</guid>
        
        
        <category>favorites</category>
        
      </item>
    
      <item>
        <title>InstantContiki2.6 for CC2530</title>
        <description>&lt;p&gt;搞zigbee算是国内第一批了，很早就知道6lowpan。用cc2430时，从研究&lt;a href=&quot;http://www.tinyos8051wg.net&quot;&gt;http://www.tinyos8051wg.net&lt;/a&gt;，找寻资料了解到 Nanostack1.0.0，直到Nanostack1.1.0 之后就转为contiki了。好久没发帖了，发个帖Mark一下，先！&lt;/p&gt;

&lt;p&gt;1.Download Instant Contiki&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sourceforge.net/projects/contiki/files/Instant%20Contiki/&quot;&gt;&lt;font color=&quot;#000080&quot;&gt;http://sourceforge.net/projects/contiki/files/Instant%20Contiki/&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Install VMWare Player&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/5_0&quot;&gt;&lt;font color=&quot;#000080&quot;&gt;https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/5_0&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.Log into Instant Contiki.&lt;/p&gt;

&lt;p&gt;password is: &lt;strong&gt;&lt;font color=&quot;red&quot;&gt;user&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;4.编译~/contiki/examples/cc2530dk下例子，需要先安装SDCC.&lt;/p&gt;

&lt;p&gt;  参考文档&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;https://github.com/contiki-os/contiki/wiki/8051-Requirements&quot;&gt;&lt;font color=&quot;#000080&quot;&gt;https://github.com/contiki-os/contiki/wiki/8051-Requirements&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  4.1）下载SDCC&lt;/p&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;cd /opt

&amp;nbsp;&amp;nbsp;sudo svn co -r 7100 &lt;/font&gt;
&lt;p&gt;&lt;a href=&quot;https://sdcc.svn.sourceforge.net/svnroot/sdcc/trunk/sdcc/&quot;&gt;&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;https://sdcc.svn.sourceforge.net/svnroot/sdcc/trunk/sdcc/&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  4.2) 更改配置&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;sudo vi /opt/sdcc/device/libs/incl.mk&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  将最后一行&lt;/p&gt;

&lt;p&gt;  MODELS = small medium large&lt;/p&gt;

&lt;p&gt;  替换为&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;MODELS = small &lt;font color=&quot;red&quot;&gt;large huge&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;sudo vi /opt/sdcc/device/libs/Makefile.in&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  将最后一行&lt;/p&gt;

&lt;p&gt;  TARGETS += models small-mcs51-stack-auto&lt;/p&gt;

&lt;p&gt;  替换为&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;TARGETS += models &lt;font color=&quot;red&quot;&gt;model-&lt;/font&gt;mcs51-stack-auto&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;cd /opt/sdcc&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  •Run this:&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;sudo ./configure --disable-gbz80-port --disable-z80-port --disable-ds390-port \&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;--disable-ds400-port --disable-pic14-port --disable-pic16-port \&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;--disable-hc08-port --disable-r2k-port --disable-z180-port \&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;--disable-sdcdb --disable-ucsim&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  此过程若出现&lt;/p&gt;

&lt;p&gt;  &lt;em&gt;configure: error: boost library not found (boost/graph/adjacency_list.hpp)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;  执行&lt;/p&gt;

&lt;font color=&quot;red&quot;&gt;&amp;nbsp;&amp;nbsp;sudo apt-get install libboost-graph-dev&lt;/font&gt;

&lt;p&gt;  完成后，重新执行&lt;/p&gt;

&lt;p&gt;   &lt;font color=&quot;blue&quot;&gt;sudo ./configure --disable-gbz80-port --disable-z80-port --disable-ds390-port \&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;--disable-ds400-port --disable-pic14-port --disable-pic16-port \&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;--disable-hc08-port --disable-r2k-port --disable-z180-port \&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;--disable-sdcdb --disable-ucsim_&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  4.3）编译，安装&lt;/p&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;sudo make

&amp;nbsp;&amp;nbsp;sudo make install&lt;/font&gt;

&lt;p&gt;  4.4）完成&lt;/p&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;sdcc -v&lt;/font&gt;

&lt;p&gt;  显示&lt;/p&gt;

&lt;p&gt;  &lt;em&gt;SDCC : mcs51 3.1.1 #7100 (Jan 10 2013) (Linux)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;5.编译cc2530dk&lt;/p&gt;

&lt;p&gt;  5.1) hello world&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;cd ~/contiki/examples/cc2530dk&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;make hello-world&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  编译完成&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#117;&amp;#115;&amp;#101;&amp;#114;&amp;#064;&amp;#105;&amp;#110;&amp;#115;&amp;#116;&amp;#097;&amp;#110;&amp;#116;&amp;#045;&amp;#099;&amp;#111;&amp;#110;&amp;#116;&amp;#105;&amp;#107;&amp;#105;&amp;#058;&amp;#126;&amp;#047;&amp;#099;&amp;#111;&amp;#110;&amp;#116;&amp;#105;&amp;#107;&amp;#105;&amp;#047;&amp;#101;&amp;#120;&amp;#097;&amp;#109;&amp;#112;&amp;#108;&amp;#101;&amp;#115;&amp;#047;&amp;#099;&amp;#099;&amp;#050;&amp;#053;&amp;#051;&amp;#048;&amp;#100;&amp;#107;&amp;#036;&quot;&gt;&lt;font color=&quot;#000080&quot;&gt;user@instant-contiki:~/contiki/examples/cc2530dk$&lt;/font&gt;&lt;/a&gt; ls&lt;/p&gt;

&lt;p&gt;  blink-hello.c         hello-world.c         obj_cc2530dk           timer-test.c&lt;/p&gt;

&lt;p&gt;  blink-hello.cc2530dk  hello-world.cc2530dk  sensors-demo.c         timer-test.cc2530dk&lt;/p&gt;

&lt;p&gt;  blink-hello.cdb       hello-world.cdb       sensors-demo.cc2530dk  timer-test.cdb&lt;/p&gt;

&lt;p&gt;  blink-hello.hex       hello-world.hex       sensors-demo.cdb       timer-test.hex&lt;/p&gt;

&lt;p&gt;  blink-hello.lk        hello-world.lk        sensors-demo.hex       timer-test.lk&lt;/p&gt;

&lt;p&gt;  blink-hello.map       hello-world.map       sensors-demo.lk        timer-test.map&lt;/p&gt;

&lt;p&gt;  blink-hello.mem       hello-world.mem       sensors-demo.map       timer-test.mem&lt;/p&gt;

&lt;p&gt;  blink-hello.omf       hello-world.omf       sensors-demo.mem       timer-test.omf&lt;/p&gt;

&lt;p&gt;  border-router         Makefile              sensors-demo.omf       udp-ipv6&lt;/p&gt;

&lt;p&gt;  contiki-cc2530dk.lib  Makefile.target       sniffer&lt;/p&gt;

&lt;p&gt;  5.2) udp-ipv6&lt;/p&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;cd ~/contiki/examples/cc2530dk/udp-ipv6&lt;/font&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;make&lt;/font&gt;

&lt;p&gt;  报错，缺少&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;srecord&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  Pack hex file&lt;/p&gt;

&lt;p&gt;  ===============&lt;/p&gt;

&lt;p&gt;  srec_cat -disable_sequence_warnings client.banked-hex -intel -crop 0x18000 0x1FFFF -offset -65536 -o bank1.hex -intel&lt;/p&gt;

&lt;p&gt;  /bin/sh: 5: srec_cat: not found&lt;/p&gt;

&lt;p&gt;  srec_cat -disable_sequence_warnings client.banked-hex -intel -crop 0x28000 0x2FFFF -offset -98304 -o bank2.hex -intel&lt;/p&gt;

&lt;p&gt;  /bin/sh: 5: srec_cat: not found&lt;/p&gt;

&lt;p&gt;  srec_cat -disable_sequence_warnings client.banked-hex -intel -crop 0x38000 0x3FFFF -offset -131072 -o bank3.hex -intel&lt;/p&gt;

&lt;p&gt;  /bin/sh: 5: srec_cat: not found&lt;/p&gt;

&lt;p&gt;  srec_cat -disable_sequence_warnings client.banked-hex -intel -crop 0x48000 0x4FFFF -offset -163840 -o bank4.hex -intel&lt;/p&gt;

&lt;p&gt;  /bin/sh: 5: srec_cat: not found&lt;/p&gt;

&lt;p&gt;  make: *** [client.hex] Error 127&lt;/p&gt;

&lt;p&gt;  执行&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;sudo apt-get install srecord&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;6.TI SmartRF Flash Programmer 烧录 *.hex&lt;/p&gt;

&lt;p&gt;  已烧录hello-world.hex为例，CC2530 UART0 会打印输出如下信息：&lt;/p&gt;

&lt;p&gt;  ##########################################&lt;/p&gt;

&lt;p&gt;  Contiki-2.6&lt;/p&gt;

&lt;p&gt;  TI SmartRF05 EB&lt;/p&gt;

&lt;p&gt;  cc2530-F256, 08KB SRAM&lt;/p&gt;

&lt;p&gt;  SDCC Build:&lt;/p&gt;

&lt;p&gt;    –model-large&lt;/p&gt;

&lt;p&gt;    –stack-auto&lt;/p&gt;

&lt;p&gt;   Net: Rime&lt;/p&gt;

&lt;p&gt;   MAC: CSMA&lt;/p&gt;

&lt;p&gt;   RDC: nullrdc&lt;/p&gt;

&lt;p&gt;  ##########################################&lt;/p&gt;

&lt;p&gt;  Rime is 0x02 bytes long&lt;/p&gt;

&lt;p&gt;  Reading MAC from Info Page&lt;/p&gt;

&lt;p&gt;  Rime configured with address c6:1c&lt;/p&gt;

&lt;p&gt;  Rime is 0x02 bytes long&lt;/p&gt;

&lt;p&gt;  Reading MAC from Info Page&lt;/p&gt;

&lt;p&gt;  Rime configured with address 67:af&lt;/p&gt;

&lt;font color=&quot;magenta&quot;&gt;&amp;nbsp;&amp;nbsp;Hello World!&lt;/font&gt;

&lt;p&gt;7.建立自己的硬件平台[我的是：edutech]和工程[我的是：edutech]&lt;/p&gt;

&lt;p&gt;  7.1) cpu&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;blue&quot;&gt;cd ~/contiki/cpu/cc253x&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  cp Makefile.cc253x Makefile.cc253x-edutech&lt;/p&gt;

&lt;p&gt;  cp bank-alloc.py bank-alloc-edutech.py&amp;lt;/font&amp;gt;&lt;/p&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;vi Makefile.cc253x-edutech&lt;/font&gt;

&lt;p&gt;  编辑第14行&lt;/p&gt;

&lt;p&gt;  BANK_ALLOC = $(CONTIKI_CPU)/bank-alloc.py&lt;/p&gt;

&lt;p&gt;  为&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;BANK_ALLOC = $(CONTIKI_CPU)/&lt;font color=&quot;red&quot;&gt;bank-alloc-edutech.py&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  保存&lt;/p&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;:wq&lt;/font&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;vi bank-alloc-edutech.py&lt;/font&gt;

&lt;p&gt;  编辑第101行&lt;/p&gt;

&lt;p&gt;  file_pat = re.compile(‘obj_cc2530dk[^ ]+.’)&lt;/p&gt;

&lt;p&gt;  为&lt;/p&gt;

&lt;p&gt;** file_pat = re.compile(&lt;font color=&quot;red&quot;&gt;&#39;obj_edutech&lt;/font&gt;[^ ]+.’)**&lt;/p&gt;

&lt;p&gt;  将文中4处，157、158、172、173行中&lt;/p&gt;

&lt;p&gt;  bank-alloc.py 替换为 **&lt;font color=&quot;red&quot;&gt;bank-alloc-edutech.py&lt;/font&gt; **&lt;/p&gt;

&lt;p&gt;  保存&lt;/p&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;:wq&lt;/font&gt;

&lt;p&gt;  7.2) platform&lt;/p&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;cd ~/contiki/platform

&amp;nbsp;&amp;nbsp;cp cc2530dk edutech -R

&amp;nbsp;&amp;nbsp;cd edutech

&amp;nbsp;&amp;nbsp;mv Makefile.cc2530dk&amp;nbsp;&amp;nbsp;Makefile.edutech

&amp;nbsp;&amp;nbsp;vi Makefile.edutech&lt;/font&gt;

&lt;p&gt;  编辑第1行[非必须]&lt;/p&gt;

&lt;p&gt;  # cc2530dk platform makefile&lt;/p&gt;

&lt;p&gt;  为&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;  # &lt;font color=&quot;red&quot;&gt;edutech&lt;/font&gt; platform makefile&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  编辑第19行&lt;/p&gt;

&lt;p&gt;  CLEAN += *.cc2530dk&lt;/p&gt;

&lt;p&gt;  为&lt;/p&gt;

&lt;p&gt;  CLEAN += &lt;font color=&quot;red&quot;&gt;*.edutech *.native&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;  编辑第52行,最后一行&lt;/p&gt;

&lt;p&gt;  include $(CONTIKI_CPU)/Makefile.cc253x&lt;/p&gt;

&lt;p&gt;  为&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;include $(CONTIKI_CPU)/&lt;font color=&quot;red&quot;&gt;Makefile.cc253x-edutech&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  保存&lt;/p&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;:wq&lt;/font&gt;

&lt;p&gt;  接下来根据实际硬件情况，编辑或创建驱动文件&lt;/p&gt;

&lt;p&gt;  7.3) project&lt;/p&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;cd ~/contiki/examples

&amp;nbsp;&amp;nbsp;cp cc2530dk/ edutech -R

&amp;nbsp;&amp;nbsp;cd edutech

&amp;nbsp;&amp;nbsp;vi Makefile.target&lt;/font&gt;

&lt;p&gt;  编辑第1行&lt;/p&gt;

&lt;p&gt;  TARGET = cc2530dk&lt;/p&gt;

&lt;p&gt;  为&lt;/p&gt;

&lt;p&gt;  TARGET = &lt;font color=&quot;red&quot;&gt;edutech&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;  保存&lt;/p&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;:wq&lt;/font&gt;

&lt;font color=&quot;blue&quot;&gt;&amp;nbsp;&amp;nbsp;make&lt;/font&gt;

&lt;p&gt;  烧录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/markdown/20130111/1.jpg&quot; alt=&quot;programmer&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;using-ti-cc-debugger-based-on-ubuntu&quot;&gt;using TI CC Debugger (based on Ubuntu)&lt;/h1&gt;
&lt;p&gt;install Package libboost-all-dev and libusb-1.0-0-dev by using command&lt;/p&gt;

&lt;p&gt;sudo apt-get install libboost-all-dev&lt;/p&gt;

&lt;p&gt;sudo apt-get install libusb-1.0-0-dev&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;download cc-tool source code from https://github.com/misham/cc-tool&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;extract cc-tool source code and install by using command&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;sudo wget https://github.com/misham/cc-tool/archive/master.zip&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;sudo unzip master.zip&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;cd cc-tool- master&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;sudo ./configure&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;make&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;make install&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;use lsusb command for list your Board&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;lsusb&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the output should be&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;..Bus 006 Device 015: ID 0451:16a0 Texas Instruments, Inc. Bus 006 Device 013: ID 0451:16a0 Texas Instruments, Inc. ..&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;change directory to your .hex file&lt;/p&gt;

    &lt;p&gt;(example /home/user/contiki-sensinode/examples/cc2530dk)&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;cd /home/user/contiki-sensinode/examples/cc2530dk&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;start program board (cc-tool -ew FILE_NAME.hex -d’Bus:Device’ -v)&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;cc-tool -ew blink-hello.hex -d’006:015’ -v&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the result should be&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Programmer: SmartRF05EB Target: CC2530 Erasing flash… Erasing completed Writing flash… (42 KB)… Writing completed (3.13 s.) Verifying flash… Verification completed (3.33 s.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;for more cc-tool command option you can use –help&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;cc-tool –help&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可使用 &lt;strong&gt;&lt;font color=&quot;red&quot;&gt;sudo cc-tool –n cc2530 –w blink-hello.hex –v&lt;/font&gt;&lt;/strong&gt; 烧录&lt;/p&gt;

&lt;h1 id=&quot;sensniff&quot;&gt;sensniff&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/g-oikonomou/sensniff&quot;&gt;https://github.com/g-oikonomou/sensniff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jerusalemdax/contiki-cc2530eb&quot;&gt;https://github.com/jerusalemdax/contiki-cc2530eb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;git clone git://github.com/jerusalemdax/contiki-cc2530eb.git&quot;&gt;git clone git://github.com/jerusalemdax/contiki-cc2530eb.git&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;发表链接&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;amoBBS 阿莫电子论坛 &lt;a href=&quot;http://www.amobbs.com/thread-5515866-1-1.html&quot;&gt;http://www.amobbs.com/thread-5515866-1-1.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;www.iotdev.net &lt;a href=&quot;http://www.iotdev.net/thread-210-1-1.html&quot;&gt;http://www.iotdev.net/thread-210-1-1.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Jan 2013 21:14:34 +0800</pubDate>
        <link>http://cuiqingwei.github.com/projects/2013/01/11/InstantContiki2.6-for-CC2530.html</link>
        <guid isPermaLink="true">http://cuiqingwei.github.com/projects/2013/01/11/InstantContiki2.6-for-CC2530.html</guid>
        
        
        <category>projects</category>
        
      </item>
    
      <item>
        <title>曾经折腾过的那些</title>
        <description>&lt;p&gt;整理硬盘资料时，看到这些图片。心情很激动，这些个都是与硬件相关的，什么MP3啊等等，可惜没有保留图片,纯软件的就更多了。才发现自己2009年到现在这几年一直忙着搞公司的事。已好久没停下来做点自己真正喜欢或是让自己心动的事了！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2002年.闪动的LOVE
&lt;img src=&quot;/images/markdown/20121014/1.jpeg&quot; alt=&quot;2002年.闪动的LOVE&quot; /&gt;
&lt;em&gt;大学期间参加大学电子设计大赛，利用当时所学知识和课余时间制作，用来哄现在的老婆（当时的女朋友）开心的小东西。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2003年.有源音箱
&lt;img src=&quot;/images/markdown/20121014/2.jpeg&quot; alt=&quot;2003年.有源音箱(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/3.jpeg&quot; alt=&quot;2003年.有源音箱(2)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/4.jpeg&quot; alt=&quot;2003年.有源音箱(3)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/5.jpeg&quot; alt=&quot;2003年.有源音箱(4)&quot; /&gt;
&lt;em&gt;大学快毕业时自己制作的有源音箱，电路板用的是公板，音箱箱体还是几个同学跑到学校外面自己买得大木板，最后找木工切割的。喷漆也是自己处理的。想想还是挺激动人心的。现在这东西已被我运回老家，音质我一直觉得非常好，不比当时流行的几百块的“低音炮”差。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2005年1月18日.创自电动读卡器测试工装
&lt;img src=&quot;/images/markdown/20121014/6.jpeg&quot; alt=&quot;创自电动读卡器测试&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2005年1月18日.按键寿命测试工装
&lt;img src=&quot;/images/markdown/20121014/7.jpeg&quot; alt=&quot;按键测试工装&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2005年5月20日.驱动软驱步进电机
&lt;img src=&quot;/images/markdown/20121014/8.jpeg&quot; alt=&quot;驱动软驱步进电机&quot; /&gt;
&lt;em&gt;为了学习步进电机驱动原理，从一个旧软驱上拆下了磁头的驱动电机，并利用手上现有电路板改装成功驱动。当时，很开心！因为，那时才真正开始学习单片机编程。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2005年6月3日.八路电池工装
&lt;img src=&quot;/images/markdown/20121014/9.jpeg&quot; alt=&quot;八路电池工装&quot; /&gt;
&lt;em&gt;电池充放电测试工装，用于测试电池充放电时间，容量等指示。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2005年6月3日.分币器测试
&lt;img src=&quot;/images/markdown/20121014/10.jpeg&quot; alt=&quot;分币器测试&quot; /&gt;
&lt;em&gt;利用现有电路板，编写软件解决测试问题。此时，是对单片机编程最痴迷的时候，也是学东西最多的时候。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2005年6月3日.升降式IC卡座测试
&lt;img src=&quot;/images/markdown/20121014/11.jpeg&quot; alt=&quot;升降式IC卡座测试工装&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2005年6月3日.摇摆测试机
&lt;img src=&quot;/images/markdown/20121014/12.jpeg&quot; alt=&quot;摇摆测试机(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/13.jpeg&quot; alt=&quot;摇摆测试机(2)&quot; /&gt;
&lt;em&gt;测试链接线的弯折寿命，比如我们常用的耳机线、电源适配器DC插头。。。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2005年6月3日.琴键开关测试简易装置
&lt;img src=&quot;/images/markdown/20121014/14.jpeg&quot; alt=&quot;琴键天关测试简易装置(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/15.jpeg&quot; alt=&quot;琴键天关测试简易装置(2)&quot; /&gt;
&lt;em&gt;缩写简易软件测试琴键开关寿命，带检测功能。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2005年6月3日.硬币识别测试工装
&lt;img src=&quot;/images/markdown/20121014/16.jpeg&quot; alt=&quot;硬币识别测试&quot; /&gt;
&lt;em&gt;这东西，看着就很牛，流水作业。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2005年6月3日.自设计电动读卡测试
&lt;img src=&quot;/images/markdown/20121014/17.jpeg&quot; alt=&quot;自设计电动读卡测试&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2005年7月27日.可计行程的小车
&lt;img src=&quot;/images/markdown/20121014/18.jpeg&quot; alt=&quot;可计行程的小车(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/19.jpeg&quot; alt=&quot;可计行程的小车(2)&quot; /&gt;
&lt;em&gt;参加电子设计大赛抽到的题目是小车，可惜当时没把参赛资料保留下来。参加工作后，一天突发其想再设计一下。学生时代很难的东西，工作后一个下午就DIY出来了。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2005年9月1日.智能高温箱
&lt;img src=&quot;/images/markdown/20121014/20.jpeg&quot; alt=&quot;智能高温箱(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/21.jpeg&quot; alt=&quot;智能高温箱(2)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/22.jpeg&quot; alt=&quot;智能高温箱(3)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/23.jpeg&quot; alt=&quot;智能高温箱(4)&quot; /&gt;
&lt;em&gt;我一直觉得这是个很牛的设计，创作源头是当时的老大，老大很牛。从他那学到了好多东西。至今都受益匪浅！那也是自己成长最快的时期。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2006年10月4日.自学C++Builder
&lt;img src=&quot;/images/markdown/20121014/24.jpeg&quot; alt=&quot;ThinkPad&quot; /&gt;
&lt;em&gt;国庆假期自学了C++Builder（图中的ThinkPad花了自己8000多元。当时，自己也不过刚当上万元户，买了ThinkPad就近乎破产了。这也证明了：只有穷单身汉才会毫无顾及的拿出所有积蓄去做自己喜欢的事！珍惜单身的时光，去做点自己喜欢做的事！） 
学习单片机，做东西做多了。发现好多时候需要用到上位机软件配合。于是，利用一个十一假期恶补了C++Builder，这个非常有意义，为后面自己做项目奠定了坚实的基础！&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2006年4月4日.反冲流灌溉控制器
&lt;img src=&quot;/images/markdown/20121014/25.jpeg&quot; alt=&quot;反冲流灌溉控制器(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/26.jpeg&quot; alt=&quot;反冲流灌溉控制器(2)&quot; /&gt;
&lt;em&gt;工作之余，做得第一项目。Mark一下，后面做得比这好得多的项目反而没留下什么图片，或是也不能公开什么 ：）&lt;/em&gt;
&lt;a href=&quot;http://www.amobbs.com/thread-612138-1-1.html&quot;&gt;论坛链接&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2006年4月4日.收银箱寿命测试仪
&lt;img src=&quot;/images/markdown/20121014/27.jpeg&quot; alt=&quot;收银箱寿命测试仪&quot; /&gt;
&lt;em&gt;当时做出这个东西的时候，我们还找到一个机械打领带机，比我们这个牛多了！&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2006年8月14.接触电流测试仪
&lt;img src=&quot;/images/markdown/20121014/28.jpeg&quot; alt=&quot;接触电流测试仪 (1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/29.jpeg&quot; alt=&quot;接触电流测试仪 (2)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/30.jpeg&quot; alt=&quot;接触电流测试仪 (3)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/31.jpeg&quot; alt=&quot;接触电流测试仪 (4)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/32.jpeg&quot; alt=&quot;接触电流测试仪 (5)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/33.jpeg&quot; alt=&quot;接触电流测试仪 (6)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/34.jpeg&quot; alt=&quot;接触电流测试仪 (7)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/35.jpeg&quot; alt=&quot;接触电流测试仪 (8)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/36.jpeg&quot; alt=&quot;接触电流测试仪 (9)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/37.jpeg&quot; alt=&quot;接触电流测试仪 (10)&quot; /&gt;
&lt;em&gt;这个项目，菜单处理部分让我花了很多心血。在单片机上实现了checkbox效果，引入了进度条。。。每个小图标都精心设计。现在想想当初那股劲，都让我很自豪！&lt;/em&gt;
&lt;a href=&quot;http://www.amobbs.com/thread-1054447-1-1.html&quot;&gt;论坛链接&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2007年10月11日.AVRasp
&lt;img src=&quot;/images/markdown/20121014/38.jpeg&quot; alt=&quot;AVRasp(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/39.jpeg&quot; alt=&quot;AVRasp(2)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/40.jpeg&quot; alt=&quot;AVRasp-3D(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/41.jpeg&quot; alt=&quot;AVRasp-3D(2)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/42.jpeg&quot; alt=&quot;AVRasp成品(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/43.jpeg&quot; alt=&quot;AVRasp成品(2)&quot; /&gt;
&lt;em&gt;自己制作的AVR小工具，重点是为了学习Eagle 3D。Eagle 3D是众多EDA里最漂亮的，至今我还是这么认为！&lt;/em&gt;
&lt;a href=&quot;http://www.amobbs.com/thread-831661-1-1.html&quot;&gt;论坛链接1&lt;/a&gt;
&lt;a href=&quot;http://www.amobbs.com/thread-854275-1-1.html&quot;&gt;论坛链接2&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2007年1月25日.1.25雷击发生器
&lt;img src=&quot;/images/markdown/20121014/41.jpeg&quot; alt=&quot;1.25雷击发生器&quot; /&gt;
&lt;em&gt;这东西很牛，主要还是牛在硬件上。这个还是得说当时的老大牛。如果想体验”雷劈一下”的感觉，可以拿这个试试。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2007年1月28日.第一版小崔风火轮
&lt;img src=&quot;/images/markdown/20121014/45.jpeg&quot; alt=&quot;第一版小崔风火轮设计现场(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/46.jpeg&quot; alt=&quot;第一版小崔风火轮设计现场(2)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/47.jpeg&quot; alt=&quot;第一版小崔风火轮设计现场(3)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/48.jpeg&quot; alt=&quot;第一版小崔风火轮设计现场(4)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/49.jpeg&quot; alt=&quot;第一版小崔风火轮设计现场(5)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/50.jpeg&quot; alt=&quot;第一版小崔风火轮设计现场(5)&quot; /&gt;
&lt;em&gt;本人做东西一向都很快，调试软件只用了一个下午和晚上。当时，就已养成了事情搞不完不睡觉的优良传统。&lt;/em&gt;
&lt;a href=&quot;http://www.amobbs.com/thread-716357-1-1.html&quot;&gt;论坛链接&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2007年1月29.基于C++Builder6编写的风火轮取模软件
&lt;img src=&quot;/images/markdown/20121014/51.jpeg&quot; alt=&quot;取模软件1&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/52.jpeg&quot; alt=&quot;取模软件2&quot; /&gt;
&lt;em&gt;此时，我的C++Builder6已炉火纯青，不过现在搞这类小软件已转向C#.net了。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2007年1月29日.第一版小崔风火轮设计完成
&lt;img src=&quot;/images/markdown/20121014/53.jpeg&quot; alt=&quot;第一版小崔风火轮&quot; /&gt;
&lt;em&gt;当看到这个效果时，真得有说不出的激动。&lt;/em&gt;
&lt;a href=&quot;http://www.amobbs.com/thread-850834-1-1.html&quot;&gt;论坛链接&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2008年11月20日.基于CC1110+TRF7960的RFID读卡器
&lt;img src=&quot;/images/markdown/20121014/54.jpeg&quot; alt=&quot;读卡器&quot; /&gt;
&lt;em&gt;折腾了我好久的中断触发模式，最后还是用的轮询。CC1110跟MSP430还是有区别地。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2008年1月2日.RGB LED
&lt;img src=&quot;/images/markdown/20121014/55.jpeg&quot; alt=&quot;调光调试现场(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/56.jpeg&quot; alt=&quot;调光调试现场(2)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/57.jpeg&quot; alt=&quot;调光调试现场(3)&quot; /&gt;
&lt;em&gt;当时如果坚持做点调光的产品，现在说不定发了。&lt;/em&gt;
&lt;a href=&quot;http://www.amobbs.com/thread-883719-1-1.html&quot;&gt;论坛链接&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2008年3月31日.第一版RGB小崔风火轮
&lt;img src=&quot;/images/markdown/20121014/58.jpeg&quot; alt=&quot;第一版RGB小崔风火轮调试现场(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/59.jpeg&quot; alt=&quot;第一版RGB小崔风火轮调试现场(2)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/60.jpeg&quot; alt=&quot;第一版RGB小崔风火轮调试现场(3)&quot; /&gt;
&lt;em&gt;在租住的小房间里调试RGB风火轮。很投入。。。。。。如今住进了自己的房子，却怎么也找不到一个可以自己折腾的空间了。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2008年3月9日.小崔风火轮简易版
&lt;img src=&quot;/images/markdown/20121014/61.jpeg&quot; alt=&quot;小崔风火轮简易版(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/62.jpeg&quot; alt=&quot;小崔风火轮简易版(2)&quot; /&gt;
&lt;em&gt;在老婆的英明指导下，将小崔风火轮包装成产品。虽然，没搞出什么名堂。但还是赚了点零花钱。这东西至今还有人经常联系我聊合作的事。可惜已决定不在江湖混了，只能婉拒！&lt;/em&gt;
&lt;a href=&quot;http://www.amobbs.com/thread-946455-1-1.html&quot;&gt;论坛链接&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2008年5月11日.CC2430仿真器
&lt;img src=&quot;/images/markdown/20121014/63.jpeg&quot; alt=&quot;CC2430仿真器&quot; /&gt;
&lt;em&gt;赚到最多的一个DIY产品。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2008年5月16.为老外定制的RGB风火轮
&lt;img src=&quot;/images/markdown/20121014/64.jpeg&quot; alt=&quot;为老外定制的RGB风火轮(1)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/65.jpeg&quot; alt=&quot;为老外定制的RGB风火轮(2)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/66.jpeg&quot; alt=&quot;为老外定制的RGB风火轮(3)&quot; /&gt;
&lt;img src=&quot;/images/markdown/20121014/67.jpeg&quot; alt=&quot;为老外定制的RGB风火轮(4)&quot; /&gt;
&lt;em&gt;给一个国外客户弄的，好像也是中国人，只是移民了。&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2009年8月31日.CC2530仿真器
&lt;img src=&quot;/images/markdown/20121014/68.jpeg&quot; alt=&quot;CC2530仿真器&quot; /&gt;
&lt;em&gt;这个的重点是设计上做了优化，成本上要比TI原厂那个低很多！&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://user.qzone.qq.com/39886157/blog/1350188306&quot;&gt;http://user.qzone.qq.com/39886157/blog/1350188306&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 15 Oct 2012 05:41:27 +0800</pubDate>
        <link>http://cuiqingwei.github.com/favorites/2012/10/15/%E6%9B%BE%E7%BB%8F%E6%8A%98%E8%85%BE%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B.html</link>
        <guid isPermaLink="true">http://cuiqingwei.github.com/favorites/2012/10/15/%E6%9B%BE%E7%BB%8F%E6%8A%98%E8%85%BE%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B.html</guid>
        
        
        <category>favorites</category>
        
      </item>
    
  </channel>
</rss>
